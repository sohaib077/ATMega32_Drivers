//
// Created by sohai on 2/12/2024.
//

/****************************************************/
/**************** Name : Sohaib     *****************/
/**************** Date : 2/12/2024 *****************/
/**************** SWC  : USART     *****************/
/**************** Version : 1.0     *****************/
/****************************************************/

#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"

#include "USART_config.h"
#include "USART_private.h"
#include "USART_interface.h"
#include "USART_register.h"

static u8 USART_u8State = IDLE;
static u8 *USART_pu8ReceivedData = NULL;
static u8 USART_pu8SendData = NULL;
static u8 *USART_pu8StringData = NULL;
static u8 USART_u8index = 0;
static u8 USART_u8ReceivingStringFlag = 0;
static u8 USART_u8ReceivedStringLength = 0;

static void (*USART_pfReceivedNotification)(void) = NULL;

static void (*USART_pfSendNotification)(void) = NULL;

void USART_voidInit(void) {

	/* remember we can't modify UCSRC easly */
	u8 Local_u8UCSRC = 0;

	/* Mode */
#if USART_MODE == SYNCHRONOUS
	CLR_BIT(Local_u8UCSRC , UCSRC_UMSEL);

	/* clk parity */
#if USART_CLOCK_PARITY == XCK_RISING_TXD
	CLR_BIT(Local_u8UCSRC , UCSRC_UCPOL);
#elif USART_CLOCK_PARITY == XCK_FALLING_TXD
	SET_BIT(Local_u8UCSRC , UCSRC_UCPOL);
#else
#error "Wrong USAUSART_CLOCK_PARITY config"
#endif

#elif USART_MODE == ASYNCHRONOUS
	SET_BIT(UCSRC, UCSRC_UMSEL);
#else
#error "Wrong USART_MODE config"
#endif

	/* parity mode */
#if USART_PARITY_MODE == DISABLED
	CLR_BIT(Local_u8UCSRC, UCSRC_UPM0);
	CLR_BIT(Local_u8UCSRC, UCSRC_UPM1);
#elif USART_PARITY_MODE == EVEN_PARITY
	CLR_BIT(Local_u8UCSRC , UCSRC_UPM0);
	SET_BIT(Local_u8UCSRC , UCSRC_UPM1);
#elif USART_PARITY_MODE == ODD_PARITY
	SET_BIT(Local_u8UCSRC , UCSRC_UPM0);
	SET_BIT(Local_u8UCSRC , UCSRC_UPM1);
#else
#error "Wrong USART_PARITY_MODE config"
#endif

	/* stop bits */
#if USART_STOP_BITS == STOP_BIT_1
	CLR_BIT(Local_u8UCSRC, UCSRC_USBS);
#elif USART_STOP_BITS == STOP_BIT_2
	SET_BIT(Local_u8UCSRC , UCSRC_USBS);
#else
#error "Wrong USART_STOP_BITS config"
#endif

	/* data size */
#if USART_DATA_SIZE == DATA_SIZE_5_BIT
	CLR_BIT(Local_u8UCSRC , UCSRC_UCSZ0);
	CLR_BIT(Local_u8UCSRC , UCSRC_UCSZ1);
	CLR_BIT(UCSRB , UCSRC_UCSZ2);
#elif USART_DATA_SIZE == DATA_SIZE_6_BIT
	SET_BIT(Local_u8UCSRC , UCSRC_UCSZ0);
	CLR_BIT(Local_u8UCSRC , UCSRC_UCSZ1);
	CLR_BIT(UCSRB , UCSRC_UCSZ2);
#elif USART_DATA_SIZE == DATA_SIZE_7_BIT
	CLR_BIT(Local_u8UCSRC , UCSRC_UCSZ0);
	SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1);
	CLR_BIT(UCSRB , UCSRC_UCSZ2);
#elif USART_DATA_SIZE == DATA_SIZE_8_BIT
	CLR_BIT(Local_u8UCSRC, UCSRC_UCSZ0);
	SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
	SET_BIT(UCSRB, UCSRB_UCSZ2);
#elif USART_DATA_SIZE == DATA_SIZE_9_BIT
	SET_BIT(Local_u8UCSRC , UCSRC_UCSZ0);
	SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1);
	SET_BIT(UCSRB , UCSRC_UCSZ2);
#else
#error "Wrong USART_DATA_SIZE config"
#endif

	/* to access the UCSRC */
	SET_BIT(Local_u8UCSRC, UCSRC_URSEL);
	UCSRC = Local_u8UCSRC;

	/* Calculating UBRR value */
	u16 Local_u16UBRR = (u16) (USART_SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)
			- 1);

	/* UBRRH contains the four most significant bits */
	UBRRH = (u8) (Local_u16UBRR << 8);
	UBRRL = (u8) Local_u16UBRR;

	SET_BIT(UCSRB, UCSRB_RXEN); /* Receive enable  */
	SET_BIT(UCSRB, UCSRB_TXEN); /* Transmitter enable  */
}

u8 USART_u8ReceiveData(u8 *Copy_u8ReceivedData) {

	if (Copy_u8ReceivedData == NULL)
		return NULL_POINTER;
	if (USART_u8State == BUSY)
		return BUSY_STATE;

	USART_u8State = BUSY;

	u32 Local_u32TimeOutCounter = USART_u32TIMEOUT;
	while (!GET_BIT(UCSRA, UCSRA_RXC) && Local_u32TimeOutCounter--)
		; /* Polling  */
	if (!Local_u32TimeOutCounter)
		return TIMEOUT_STATE;

	*Copy_u8ReceivedData = UDR;

	USART_u8State = IDLE;
	return OK;
}

u8 USART_u8SendData(u8 Copy_u8Data) {
	if (USART_u8State == BUSY)
		return BUSY_STATE;

	USART_u8State = BUSY;

	u32 Local_u32TimeOutCounter = USART_u32TIMEOUT;
	while (!GET_BIT(UCSRA, UCSRA_UDRE) && Local_u32TimeOutCounter--)
		; /* Polling  */
	if (!Local_u32TimeOutCounter)
		return TIMEOUT_STATE;

	UDR = Copy_u8Data;

	USART_u8State = IDLE;
	return OK;
}

//----------------------------------------------------------------------------

u8 USART_u8ReceiveDataAsync(u8 *Copy_u8ReceivedData,
		void (*Copy_pfNotification)(void)) {

	if (Copy_pfNotification == NULL && !USART_u8ReceivingStringFlag)
		return NULL_POINTER;
	if (Copy_u8ReceivedData == NULL)
		return NULL_POINTER;
	if (USART_u8State == BUSY)
		return BUSY_STATE;

	USART_u8State = BUSY;

	USART_pu8ReceivedData = Copy_u8ReceivedData;

	if (Copy_pfNotification != NULL)
		USART_pfReceivedNotification = Copy_pfNotification;

	/* enable complete receiving Interrupt */
	SET_BIT(UCSRB, UCSRB_RXCIE);
	return OK;
}

u8 USART_u8ReceiveStringAsync(u8 *Copy_u8ReceivedData, u8 Copy_u8StringLength,
		void (*Copy_pfNotification)(void)) {

	if (Copy_u8ReceivedData == NULL || Copy_pfNotification == NULL)
		return NULL_POINTER;
	if (USART_u8State == BUSY)
		return BUSY_STATE;

	USART_u8index = 0;
	USART_u8ReceivedStringLength = Copy_u8StringLength;
	USART_pfReceivedNotification = Copy_pfNotification;
	/* set it to prevent returning null pointer from USART_u8ReceiveDataAsync */
	USART_u8ReceivingStringFlag = 1;

	USART_u8ReceiveDataAsync(&Copy_u8ReceivedData, NULL);
	return OK;
}

u8 USART_u8SendDataAsync(u8 Copy_u8Data) {
	if (USART_u8State == BUSY)
		return BUSY_STATE;

	USART_u8State = BUSY;
	USART_pu8SendData = Copy_u8Data;
	/* Enable Data Register Empty Interrupt */
	SET_BIT(UCSRB, UCSRB_UDRIE);
	return OK;
}

u8 USART_u8SendStringAsync(u8 *Copy_u8StringData,
		void (*Copy_pfNotification)(void)) {
	if (USART_u8State == BUSY)
		return BUSY_STATE;
	if (Copy_u8StringData == NULL || Copy_pfNotification == NULL)
		return NULL_POINTER;

	USART_u8index = 0;
	USART_pu8StringData = Copy_u8StringData;
	USART_pfSendNotification = Copy_pfNotification;

	/* Enable Complete Transmitting Interrupt */
	SET_BIT(UCSRB, UCSRB_TXCIE);

	USART_u8SendDataAsync(Copy_u8StringData[USART_u8index]);

	return OK;
}

//----------------------------------------------------------------------------

/* ISR for Receiving Completed */
void __vector_13(void) __attribute__ ((signal));

void __vector_13(void) {

	USART_u8State = IDLE;

	/* Checking is interrupt from receiving string func or not */
	if (USART_u8ReceivingStringFlag) {

		if (USART_u8index != USART_u8ReceivedStringLength) {

			USART_u8index++;
			/* Copying received data */
			*USART_pu8ReceivedData = UDR;

			if (USART_u8index != USART_u8ReceivedStringLength)
				USART_u8ReceiveDataAsync(USART_pu8ReceivedData + 1,
				NULL);
		}

		if (USART_u8index == USART_u8ReceivedStringLength) {

			*USART_pu8ReceivedData = '\0';

			/* clr it to return null pointer from USART_u8ReceiveDataAsync */
			USART_u8ReceivingStringFlag = 0;

			USART_pu8ReceivedData[-3] != NULL ?
			USART_u8SendData(USART_pu8ReceivedData[-3]) : USART_u8SendData('2');
			USART_pu8ReceivedData[-2] != NULL ?
			USART_u8SendData(USART_pu8ReceivedData[-2]) : USART_u8SendData('1');
			USART_pu8ReceivedData[-1] != NULL ?
			USART_u8SendData(USART_pu8ReceivedData[-1]) : USART_u8SendData('0');
			USART_u8SendData('-');


			USART_pfReceivedNotification();

			/* Disable complete receiving Interrupt */
			CLR_BIT(UCSRB, UCSRB_RXCIE);

		}

	} else {

		/* Copying received data */
		*USART_pu8ReceivedData = UDR;

		USART_pfReceivedNotification();

		/* Disable complete receiving Interrupt */
		CLR_BIT(UCSRB, UCSRB_RXCIE);

	}
}

/* ISR for Sending Completed */
void __vector_15(void) __attribute__ ((signal));

void __vector_15(void) {

	USART_u8State = IDLE;

	if (USART_pu8StringData[++USART_u8index] == '\0') {

		USART_pfSendNotification();
		/* Disable Complete Transmitting Interrupt */
		CLR_BIT(UCSRB, UCSRB_TXCIE);

	} else {
		USART_u8SendDataAsync(USART_pu8StringData[USART_u8index]);
	}
}

/* ISR for Data Register Empty*/
void __vector_14(void) __attribute__ ((signal));
void __vector_14(void) {

	/* Sending data */
	UDR = USART_pu8SendData;

	/* Disable Data Register Empty Interrupt */
	CLR_BIT(UCSRB, UCSRB_UDRIE);

	USART_u8State = IDLE;
}



