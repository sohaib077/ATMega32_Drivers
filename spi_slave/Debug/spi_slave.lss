
spi_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00007d2e  00007dc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800186  00800186  00007ee8  2**0
                  ALLOC
  3 .stab         00005100  00000000  00000000  00007ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001eb6  00000000  00000000  0000cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002e0  00000000  00000000  0000ee9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000333  00000000  00000000  0000f17e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004013  00000000  00000000  0000f4b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e5d  00000000  00000000  000134c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d9a  00000000  00000000  00015321  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000300  00000000  00000000  000170bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003fc  00000000  00000000  000173bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002926  00000000  00000000  000177b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0001a0de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bf 24 	jmp	0x497e	; 0x497e <__vector_1>
       8:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__vector_2>
       c:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 97 1f 	jmp	0x3f2e	; 0x3f2e <__vector_10>
      2c:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__vector_11>
      30:	0c 94 43 21 	jmp	0x4286	; 0x4286 <__vector_12>
      34:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__vector_13>
      38:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__vector_14>
      3c:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__vector_15>
      40:	0c 94 3d 2a 	jmp	0x547a	; 0x547a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fd e7       	ldi	r31, 0x7D	; 125
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <main>
      8a:	0c 94 95 3e 	jmp	0x7d2a	; 0x7d2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 bc 14 	call	0x2978	; 0x2978 <__subsf3>
     1bc:	0e 94 0e 18 	call	0x301c	; 0x301c <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 0e 18 	call	0x301c	; 0x301c <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__fixsfdi>:
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	7b 01       	movw	r14, r22
     1f2:	8c 01       	movw	r16, r24
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
     200:	88 23       	and	r24, r24
     202:	0c f0       	brlt	.+2      	; 0x206 <__fixsfdi+0x1e>
     204:	5c c0       	rjmp	.+184    	; 0x2be <__fixsfdi+0xd6>
     206:	c8 01       	movw	r24, r16
     208:	b7 01       	movw	r22, r14
     20a:	90 58       	subi	r25, 0x80	; 128
     20c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfdi>
     210:	21 95       	neg	r18
     212:	e1 e0       	ldi	r30, 0x01	; 1
     214:	12 16       	cp	r1, r18
     216:	08 f0       	brcs	.+2      	; 0x21a <__fixsfdi+0x32>
     218:	e0 e0       	ldi	r30, 0x00	; 0
     21a:	31 95       	neg	r19
     21c:	f1 e0       	ldi	r31, 0x01	; 1
     21e:	13 16       	cp	r1, r19
     220:	08 f0       	brcs	.+2      	; 0x224 <__fixsfdi+0x3c>
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	e3 2e       	mov	r14, r19
     226:	ee 1a       	sub	r14, r30
     228:	e1 e0       	ldi	r30, 0x01	; 1
     22a:	3e 15       	cp	r19, r14
     22c:	08 f0       	brcs	.+2      	; 0x230 <__fixsfdi+0x48>
     22e:	e0 e0       	ldi	r30, 0x00	; 0
     230:	fe 2b       	or	r31, r30
     232:	41 95       	neg	r20
     234:	a1 e0       	ldi	r26, 0x01	; 1
     236:	14 16       	cp	r1, r20
     238:	08 f0       	brcs	.+2      	; 0x23c <__fixsfdi+0x54>
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	f4 2e       	mov	r15, r20
     23e:	ff 1a       	sub	r15, r31
     240:	e1 e0       	ldi	r30, 0x01	; 1
     242:	4f 15       	cp	r20, r15
     244:	08 f0       	brcs	.+2      	; 0x248 <__fixsfdi+0x60>
     246:	e0 e0       	ldi	r30, 0x00	; 0
     248:	ae 2b       	or	r26, r30
     24a:	51 95       	neg	r21
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	15 16       	cp	r1, r21
     250:	08 f0       	brcs	.+2      	; 0x254 <__fixsfdi+0x6c>
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	05 2f       	mov	r16, r21
     256:	0a 1b       	sub	r16, r26
     258:	e1 e0       	ldi	r30, 0x01	; 1
     25a:	50 17       	cp	r21, r16
     25c:	08 f0       	brcs	.+2      	; 0x260 <__fixsfdi+0x78>
     25e:	e0 e0       	ldi	r30, 0x00	; 0
     260:	fe 2b       	or	r31, r30
     262:	61 95       	neg	r22
     264:	a1 e0       	ldi	r26, 0x01	; 1
     266:	16 16       	cp	r1, r22
     268:	08 f0       	brcs	.+2      	; 0x26c <__fixsfdi+0x84>
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	16 2f       	mov	r17, r22
     26e:	1f 1b       	sub	r17, r31
     270:	e1 e0       	ldi	r30, 0x01	; 1
     272:	61 17       	cp	r22, r17
     274:	08 f0       	brcs	.+2      	; 0x278 <__fixsfdi+0x90>
     276:	e0 e0       	ldi	r30, 0x00	; 0
     278:	ae 2b       	or	r26, r30
     27a:	71 95       	neg	r23
     27c:	f1 e0       	ldi	r31, 0x01	; 1
     27e:	17 16       	cp	r1, r23
     280:	08 f0       	brcs	.+2      	; 0x284 <__fixsfdi+0x9c>
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	b7 2f       	mov	r27, r23
     286:	ba 1b       	sub	r27, r26
     288:	e1 e0       	ldi	r30, 0x01	; 1
     28a:	7b 17       	cp	r23, r27
     28c:	08 f0       	brcs	.+2      	; 0x290 <__fixsfdi+0xa8>
     28e:	e0 e0       	ldi	r30, 0x00	; 0
     290:	fe 2b       	or	r31, r30
     292:	81 95       	neg	r24
     294:	a1 e0       	ldi	r26, 0x01	; 1
     296:	18 16       	cp	r1, r24
     298:	08 f0       	brcs	.+2      	; 0x29c <__fixsfdi+0xb4>
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	38 2f       	mov	r19, r24
     29e:	3f 1b       	sub	r19, r31
     2a0:	f3 2f       	mov	r31, r19
     2a2:	e1 e0       	ldi	r30, 0x01	; 1
     2a4:	83 17       	cp	r24, r19
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <__fixsfdi+0xc2>
     2a8:	e0 e0       	ldi	r30, 0x00	; 0
     2aa:	ae 2b       	or	r26, r30
     2ac:	91 95       	neg	r25
     2ae:	3e 2d       	mov	r19, r14
     2b0:	4f 2d       	mov	r20, r15
     2b2:	50 2f       	mov	r21, r16
     2b4:	61 2f       	mov	r22, r17
     2b6:	7b 2f       	mov	r23, r27
     2b8:	8f 2f       	mov	r24, r31
     2ba:	9a 1b       	sub	r25, r26
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__fixsfdi+0xde>
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfdi>
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	08 95       	ret

000002d0 <__fixunssfdi>:
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	ee e6       	ldi	r30, 0x6E	; 110
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	0c 94 55 3e 	jmp	0x7caa	; 0x7caa <__prologue_saves__>
     2dc:	7b 01       	movw	r14, r22
     2de:	8c 01       	movw	r16, r24
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e8       	ldi	r20, 0x80	; 128
     2e6:	5f e3       	ldi	r21, 0x3F	; 63
     2e8:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
     2ec:	88 23       	and	r24, r24
     2ee:	4c f4       	brge	.+18     	; 0x302 <__fixunssfdi+0x32>
     2f0:	aa 24       	eor	r10, r10
     2f2:	bb 24       	eor	r11, r11
     2f4:	cc 24       	eor	r12, r12
     2f6:	dd 24       	eor	r13, r13
     2f8:	ee 24       	eor	r14, r14
     2fa:	ff 24       	eor	r15, r15
     2fc:	00 e0       	ldi	r16, 0x00	; 0
     2fe:	10 e0       	ldi	r17, 0x00	; 0
     300:	86 c0       	rjmp	.+268    	; 0x40e <__fixunssfdi+0x13e>
     302:	c8 01       	movw	r24, r16
     304:	b7 01       	movw	r22, r14
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e8       	ldi	r20, 0x80	; 128
     30c:	5f e4       	ldi	r21, 0x4F	; 79
     30e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
     312:	88 23       	and	r24, r24
     314:	54 f4       	brge	.+20     	; 0x32a <__fixunssfdi+0x5a>
     316:	c8 01       	movw	r24, r16
     318:	b7 01       	movw	r22, r14
     31a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
     31e:	5b 01       	movw	r10, r22
     320:	6c 01       	movw	r12, r24
     322:	ee 24       	eor	r14, r14
     324:	ff 24       	eor	r15, r15
     326:	87 01       	movw	r16, r14
     328:	72 c0       	rjmp	.+228    	; 0x40e <__fixunssfdi+0x13e>
     32a:	c8 01       	movw	r24, r16
     32c:	b7 01       	movw	r22, r14
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e5       	ldi	r21, 0x5F	; 95
     336:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
     33a:	87 fd       	sbrc	r24, 7
     33c:	0f c0       	rjmp	.+30     	; 0x35c <__fixunssfdi+0x8c>
     33e:	aa 24       	eor	r10, r10
     340:	aa 94       	dec	r10
     342:	bb 24       	eor	r11, r11
     344:	ba 94       	dec	r11
     346:	cc 24       	eor	r12, r12
     348:	ca 94       	dec	r12
     34a:	dd 24       	eor	r13, r13
     34c:	da 94       	dec	r13
     34e:	ee 24       	eor	r14, r14
     350:	ea 94       	dec	r14
     352:	ff 24       	eor	r15, r15
     354:	fa 94       	dec	r15
     356:	0f ef       	ldi	r16, 0xFF	; 255
     358:	1f ef       	ldi	r17, 0xFF	; 255
     35a:	59 c0       	rjmp	.+178    	; 0x40e <__fixunssfdi+0x13e>
     35c:	c8 01       	movw	r24, r16
     35e:	b7 01       	movw	r22, r14
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	40 e8       	ldi	r20, 0x80	; 128
     366:	5f e2       	ldi	r21, 0x2F	; 47
     368:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
     36c:	7b 01       	movw	r14, r22
     36e:	8c 01       	movw	r16, r24
     370:	22 24       	eor	r2, r2
     372:	33 24       	eor	r3, r3
     374:	21 01       	movw	r4, r2
     376:	90 e1       	ldi	r25, 0x10	; 16
     378:	a9 2e       	mov	r10, r25
     37a:	b1 2c       	mov	r11, r1
     37c:	c1 2c       	mov	r12, r1
     37e:	d1 2c       	mov	r13, r1
     380:	c0 e0       	ldi	r28, 0x00	; 0
     382:	d0 e0       	ldi	r29, 0x00	; 0
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0a 2c       	mov	r0, r10
     38e:	04 c0       	rjmp	.+8      	; 0x398 <__fixunssfdi+0xc8>
     390:	66 0f       	add	r22, r22
     392:	77 1f       	adc	r23, r23
     394:	88 1f       	adc	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	0a 94       	dec	r0
     39a:	d2 f7       	brpl	.-12     	; 0x390 <__fixunssfdi+0xc0>
     39c:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__floatunsisf>
     3a0:	3b 01       	movw	r6, r22
     3a2:	4c 01       	movw	r8, r24
     3a4:	c8 01       	movw	r24, r16
     3a6:	b7 01       	movw	r22, r14
     3a8:	a4 01       	movw	r20, r8
     3aa:	93 01       	movw	r18, r6
     3ac:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
     3b0:	88 23       	and	r24, r24
     3b2:	64 f0       	brlt	.+24     	; 0x3cc <__fixunssfdi+0xfc>
     3b4:	2a 28       	or	r2, r10
     3b6:	3b 28       	or	r3, r11
     3b8:	4c 28       	or	r4, r12
     3ba:	5d 28       	or	r5, r13
     3bc:	c8 01       	movw	r24, r16
     3be:	b7 01       	movw	r22, r14
     3c0:	a4 01       	movw	r20, r8
     3c2:	93 01       	movw	r18, r6
     3c4:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__divsf3>
     3c8:	7b 01       	movw	r14, r22
     3ca:	8c 01       	movw	r16, r24
     3cc:	d6 94       	lsr	r13
     3ce:	c7 94       	ror	r12
     3d0:	b7 94       	ror	r11
     3d2:	a7 94       	ror	r10
     3d4:	21 96       	adiw	r28, 0x01	; 1
     3d6:	c5 30       	cpi	r28, 0x05	; 5
     3d8:	d1 05       	cpc	r29, r1
     3da:	a1 f6       	brne	.-88     	; 0x384 <__fixunssfdi+0xb4>
     3dc:	c8 01       	movw	r24, r16
     3de:	b7 01       	movw	r22, r14
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e8       	ldi	r20, 0x80	; 128
     3e6:	5f e4       	ldi	r21, 0x4F	; 79
     3e8:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
     3ec:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
     3f0:	5b 01       	movw	r10, r22
     3f2:	6c 01       	movw	r12, r24
     3f4:	9b 01       	movw	r18, r22
     3f6:	a6 01       	movw	r20, r12
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	02 2d       	mov	r16, r2
     402:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
     406:	59 01       	movw	r10, r18
     408:	6a 01       	movw	r12, r20
     40a:	7b 01       	movw	r14, r22
     40c:	8c 01       	movw	r16, r24
     40e:	95 01       	movw	r18, r10
     410:	a6 01       	movw	r20, r12
     412:	b7 01       	movw	r22, r14
     414:	c8 01       	movw	r24, r16
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	e2 e1       	ldi	r30, 0x12	; 18
     41c:	0c 94 71 3e 	jmp	0x7ce2	; 0x7ce2 <__epilogue_restores__>

00000420 <__floatdisf>:
     420:	a4 e0       	ldi	r26, 0x04	; 4
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 57 3e 	jmp	0x7cae	; 0x7cae <__prologue_saves__+0x4>
     42c:	49 01       	movw	r8, r18
     42e:	5a 01       	movw	r10, r20
     430:	6b 01       	movw	r12, r22
     432:	7c 01       	movw	r14, r24
     434:	d5 01       	movw	r26, r10
     436:	c4 01       	movw	r24, r8
     438:	9c 01       	movw	r18, r24
     43a:	ad 01       	movw	r20, r26
     43c:	55 0f       	add	r21, r21
     43e:	22 0b       	sbc	r18, r18
     440:	32 2f       	mov	r19, r18
     442:	a9 01       	movw	r20, r18
     444:	88 15       	cp	r24, r8
     446:	99 f4       	brne	.+38     	; 0x46e <__floatdisf+0x4e>
     448:	99 15       	cp	r25, r9
     44a:	89 f4       	brne	.+34     	; 0x46e <__floatdisf+0x4e>
     44c:	aa 15       	cp	r26, r10
     44e:	79 f4       	brne	.+30     	; 0x46e <__floatdisf+0x4e>
     450:	bb 15       	cp	r27, r11
     452:	69 f4       	brne	.+26     	; 0x46e <__floatdisf+0x4e>
     454:	2c 15       	cp	r18, r12
     456:	59 f4       	brne	.+22     	; 0x46e <__floatdisf+0x4e>
     458:	2d 15       	cp	r18, r13
     45a:	49 f4       	brne	.+18     	; 0x46e <__floatdisf+0x4e>
     45c:	2e 15       	cp	r18, r14
     45e:	39 f4       	brne	.+14     	; 0x46e <__floatdisf+0x4e>
     460:	2f 15       	cp	r18, r15
     462:	29 f4       	brne	.+10     	; 0x46e <__floatdisf+0x4e>
     464:	c5 01       	movw	r24, r10
     466:	b4 01       	movw	r22, r8
     468:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__floatsisf>
     46c:	d0 c0       	rjmp	.+416    	; 0x60e <__floatdisf+0x1ee>
     46e:	94 01       	movw	r18, r8
     470:	a5 01       	movw	r20, r10
     472:	b6 01       	movw	r22, r12
     474:	c7 01       	movw	r24, r14
     476:	00 e2       	ldi	r16, 0x20	; 32
     478:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__ashrdi3>
     47c:	c9 01       	movw	r24, r18
     47e:	a4 2f       	mov	r26, r20
     480:	b5 2f       	mov	r27, r21
     482:	b7 ff       	sbrs	r27, 7
     484:	07 c0       	rjmp	.+14     	; 0x494 <__floatdisf+0x74>
     486:	b0 95       	com	r27
     488:	a0 95       	com	r26
     48a:	90 95       	com	r25
     48c:	81 95       	neg	r24
     48e:	9f 4f       	sbci	r25, 0xFF	; 255
     490:	af 4f       	sbci	r26, 0xFF	; 255
     492:	bf 4f       	sbci	r27, 0xFF	; 255
     494:	80 30       	cpi	r24, 0x00	; 0
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	92 07       	cpc	r25, r18
     49a:	21 e0       	ldi	r18, 0x01	; 1
     49c:	a2 07       	cpc	r26, r18
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	b2 07       	cpc	r27, r18
     4a2:	80 f4       	brcc	.+32     	; 0x4c4 <__floatdisf+0xa4>
     4a4:	8f 3f       	cpi	r24, 0xFF	; 255
     4a6:	91 05       	cpc	r25, r1
     4a8:	a1 05       	cpc	r26, r1
     4aa:	b1 05       	cpc	r27, r1
     4ac:	31 f0       	breq	.+12     	; 0x4ba <__floatdisf+0x9a>
     4ae:	28 f0       	brcs	.+10     	; 0x4ba <__floatdisf+0x9a>
     4b0:	28 e0       	ldi	r18, 0x08	; 8
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	16 c0       	rjmp	.+44     	; 0x4e6 <__floatdisf+0xc6>
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	11 c0       	rjmp	.+34     	; 0x4e6 <__floatdisf+0xc6>
     4c4:	80 30       	cpi	r24, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	93 07       	cpc	r25, r19
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	a3 07       	cpc	r26, r19
     4ce:	31 e0       	ldi	r19, 0x01	; 1
     4d0:	b3 07       	cpc	r27, r19
     4d2:	28 f0       	brcs	.+10     	; 0x4de <__floatdisf+0xbe>
     4d4:	28 e1       	ldi	r18, 0x18	; 24
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	40 e0       	ldi	r20, 0x00	; 0
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <__floatdisf+0xc6>
     4de:	20 e1       	ldi	r18, 0x10	; 16
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e2       	ldi	r22, 0x20	; 32
     4e8:	46 2e       	mov	r4, r22
     4ea:	51 2c       	mov	r5, r1
     4ec:	61 2c       	mov	r6, r1
     4ee:	71 2c       	mov	r7, r1
     4f0:	42 1a       	sub	r4, r18
     4f2:	53 0a       	sbc	r5, r19
     4f4:	64 0a       	sbc	r6, r20
     4f6:	75 0a       	sbc	r7, r21
     4f8:	04 c0       	rjmp	.+8      	; 0x502 <__floatdisf+0xe2>
     4fa:	b6 95       	lsr	r27
     4fc:	a7 95       	ror	r26
     4fe:	97 95       	ror	r25
     500:	87 95       	ror	r24
     502:	2a 95       	dec	r18
     504:	d2 f7       	brpl	.-12     	; 0x4fa <__floatdisf+0xda>
     506:	fc 01       	movw	r30, r24
     508:	ec 58       	subi	r30, 0x8C	; 140
     50a:	ff 4f       	sbci	r31, 0xFF	; 255
     50c:	80 81       	ld	r24, Z
     50e:	48 1a       	sub	r4, r24
     510:	51 08       	sbc	r5, r1
     512:	61 08       	sbc	r6, r1
     514:	71 08       	sbc	r7, r1
     516:	41 14       	cp	r4, r1
     518:	51 04       	cpc	r5, r1
     51a:	61 04       	cpc	r6, r1
     51c:	71 04       	cpc	r7, r1
     51e:	29 f4       	brne	.+10     	; 0x52a <__floatdisf+0x10a>
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	9f ed       	ldi	r25, 0xDF	; 223
     528:	72 c0       	rjmp	.+228    	; 0x60e <__floatdisf+0x1ee>
     52a:	81 e2       	ldi	r24, 0x21	; 33
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	84 19       	sub	r24, r4
     534:	95 09       	sbc	r25, r5
     536:	a6 09       	sbc	r26, r6
     538:	b7 09       	sbc	r27, r7
     53a:	89 83       	std	Y+1, r24	; 0x01
     53c:	9a 83       	std	Y+2, r25	; 0x02
     53e:	ab 83       	std	Y+3, r26	; 0x03
     540:	bc 83       	std	Y+4, r27	; 0x04
     542:	19 81       	ldd	r17, Y+1	; 0x01
     544:	94 01       	movw	r18, r8
     546:	a5 01       	movw	r20, r10
     548:	b6 01       	movw	r22, r12
     54a:	c7 01       	movw	r24, r14
     54c:	01 2f       	mov	r16, r17
     54e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__ashrdi3>
     552:	c9 01       	movw	r24, r18
     554:	da 01       	movw	r26, r20
     556:	2c 01       	movw	r4, r24
     558:	3d 01       	movw	r6, r26
     55a:	80 e2       	ldi	r24, 0x20	; 32
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a9 81       	ldd	r26, Y+1	; 0x01
     560:	ba 81       	ldd	r27, Y+2	; 0x02
     562:	8a 1b       	sub	r24, r26
     564:	9b 0b       	sbc	r25, r27
     566:	a5 01       	movw	r20, r10
     568:	94 01       	movw	r18, r8
     56a:	04 c0       	rjmp	.+8      	; 0x574 <__floatdisf+0x154>
     56c:	22 0f       	add	r18, r18
     56e:	33 1f       	adc	r19, r19
     570:	44 1f       	adc	r20, r20
     572:	55 1f       	adc	r21, r21
     574:	8a 95       	dec	r24
     576:	d2 f7       	brpl	.-12     	; 0x56c <__floatdisf+0x14c>
     578:	21 15       	cp	r18, r1
     57a:	31 05       	cpc	r19, r1
     57c:	41 05       	cpc	r20, r1
     57e:	51 05       	cpc	r21, r1
     580:	41 f0       	breq	.+16     	; 0x592 <__floatdisf+0x172>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	a0 e0       	ldi	r26, 0x00	; 0
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	48 2a       	or	r4, r24
     58c:	59 2a       	or	r5, r25
     58e:	6a 2a       	or	r6, r26
     590:	7b 2a       	or	r7, r27
     592:	29 81       	ldd	r18, Y+1	; 0x01
     594:	3a 81       	ldd	r19, Y+2	; 0x02
     596:	4b 81       	ldd	r20, Y+3	; 0x03
     598:	5c 81       	ldd	r21, Y+4	; 0x04
     59a:	20 32       	cpi	r18, 0x20	; 32
     59c:	31 05       	cpc	r19, r1
     59e:	41 05       	cpc	r20, r1
     5a0:	51 05       	cpc	r21, r1
     5a2:	59 f4       	brne	.+22     	; 0x5ba <__floatdisf+0x19a>
     5a4:	0f 2e       	mov	r0, r31
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	cf 2e       	mov	r12, r31
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	df 2e       	mov	r13, r31
     5ae:	f0 e8       	ldi	r31, 0x80	; 128
     5b0:	ef 2e       	mov	r14, r31
     5b2:	ff e4       	ldi	r31, 0x4F	; 79
     5b4:	ff 2e       	mov	r15, r31
     5b6:	f0 2d       	mov	r31, r0
     5b8:	22 c0       	rjmp	.+68     	; 0x5fe <__floatdisf+0x1de>
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	9a 81       	ldd	r25, Y+2	; 0x02
     5be:	ab 81       	ldd	r26, Y+3	; 0x03
     5c0:	bc 81       	ldd	r27, Y+4	; 0x04
     5c2:	4f 97       	sbiw	r24, 0x1f	; 31
     5c4:	a1 05       	cpc	r26, r1
     5c6:	b1 05       	cpc	r27, r1
     5c8:	59 f4       	brne	.+22     	; 0x5e0 <__floatdisf+0x1c0>
     5ca:	0f 2e       	mov	r0, r31
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	cf 2e       	mov	r12, r31
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	df 2e       	mov	r13, r31
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	ef 2e       	mov	r14, r31
     5d8:	ff e4       	ldi	r31, 0x4F	; 79
     5da:	ff 2e       	mov	r15, r31
     5dc:	f0 2d       	mov	r31, r0
     5de:	0f c0       	rjmp	.+30     	; 0x5fe <__floatdisf+0x1de>
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <__floatdisf+0x1d2>
     5ea:	66 0f       	add	r22, r22
     5ec:	77 1f       	adc	r23, r23
     5ee:	88 1f       	adc	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	1a 95       	dec	r17
     5f4:	d2 f7       	brpl	.-12     	; 0x5ea <__floatdisf+0x1ca>
     5f6:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__floatsisf>
     5fa:	6b 01       	movw	r12, r22
     5fc:	7c 01       	movw	r14, r24
     5fe:	c3 01       	movw	r24, r6
     600:	b2 01       	movw	r22, r4
     602:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__floatsisf>
     606:	a7 01       	movw	r20, r14
     608:	96 01       	movw	r18, r12
     60a:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
     60e:	24 96       	adiw	r28, 0x04	; 4
     610:	e0 e1       	ldi	r30, 0x10	; 16
     612:	0c 94 73 3e 	jmp	0x7ce6	; 0x7ce6 <__epilogue_restores__+0x4>

00000616 <__divdi3>:
     616:	a2 e7       	ldi	r26, 0x72	; 114
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e1 e1       	ldi	r30, 0x11	; 17
     61c:	f3 e0       	ldi	r31, 0x03	; 3
     61e:	0c 94 55 3e 	jmp	0x7caa	; 0x7caa <__prologue_saves__>
     622:	98 2e       	mov	r9, r24
     624:	89 2e       	mov	r8, r25
     626:	71 2e       	mov	r7, r17
     628:	88 e0       	ldi	r24, 0x08	; 8
     62a:	fe 01       	movw	r30, r28
     62c:	31 96       	adiw	r30, 0x01	; 1
     62e:	df 01       	movw	r26, r30
     630:	68 2e       	mov	r6, r24
     632:	1d 92       	st	X+, r1
     634:	6a 94       	dec	r6
     636:	e9 f7       	brne	.-6      	; 0x632 <__divdi3+0x1c>
     638:	29 83       	std	Y+1, r18	; 0x01
     63a:	3a 83       	std	Y+2, r19	; 0x02
     63c:	4b 83       	std	Y+3, r20	; 0x03
     63e:	5c 83       	std	Y+4, r21	; 0x04
     640:	6d 83       	std	Y+5, r22	; 0x05
     642:	7e 83       	std	Y+6, r23	; 0x06
     644:	9f 82       	std	Y+7, r9	; 0x07
     646:	98 87       	std	Y+8, r25	; 0x08
     648:	fe 01       	movw	r30, r28
     64a:	39 96       	adiw	r30, 0x09	; 9
     64c:	df 01       	movw	r26, r30
     64e:	1d 92       	st	X+, r1
     650:	8a 95       	dec	r24
     652:	e9 f7       	brne	.-6      	; 0x64e <__divdi3+0x38>
     654:	a9 86       	std	Y+9, r10	; 0x09
     656:	ba 86       	std	Y+10, r11	; 0x0a
     658:	cb 86       	std	Y+11, r12	; 0x0b
     65a:	dc 86       	std	Y+12, r13	; 0x0c
     65c:	ed 86       	std	Y+13, r14	; 0x0d
     65e:	fe 86       	std	Y+14, r15	; 0x0e
     660:	0f 87       	std	Y+15, r16	; 0x0f
     662:	18 8b       	std	Y+16, r17	; 0x10
     664:	8d 81       	ldd	r24, Y+5	; 0x05
     666:	9e 81       	ldd	r25, Y+6	; 0x06
     668:	af 81       	ldd	r26, Y+7	; 0x07
     66a:	b8 85       	ldd	r27, Y+8	; 0x08
     66c:	b7 fd       	sbrc	r27, 7
     66e:	07 c0       	rjmp	.+14     	; 0x67e <__divdi3+0x68>
     670:	e1 96       	adiw	r28, 0x31	; 49
     672:	1c ae       	std	Y+60, r1	; 0x3c
     674:	1d ae       	std	Y+61, r1	; 0x3d
     676:	1e ae       	std	Y+62, r1	; 0x3e
     678:	1f ae       	std	Y+63, r1	; 0x3f
     67a:	e1 97       	sbiw	r28, 0x31	; 49
     67c:	64 c0       	rjmp	.+200    	; 0x746 <__divdi3+0x130>
     67e:	21 95       	neg	r18
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	12 16       	cp	r1, r18
     684:	08 f0       	brcs	.+2      	; 0x688 <__divdi3+0x72>
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	31 95       	neg	r19
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	13 16       	cp	r1, r19
     68e:	08 f0       	brcs	.+2      	; 0x692 <__divdi3+0x7c>
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	b3 2f       	mov	r27, r19
     694:	b8 1b       	sub	r27, r24
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	3b 17       	cp	r19, r27
     69a:	08 f0       	brcs	.+2      	; 0x69e <__divdi3+0x88>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	98 2b       	or	r25, r24
     6a0:	41 95       	neg	r20
     6a2:	31 e0       	ldi	r19, 0x01	; 1
     6a4:	14 16       	cp	r1, r20
     6a6:	08 f0       	brcs	.+2      	; 0x6aa <__divdi3+0x94>
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	a4 2f       	mov	r26, r20
     6ac:	a9 1b       	sub	r26, r25
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	4a 17       	cp	r20, r26
     6b2:	08 f0       	brcs	.+2      	; 0x6b6 <__divdi3+0xa0>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	38 2b       	or	r19, r24
     6b8:	51 95       	neg	r21
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	15 16       	cp	r1, r21
     6be:	08 f0       	brcs	.+2      	; 0x6c2 <__divdi3+0xac>
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	f5 2f       	mov	r31, r21
     6c4:	f3 1b       	sub	r31, r19
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	5f 17       	cp	r21, r31
     6ca:	08 f0       	brcs	.+2      	; 0x6ce <__divdi3+0xb8>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	98 2b       	or	r25, r24
     6d0:	61 95       	neg	r22
     6d2:	31 e0       	ldi	r19, 0x01	; 1
     6d4:	16 16       	cp	r1, r22
     6d6:	08 f0       	brcs	.+2      	; 0x6da <__divdi3+0xc4>
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	e6 2f       	mov	r30, r22
     6dc:	e9 1b       	sub	r30, r25
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	6e 17       	cp	r22, r30
     6e2:	08 f0       	brcs	.+2      	; 0x6e6 <__divdi3+0xd0>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	38 2b       	or	r19, r24
     6e8:	71 95       	neg	r23
     6ea:	41 e0       	ldi	r20, 0x01	; 1
     6ec:	17 16       	cp	r1, r23
     6ee:	08 f0       	brcs	.+2      	; 0x6f2 <__divdi3+0xdc>
     6f0:	40 e0       	ldi	r20, 0x00	; 0
     6f2:	57 2f       	mov	r21, r23
     6f4:	53 1b       	sub	r21, r19
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	75 17       	cp	r23, r21
     6fa:	08 f0       	brcs	.+2      	; 0x6fe <__divdi3+0xe8>
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	48 2b       	or	r20, r24
     700:	89 2d       	mov	r24, r9
     702:	81 95       	neg	r24
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	18 16       	cp	r1, r24
     708:	08 f0       	brcs	.+2      	; 0x70c <__divdi3+0xf6>
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	68 2e       	mov	r6, r24
     70e:	64 1a       	sub	r6, r20
     710:	46 2d       	mov	r20, r6
     712:	31 e0       	ldi	r19, 0x01	; 1
     714:	86 15       	cp	r24, r6
     716:	08 f0       	brcs	.+2      	; 0x71a <__divdi3+0x104>
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	93 2b       	or	r25, r19
     71c:	88 2d       	mov	r24, r8
     71e:	81 95       	neg	r24
     720:	89 1b       	sub	r24, r25
     722:	29 83       	std	Y+1, r18	; 0x01
     724:	ba 83       	std	Y+2, r27	; 0x02
     726:	ab 83       	std	Y+3, r26	; 0x03
     728:	fc 83       	std	Y+4, r31	; 0x04
     72a:	ed 83       	std	Y+5, r30	; 0x05
     72c:	5e 83       	std	Y+6, r21	; 0x06
     72e:	4f 83       	std	Y+7, r20	; 0x07
     730:	88 87       	std	Y+8, r24	; 0x08
     732:	2f ef       	ldi	r18, 0xFF	; 255
     734:	3f ef       	ldi	r19, 0xFF	; 255
     736:	4f ef       	ldi	r20, 0xFF	; 255
     738:	5f ef       	ldi	r21, 0xFF	; 255
     73a:	e1 96       	adiw	r28, 0x31	; 49
     73c:	2c af       	std	Y+60, r18	; 0x3c
     73e:	3d af       	std	Y+61, r19	; 0x3d
     740:	4e af       	std	Y+62, r20	; 0x3e
     742:	5f af       	std	Y+63, r21	; 0x3f
     744:	e1 97       	sbiw	r28, 0x31	; 49
     746:	8d 85       	ldd	r24, Y+13	; 0x0d
     748:	9e 85       	ldd	r25, Y+14	; 0x0e
     74a:	af 85       	ldd	r26, Y+15	; 0x0f
     74c:	b8 89       	ldd	r27, Y+16	; 0x10
     74e:	b7 ff       	sbrs	r27, 7
     750:	6a c0       	rjmp	.+212    	; 0x826 <__divdi3+0x210>
     752:	e1 96       	adiw	r28, 0x31	; 49
     754:	4c ad       	ldd	r20, Y+60	; 0x3c
     756:	5d ad       	ldd	r21, Y+61	; 0x3d
     758:	6e ad       	ldd	r22, Y+62	; 0x3e
     75a:	7f ad       	ldd	r23, Y+63	; 0x3f
     75c:	e1 97       	sbiw	r28, 0x31	; 49
     75e:	40 95       	com	r20
     760:	50 95       	com	r21
     762:	60 95       	com	r22
     764:	70 95       	com	r23
     766:	e1 96       	adiw	r28, 0x31	; 49
     768:	4c af       	std	Y+60, r20	; 0x3c
     76a:	5d af       	std	Y+61, r21	; 0x3d
     76c:	6e af       	std	Y+62, r22	; 0x3e
     76e:	7f af       	std	Y+63, r23	; 0x3f
     770:	e1 97       	sbiw	r28, 0x31	; 49
     772:	a1 94       	neg	r10
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	1a 14       	cp	r1, r10
     778:	08 f0       	brcs	.+2      	; 0x77c <__divdi3+0x166>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	b1 94       	neg	r11
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	1b 14       	cp	r1, r11
     782:	08 f0       	brcs	.+2      	; 0x786 <__divdi3+0x170>
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	6b 2d       	mov	r22, r11
     788:	68 1b       	sub	r22, r24
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	b6 16       	cp	r11, r22
     78e:	08 f0       	brcs	.+2      	; 0x792 <__divdi3+0x17c>
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	98 2b       	or	r25, r24
     794:	c1 94       	neg	r12
     796:	21 e0       	ldi	r18, 0x01	; 1
     798:	1c 14       	cp	r1, r12
     79a:	08 f0       	brcs	.+2      	; 0x79e <__divdi3+0x188>
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	5c 2d       	mov	r21, r12
     7a0:	59 1b       	sub	r21, r25
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	c5 16       	cp	r12, r21
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <__divdi3+0x194>
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	28 2b       	or	r18, r24
     7ac:	d1 94       	neg	r13
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	1d 14       	cp	r1, r13
     7b2:	08 f0       	brcs	.+2      	; 0x7b6 <__divdi3+0x1a0>
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	4d 2d       	mov	r20, r13
     7b8:	42 1b       	sub	r20, r18
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	d4 16       	cp	r13, r20
     7be:	08 f0       	brcs	.+2      	; 0x7c2 <__divdi3+0x1ac>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	98 2b       	or	r25, r24
     7c4:	e1 94       	neg	r14
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	1e 14       	cp	r1, r14
     7ca:	08 f0       	brcs	.+2      	; 0x7ce <__divdi3+0x1b8>
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	3e 2d       	mov	r19, r14
     7d0:	39 1b       	sub	r19, r25
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	e3 16       	cp	r14, r19
     7d6:	08 f0       	brcs	.+2      	; 0x7da <__divdi3+0x1c4>
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	28 2b       	or	r18, r24
     7dc:	f1 94       	neg	r15
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	1f 14       	cp	r1, r15
     7e2:	08 f0       	brcs	.+2      	; 0x7e6 <__divdi3+0x1d0>
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	7f 2d       	mov	r23, r15
     7e8:	72 1b       	sub	r23, r18
     7ea:	27 2f       	mov	r18, r23
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	f7 16       	cp	r15, r23
     7f0:	08 f0       	brcs	.+2      	; 0x7f4 <__divdi3+0x1de>
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	98 2b       	or	r25, r24
     7f6:	01 95       	neg	r16
     7f8:	11 e0       	ldi	r17, 0x01	; 1
     7fa:	10 16       	cp	r1, r16
     7fc:	08 f0       	brcs	.+2      	; 0x800 <__divdi3+0x1ea>
     7fe:	10 e0       	ldi	r17, 0x00	; 0
     800:	80 2f       	mov	r24, r16
     802:	89 1b       	sub	r24, r25
     804:	98 2f       	mov	r25, r24
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	09 17       	cp	r16, r25
     80a:	08 f0       	brcs	.+2      	; 0x80e <__divdi3+0x1f8>
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	18 2b       	or	r17, r24
     810:	87 2d       	mov	r24, r7
     812:	81 95       	neg	r24
     814:	81 1b       	sub	r24, r17
     816:	a9 86       	std	Y+9, r10	; 0x09
     818:	6a 87       	std	Y+10, r22	; 0x0a
     81a:	5b 87       	std	Y+11, r21	; 0x0b
     81c:	4c 87       	std	Y+12, r20	; 0x0c
     81e:	3d 87       	std	Y+13, r19	; 0x0d
     820:	2e 87       	std	Y+14, r18	; 0x0e
     822:	9f 87       	std	Y+15, r25	; 0x0f
     824:	88 8b       	std	Y+16, r24	; 0x10
     826:	99 81       	ldd	r25, Y+1	; 0x01
     828:	2a 81       	ldd	r18, Y+2	; 0x02
     82a:	3b 81       	ldd	r19, Y+3	; 0x03
     82c:	4c 81       	ldd	r20, Y+4	; 0x04
     82e:	5d 81       	ldd	r21, Y+5	; 0x05
     830:	6e 81       	ldd	r22, Y+6	; 0x06
     832:	7f 81       	ldd	r23, Y+7	; 0x07
     834:	a8 85       	ldd	r26, Y+8	; 0x08
     836:	b9 85       	ldd	r27, Y+9	; 0x09
     838:	1a 85       	ldd	r17, Y+10	; 0x0a
     83a:	0b 85       	ldd	r16, Y+11	; 0x0b
     83c:	fc 84       	ldd	r15, Y+12	; 0x0c
     83e:	ed 84       	ldd	r14, Y+13	; 0x0d
     840:	de 84       	ldd	r13, Y+14	; 0x0e
     842:	cf 84       	ldd	r12, Y+15	; 0x0f
     844:	b8 88       	ldd	r11, Y+16	; 0x10
     846:	88 e0       	ldi	r24, 0x08	; 8
     848:	e1 e1       	ldi	r30, 0x11	; 17
     84a:	8e 2e       	mov	r8, r30
     84c:	91 2c       	mov	r9, r1
     84e:	8c 0e       	add	r8, r28
     850:	9d 1e       	adc	r9, r29
     852:	f4 01       	movw	r30, r8
     854:	68 2e       	mov	r6, r24
     856:	11 92       	st	Z+, r1
     858:	6a 94       	dec	r6
     85a:	e9 f7       	brne	.-6      	; 0x856 <__divdi3+0x240>
     85c:	99 8b       	std	Y+17, r25	; 0x11
     85e:	2a 8b       	std	Y+18, r18	; 0x12
     860:	3b 8b       	std	Y+19, r19	; 0x13
     862:	4c 8b       	std	Y+20, r20	; 0x14
     864:	5d 8b       	std	Y+21, r21	; 0x15
     866:	6e 8b       	std	Y+22, r22	; 0x16
     868:	7f 8b       	std	Y+23, r23	; 0x17
     86a:	a8 8f       	std	Y+24, r26	; 0x18
     86c:	9e 01       	movw	r18, r28
     86e:	27 5e       	subi	r18, 0xE7	; 231
     870:	3f 4f       	sbci	r19, 0xFF	; 255
     872:	f9 01       	movw	r30, r18
     874:	11 92       	st	Z+, r1
     876:	8a 95       	dec	r24
     878:	e9 f7       	brne	.-6      	; 0x874 <__stack+0x15>
     87a:	b9 8f       	std	Y+25, r27	; 0x19
     87c:	1a 8f       	std	Y+26, r17	; 0x1a
     87e:	0b 8f       	std	Y+27, r16	; 0x1b
     880:	fc 8e       	std	Y+28, r15	; 0x1c
     882:	ed 8e       	std	Y+29, r14	; 0x1d
     884:	de 8e       	std	Y+30, r13	; 0x1e
     886:	cf 8e       	std	Y+31, r12	; 0x1f
     888:	b8 a2       	std	Y+32, r11	; 0x20
     88a:	29 8c       	ldd	r2, Y+25	; 0x19
     88c:	3a 8c       	ldd	r3, Y+26	; 0x1a
     88e:	4b 8c       	ldd	r4, Y+27	; 0x1b
     890:	5c 8c       	ldd	r5, Y+28	; 0x1c
     892:	ed 8c       	ldd	r14, Y+29	; 0x1d
     894:	fe 8c       	ldd	r15, Y+30	; 0x1e
     896:	0f 8d       	ldd	r16, Y+31	; 0x1f
     898:	18 a1       	ldd	r17, Y+32	; 0x20
     89a:	69 88       	ldd	r6, Y+17	; 0x11
     89c:	7a 88       	ldd	r7, Y+18	; 0x12
     89e:	8b 88       	ldd	r8, Y+19	; 0x13
     8a0:	9c 88       	ldd	r9, Y+20	; 0x14
     8a2:	21 96       	adiw	r28, 0x01	; 1
     8a4:	6c ae       	std	Y+60, r6	; 0x3c
     8a6:	7d ae       	std	Y+61, r7	; 0x3d
     8a8:	8e ae       	std	Y+62, r8	; 0x3e
     8aa:	9f ae       	std	Y+63, r9	; 0x3f
     8ac:	21 97       	sbiw	r28, 0x01	; 1
     8ae:	6d 88       	ldd	r6, Y+21	; 0x15
     8b0:	7e 88       	ldd	r7, Y+22	; 0x16
     8b2:	8f 88       	ldd	r8, Y+23	; 0x17
     8b4:	98 8c       	ldd	r9, Y+24	; 0x18
     8b6:	e1 14       	cp	r14, r1
     8b8:	f1 04       	cpc	r15, r1
     8ba:	01 05       	cpc	r16, r1
     8bc:	11 05       	cpc	r17, r1
     8be:	09 f0       	breq	.+2      	; 0x8c2 <__stack+0x63>
     8c0:	d9 c3       	rjmp	.+1970   	; 0x1074 <__stack+0x815>
     8c2:	62 14       	cp	r6, r2
     8c4:	73 04       	cpc	r7, r3
     8c6:	84 04       	cpc	r8, r4
     8c8:	95 04       	cpc	r9, r5
     8ca:	08 f0       	brcs	.+2      	; 0x8ce <__stack+0x6f>
     8cc:	57 c1       	rjmp	.+686    	; 0xb7c <__stack+0x31d>
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	20 16       	cp	r2, r16
     8d2:	00 e0       	ldi	r16, 0x00	; 0
     8d4:	30 06       	cpc	r3, r16
     8d6:	01 e0       	ldi	r16, 0x01	; 1
     8d8:	40 06       	cpc	r4, r16
     8da:	00 e0       	ldi	r16, 0x00	; 0
     8dc:	50 06       	cpc	r5, r16
     8de:	88 f4       	brcc	.+34     	; 0x902 <__stack+0xa3>
     8e0:	1f ef       	ldi	r17, 0xFF	; 255
     8e2:	21 16       	cp	r2, r17
     8e4:	31 04       	cpc	r3, r1
     8e6:	41 04       	cpc	r4, r1
     8e8:	51 04       	cpc	r5, r1
     8ea:	39 f0       	breq	.+14     	; 0x8fa <__stack+0x9b>
     8ec:	30 f0       	brcs	.+12     	; 0x8fa <__stack+0x9b>
     8ee:	48 e0       	ldi	r20, 0x08	; 8
     8f0:	e4 2e       	mov	r14, r20
     8f2:	f1 2c       	mov	r15, r1
     8f4:	01 2d       	mov	r16, r1
     8f6:	11 2d       	mov	r17, r1
     8f8:	18 c0       	rjmp	.+48     	; 0x92a <__stack+0xcb>
     8fa:	ee 24       	eor	r14, r14
     8fc:	ff 24       	eor	r15, r15
     8fe:	87 01       	movw	r16, r14
     900:	14 c0       	rjmp	.+40     	; 0x92a <__stack+0xcb>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	22 16       	cp	r2, r18
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	32 06       	cpc	r3, r18
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	42 06       	cpc	r4, r18
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	52 06       	cpc	r5, r18
     912:	30 f0       	brcs	.+12     	; 0x920 <__stack+0xc1>
     914:	38 e1       	ldi	r19, 0x18	; 24
     916:	e3 2e       	mov	r14, r19
     918:	f1 2c       	mov	r15, r1
     91a:	01 2d       	mov	r16, r1
     91c:	11 2d       	mov	r17, r1
     91e:	05 c0       	rjmp	.+10     	; 0x92a <__stack+0xcb>
     920:	20 e1       	ldi	r18, 0x10	; 16
     922:	e2 2e       	mov	r14, r18
     924:	f1 2c       	mov	r15, r1
     926:	01 2d       	mov	r16, r1
     928:	11 2d       	mov	r17, r1
     92a:	d2 01       	movw	r26, r4
     92c:	c1 01       	movw	r24, r2
     92e:	0e 2c       	mov	r0, r14
     930:	04 c0       	rjmp	.+8      	; 0x93a <__stack+0xdb>
     932:	b6 95       	lsr	r27
     934:	a7 95       	ror	r26
     936:	97 95       	ror	r25
     938:	87 95       	ror	r24
     93a:	0a 94       	dec	r0
     93c:	d2 f7       	brpl	.-12     	; 0x932 <__stack+0xd3>
     93e:	8c 58       	subi	r24, 0x8C	; 140
     940:	9f 4f       	sbci	r25, 0xFF	; 255
     942:	dc 01       	movw	r26, r24
     944:	2c 91       	ld	r18, X
     946:	80 e2       	ldi	r24, 0x20	; 32
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a0 e0       	ldi	r26, 0x00	; 0
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	8e 19       	sub	r24, r14
     950:	9f 09       	sbc	r25, r15
     952:	a0 0b       	sbc	r26, r16
     954:	b1 0b       	sbc	r27, r17
     956:	7c 01       	movw	r14, r24
     958:	8d 01       	movw	r16, r26
     95a:	e2 1a       	sub	r14, r18
     95c:	f1 08       	sbc	r15, r1
     95e:	01 09       	sbc	r16, r1
     960:	11 09       	sbc	r17, r1
     962:	e1 14       	cp	r14, r1
     964:	f1 04       	cpc	r15, r1
     966:	01 05       	cpc	r16, r1
     968:	11 05       	cpc	r17, r1
     96a:	d1 f1       	breq	.+116    	; 0x9e0 <__stack+0x181>
     96c:	0e 2c       	mov	r0, r14
     96e:	04 c0       	rjmp	.+8      	; 0x978 <__stack+0x119>
     970:	22 0c       	add	r2, r2
     972:	33 1c       	adc	r3, r3
     974:	44 1c       	adc	r4, r4
     976:	55 1c       	adc	r5, r5
     978:	0a 94       	dec	r0
     97a:	d2 f7       	brpl	.-12     	; 0x970 <__stack+0x111>
     97c:	a4 01       	movw	r20, r8
     97e:	93 01       	movw	r18, r6
     980:	0e 2c       	mov	r0, r14
     982:	04 c0       	rjmp	.+8      	; 0x98c <__stack+0x12d>
     984:	22 0f       	add	r18, r18
     986:	33 1f       	adc	r19, r19
     988:	44 1f       	adc	r20, r20
     98a:	55 1f       	adc	r21, r21
     98c:	0a 94       	dec	r0
     98e:	d2 f7       	brpl	.-12     	; 0x984 <__stack+0x125>
     990:	80 e2       	ldi	r24, 0x20	; 32
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	8e 19       	sub	r24, r14
     996:	9f 09       	sbc	r25, r15
     998:	21 96       	adiw	r28, 0x01	; 1
     99a:	6c ac       	ldd	r6, Y+60	; 0x3c
     99c:	7d ac       	ldd	r7, Y+61	; 0x3d
     99e:	8e ac       	ldd	r8, Y+62	; 0x3e
     9a0:	9f ac       	ldd	r9, Y+63	; 0x3f
     9a2:	21 97       	sbiw	r28, 0x01	; 1
     9a4:	04 c0       	rjmp	.+8      	; 0x9ae <__stack+0x14f>
     9a6:	96 94       	lsr	r9
     9a8:	87 94       	ror	r8
     9aa:	77 94       	ror	r7
     9ac:	67 94       	ror	r6
     9ae:	8a 95       	dec	r24
     9b0:	d2 f7       	brpl	.-12     	; 0x9a6 <__stack+0x147>
     9b2:	62 2a       	or	r6, r18
     9b4:	73 2a       	or	r7, r19
     9b6:	84 2a       	or	r8, r20
     9b8:	95 2a       	or	r9, r21
     9ba:	21 96       	adiw	r28, 0x01	; 1
     9bc:	ac ac       	ldd	r10, Y+60	; 0x3c
     9be:	bd ac       	ldd	r11, Y+61	; 0x3d
     9c0:	ce ac       	ldd	r12, Y+62	; 0x3e
     9c2:	df ac       	ldd	r13, Y+63	; 0x3f
     9c4:	21 97       	sbiw	r28, 0x01	; 1
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <__stack+0x171>
     9c8:	aa 0c       	add	r10, r10
     9ca:	bb 1c       	adc	r11, r11
     9cc:	cc 1c       	adc	r12, r12
     9ce:	dd 1c       	adc	r13, r13
     9d0:	ea 94       	dec	r14
     9d2:	d2 f7       	brpl	.-12     	; 0x9c8 <__stack+0x169>
     9d4:	21 96       	adiw	r28, 0x01	; 1
     9d6:	ac ae       	std	Y+60, r10	; 0x3c
     9d8:	bd ae       	std	Y+61, r11	; 0x3d
     9da:	ce ae       	std	Y+62, r12	; 0x3e
     9dc:	df ae       	std	Y+63, r13	; 0x3f
     9de:	21 97       	sbiw	r28, 0x01	; 1
     9e0:	62 01       	movw	r12, r4
     9e2:	ee 24       	eor	r14, r14
     9e4:	ff 24       	eor	r15, r15
     9e6:	29 96       	adiw	r28, 0x09	; 9
     9e8:	cc ae       	std	Y+60, r12	; 0x3c
     9ea:	dd ae       	std	Y+61, r13	; 0x3d
     9ec:	ee ae       	std	Y+62, r14	; 0x3e
     9ee:	ff ae       	std	Y+63, r15	; 0x3f
     9f0:	29 97       	sbiw	r28, 0x09	; 9
     9f2:	92 01       	movw	r18, r4
     9f4:	81 01       	movw	r16, r2
     9f6:	20 70       	andi	r18, 0x00	; 0
     9f8:	30 70       	andi	r19, 0x00	; 0
     9fa:	2d 96       	adiw	r28, 0x0d	; 13
     9fc:	0c af       	std	Y+60, r16	; 0x3c
     9fe:	1d af       	std	Y+61, r17	; 0x3d
     a00:	2e af       	std	Y+62, r18	; 0x3e
     a02:	3f af       	std	Y+63, r19	; 0x3f
     a04:	2d 97       	sbiw	r28, 0x0d	; 13
     a06:	c4 01       	movw	r24, r8
     a08:	b3 01       	movw	r22, r6
     a0a:	a7 01       	movw	r20, r14
     a0c:	96 01       	movw	r18, r12
     a0e:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     a12:	7b 01       	movw	r14, r22
     a14:	8c 01       	movw	r16, r24
     a16:	c4 01       	movw	r24, r8
     a18:	b3 01       	movw	r22, r6
     a1a:	29 96       	adiw	r28, 0x09	; 9
     a1c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a1e:	3d ad       	ldd	r19, Y+61	; 0x3d
     a20:	4e ad       	ldd	r20, Y+62	; 0x3e
     a22:	5f ad       	ldd	r21, Y+63	; 0x3f
     a24:	29 97       	sbiw	r28, 0x09	; 9
     a26:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     a2a:	c9 01       	movw	r24, r18
     a2c:	da 01       	movw	r26, r20
     a2e:	3c 01       	movw	r6, r24
     a30:	4d 01       	movw	r8, r26
     a32:	c4 01       	movw	r24, r8
     a34:	b3 01       	movw	r22, r6
     a36:	2d 96       	adiw	r28, 0x0d	; 13
     a38:	2c ad       	ldd	r18, Y+60	; 0x3c
     a3a:	3d ad       	ldd	r19, Y+61	; 0x3d
     a3c:	4e ad       	ldd	r20, Y+62	; 0x3e
     a3e:	5f ad       	ldd	r21, Y+63	; 0x3f
     a40:	2d 97       	sbiw	r28, 0x0d	; 13
     a42:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
     a46:	9b 01       	movw	r18, r22
     a48:	ac 01       	movw	r20, r24
     a4a:	87 01       	movw	r16, r14
     a4c:	ff 24       	eor	r15, r15
     a4e:	ee 24       	eor	r14, r14
     a50:	21 96       	adiw	r28, 0x01	; 1
     a52:	ac ac       	ldd	r10, Y+60	; 0x3c
     a54:	bd ac       	ldd	r11, Y+61	; 0x3d
     a56:	ce ac       	ldd	r12, Y+62	; 0x3e
     a58:	df ac       	ldd	r13, Y+63	; 0x3f
     a5a:	21 97       	sbiw	r28, 0x01	; 1
     a5c:	c6 01       	movw	r24, r12
     a5e:	aa 27       	eor	r26, r26
     a60:	bb 27       	eor	r27, r27
     a62:	57 01       	movw	r10, r14
     a64:	68 01       	movw	r12, r16
     a66:	a8 2a       	or	r10, r24
     a68:	b9 2a       	or	r11, r25
     a6a:	ca 2a       	or	r12, r26
     a6c:	db 2a       	or	r13, r27
     a6e:	a2 16       	cp	r10, r18
     a70:	b3 06       	cpc	r11, r19
     a72:	c4 06       	cpc	r12, r20
     a74:	d5 06       	cpc	r13, r21
     a76:	e0 f4       	brcc	.+56     	; 0xab0 <__stack+0x251>
     a78:	08 94       	sec
     a7a:	61 08       	sbc	r6, r1
     a7c:	71 08       	sbc	r7, r1
     a7e:	81 08       	sbc	r8, r1
     a80:	91 08       	sbc	r9, r1
     a82:	a2 0c       	add	r10, r2
     a84:	b3 1c       	adc	r11, r3
     a86:	c4 1c       	adc	r12, r4
     a88:	d5 1c       	adc	r13, r5
     a8a:	a2 14       	cp	r10, r2
     a8c:	b3 04       	cpc	r11, r3
     a8e:	c4 04       	cpc	r12, r4
     a90:	d5 04       	cpc	r13, r5
     a92:	70 f0       	brcs	.+28     	; 0xab0 <__stack+0x251>
     a94:	a2 16       	cp	r10, r18
     a96:	b3 06       	cpc	r11, r19
     a98:	c4 06       	cpc	r12, r20
     a9a:	d5 06       	cpc	r13, r21
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__stack+0x251>
     a9e:	08 94       	sec
     aa0:	61 08       	sbc	r6, r1
     aa2:	71 08       	sbc	r7, r1
     aa4:	81 08       	sbc	r8, r1
     aa6:	91 08       	sbc	r9, r1
     aa8:	a2 0c       	add	r10, r2
     aaa:	b3 1c       	adc	r11, r3
     aac:	c4 1c       	adc	r12, r4
     aae:	d5 1c       	adc	r13, r5
     ab0:	a2 1a       	sub	r10, r18
     ab2:	b3 0a       	sbc	r11, r19
     ab4:	c4 0a       	sbc	r12, r20
     ab6:	d5 0a       	sbc	r13, r21
     ab8:	c6 01       	movw	r24, r12
     aba:	b5 01       	movw	r22, r10
     abc:	29 96       	adiw	r28, 0x09	; 9
     abe:	2c ad       	ldd	r18, Y+60	; 0x3c
     ac0:	3d ad       	ldd	r19, Y+61	; 0x3d
     ac2:	4e ad       	ldd	r20, Y+62	; 0x3e
     ac4:	5f ad       	ldd	r21, Y+63	; 0x3f
     ac6:	29 97       	sbiw	r28, 0x09	; 9
     ac8:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     acc:	7b 01       	movw	r14, r22
     ace:	8c 01       	movw	r16, r24
     ad0:	c6 01       	movw	r24, r12
     ad2:	b5 01       	movw	r22, r10
     ad4:	29 96       	adiw	r28, 0x09	; 9
     ad6:	2c ad       	ldd	r18, Y+60	; 0x3c
     ad8:	3d ad       	ldd	r19, Y+61	; 0x3d
     ada:	4e ad       	ldd	r20, Y+62	; 0x3e
     adc:	5f ad       	ldd	r21, Y+63	; 0x3f
     ade:	29 97       	sbiw	r28, 0x09	; 9
     ae0:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     ae4:	c9 01       	movw	r24, r18
     ae6:	da 01       	movw	r26, r20
     ae8:	5c 01       	movw	r10, r24
     aea:	6d 01       	movw	r12, r26
     aec:	c6 01       	movw	r24, r12
     aee:	b5 01       	movw	r22, r10
     af0:	2d 96       	adiw	r28, 0x0d	; 13
     af2:	2c ad       	ldd	r18, Y+60	; 0x3c
     af4:	3d ad       	ldd	r19, Y+61	; 0x3d
     af6:	4e ad       	ldd	r20, Y+62	; 0x3e
     af8:	5f ad       	ldd	r21, Y+63	; 0x3f
     afa:	2d 97       	sbiw	r28, 0x0d	; 13
     afc:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	87 01       	movw	r16, r14
     b06:	ff 24       	eor	r15, r15
     b08:	ee 24       	eor	r14, r14
     b0a:	21 96       	adiw	r28, 0x01	; 1
     b0c:	8c ad       	ldd	r24, Y+60	; 0x3c
     b0e:	9d ad       	ldd	r25, Y+61	; 0x3d
     b10:	ae ad       	ldd	r26, Y+62	; 0x3e
     b12:	bf ad       	ldd	r27, Y+63	; 0x3f
     b14:	21 97       	sbiw	r28, 0x01	; 1
     b16:	a0 70       	andi	r26, 0x00	; 0
     b18:	b0 70       	andi	r27, 0x00	; 0
     b1a:	e8 2a       	or	r14, r24
     b1c:	f9 2a       	or	r15, r25
     b1e:	0a 2b       	or	r16, r26
     b20:	1b 2b       	or	r17, r27
     b22:	e2 16       	cp	r14, r18
     b24:	f3 06       	cpc	r15, r19
     b26:	04 07       	cpc	r16, r20
     b28:	15 07       	cpc	r17, r21
     b2a:	c0 f4       	brcc	.+48     	; 0xb5c <__stack+0x2fd>
     b2c:	08 94       	sec
     b2e:	a1 08       	sbc	r10, r1
     b30:	b1 08       	sbc	r11, r1
     b32:	c1 08       	sbc	r12, r1
     b34:	d1 08       	sbc	r13, r1
     b36:	e2 0c       	add	r14, r2
     b38:	f3 1c       	adc	r15, r3
     b3a:	04 1d       	adc	r16, r4
     b3c:	15 1d       	adc	r17, r5
     b3e:	e2 14       	cp	r14, r2
     b40:	f3 04       	cpc	r15, r3
     b42:	04 05       	cpc	r16, r4
     b44:	15 05       	cpc	r17, r5
     b46:	50 f0       	brcs	.+20     	; 0xb5c <__stack+0x2fd>
     b48:	e2 16       	cp	r14, r18
     b4a:	f3 06       	cpc	r15, r19
     b4c:	04 07       	cpc	r16, r20
     b4e:	15 07       	cpc	r17, r21
     b50:	28 f4       	brcc	.+10     	; 0xb5c <__stack+0x2fd>
     b52:	08 94       	sec
     b54:	a1 08       	sbc	r10, r1
     b56:	b1 08       	sbc	r11, r1
     b58:	c1 08       	sbc	r12, r1
     b5a:	d1 08       	sbc	r13, r1
     b5c:	d3 01       	movw	r26, r6
     b5e:	99 27       	eor	r25, r25
     b60:	88 27       	eor	r24, r24
     b62:	86 01       	movw	r16, r12
     b64:	75 01       	movw	r14, r10
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	25 96       	adiw	r28, 0x05	; 5
     b70:	ec ae       	std	Y+60, r14	; 0x3c
     b72:	fd ae       	std	Y+61, r15	; 0x3d
     b74:	0e af       	std	Y+62, r16	; 0x3e
     b76:	1f af       	std	Y+63, r17	; 0x3f
     b78:	25 97       	sbiw	r28, 0x05	; 5
     b7a:	eb c4       	rjmp	.+2518   	; 0x1552 <__stack+0xcf3>
     b7c:	21 14       	cp	r2, r1
     b7e:	31 04       	cpc	r3, r1
     b80:	41 04       	cpc	r4, r1
     b82:	51 04       	cpc	r5, r1
     b84:	71 f4       	brne	.+28     	; 0xba2 <__stack+0x343>
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     b9a:	c9 01       	movw	r24, r18
     b9c:	da 01       	movw	r26, r20
     b9e:	1c 01       	movw	r2, r24
     ba0:	2d 01       	movw	r4, r26
     ba2:	00 e0       	ldi	r16, 0x00	; 0
     ba4:	20 16       	cp	r2, r16
     ba6:	00 e0       	ldi	r16, 0x00	; 0
     ba8:	30 06       	cpc	r3, r16
     baa:	01 e0       	ldi	r16, 0x01	; 1
     bac:	40 06       	cpc	r4, r16
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	50 06       	cpc	r5, r16
     bb2:	88 f4       	brcc	.+34     	; 0xbd6 <__stack+0x377>
     bb4:	1f ef       	ldi	r17, 0xFF	; 255
     bb6:	21 16       	cp	r2, r17
     bb8:	31 04       	cpc	r3, r1
     bba:	41 04       	cpc	r4, r1
     bbc:	51 04       	cpc	r5, r1
     bbe:	31 f0       	breq	.+12     	; 0xbcc <__stack+0x36d>
     bc0:	28 f0       	brcs	.+10     	; 0xbcc <__stack+0x36d>
     bc2:	48 e0       	ldi	r20, 0x08	; 8
     bc4:	50 e0       	ldi	r21, 0x00	; 0
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	17 c0       	rjmp	.+46     	; 0xbfa <__stack+0x39b>
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	12 c0       	rjmp	.+36     	; 0xbfa <__stack+0x39b>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	22 16       	cp	r2, r18
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	32 06       	cpc	r3, r18
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	42 06       	cpc	r4, r18
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	52 06       	cpc	r5, r18
     be6:	28 f0       	brcs	.+10     	; 0xbf2 <__stack+0x393>
     be8:	48 e1       	ldi	r20, 0x18	; 24
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <__stack+0x39b>
     bf2:	40 e1       	ldi	r20, 0x10	; 16
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	d2 01       	movw	r26, r4
     bfc:	c1 01       	movw	r24, r2
     bfe:	04 2e       	mov	r0, r20
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <__stack+0x3ab>
     c02:	b6 95       	lsr	r27
     c04:	a7 95       	ror	r26
     c06:	97 95       	ror	r25
     c08:	87 95       	ror	r24
     c0a:	0a 94       	dec	r0
     c0c:	d2 f7       	brpl	.-12     	; 0xc02 <__stack+0x3a3>
     c0e:	8c 58       	subi	r24, 0x8C	; 140
     c10:	9f 4f       	sbci	r25, 0xFF	; 255
     c12:	dc 01       	movw	r26, r24
     c14:	2c 91       	ld	r18, X
     c16:	e0 e2       	ldi	r30, 0x20	; 32
     c18:	ee 2e       	mov	r14, r30
     c1a:	f1 2c       	mov	r15, r1
     c1c:	01 2d       	mov	r16, r1
     c1e:	11 2d       	mov	r17, r1
     c20:	d8 01       	movw	r26, r16
     c22:	c7 01       	movw	r24, r14
     c24:	84 1b       	sub	r24, r20
     c26:	95 0b       	sbc	r25, r21
     c28:	a6 0b       	sbc	r26, r22
     c2a:	b7 0b       	sbc	r27, r23
     c2c:	82 1b       	sub	r24, r18
     c2e:	91 09       	sbc	r25, r1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	00 97       	sbiw	r24, 0x00	; 0
     c36:	a1 05       	cpc	r26, r1
     c38:	b1 05       	cpc	r27, r1
     c3a:	61 f4       	brne	.+24     	; 0xc54 <__stack+0x3f5>
     c3c:	64 01       	movw	r12, r8
     c3e:	53 01       	movw	r10, r6
     c40:	a2 18       	sub	r10, r2
     c42:	b3 08       	sbc	r11, r3
     c44:	c4 08       	sbc	r12, r4
     c46:	d5 08       	sbc	r13, r5
     c48:	31 e0       	ldi	r19, 0x01	; 1
     c4a:	63 2e       	mov	r6, r19
     c4c:	71 2c       	mov	r7, r1
     c4e:	81 2c       	mov	r8, r1
     c50:	91 2c       	mov	r9, r1
     c52:	24 c1       	rjmp	.+584    	; 0xe9c <__stack+0x63d>
     c54:	e3 96       	adiw	r28, 0x33	; 51
     c56:	8f af       	std	Y+63, r24	; 0x3f
     c58:	e3 97       	sbiw	r28, 0x33	; 51
     c5a:	08 2e       	mov	r0, r24
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <__stack+0x407>
     c5e:	22 0c       	add	r2, r2
     c60:	33 1c       	adc	r3, r3
     c62:	44 1c       	adc	r4, r4
     c64:	55 1c       	adc	r5, r5
     c66:	0a 94       	dec	r0
     c68:	d2 f7       	brpl	.-12     	; 0xc5e <__stack+0x3ff>
     c6a:	ee 2d       	mov	r30, r14
     c6c:	e8 1b       	sub	r30, r24
     c6e:	64 01       	movw	r12, r8
     c70:	53 01       	movw	r10, r6
     c72:	0e 2e       	mov	r0, r30
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <__stack+0x41f>
     c76:	d6 94       	lsr	r13
     c78:	c7 94       	ror	r12
     c7a:	b7 94       	ror	r11
     c7c:	a7 94       	ror	r10
     c7e:	0a 94       	dec	r0
     c80:	d2 f7       	brpl	.-12     	; 0xc76 <__stack+0x417>
     c82:	a4 01       	movw	r20, r8
     c84:	93 01       	movw	r18, r6
     c86:	e3 96       	adiw	r28, 0x33	; 51
     c88:	0f ac       	ldd	r0, Y+63	; 0x3f
     c8a:	e3 97       	sbiw	r28, 0x33	; 51
     c8c:	04 c0       	rjmp	.+8      	; 0xc96 <__stack+0x437>
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	44 1f       	adc	r20, r20
     c94:	55 1f       	adc	r21, r21
     c96:	0a 94       	dec	r0
     c98:	d2 f7       	brpl	.-12     	; 0xc8e <__stack+0x42f>
     c9a:	21 96       	adiw	r28, 0x01	; 1
     c9c:	6c ac       	ldd	r6, Y+60	; 0x3c
     c9e:	7d ac       	ldd	r7, Y+61	; 0x3d
     ca0:	8e ac       	ldd	r8, Y+62	; 0x3e
     ca2:	9f ac       	ldd	r9, Y+63	; 0x3f
     ca4:	21 97       	sbiw	r28, 0x01	; 1
     ca6:	0e 2e       	mov	r0, r30
     ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <__stack+0x453>
     caa:	96 94       	lsr	r9
     cac:	87 94       	ror	r8
     cae:	77 94       	ror	r7
     cb0:	67 94       	ror	r6
     cb2:	0a 94       	dec	r0
     cb4:	d2 f7       	brpl	.-12     	; 0xcaa <__stack+0x44b>
     cb6:	84 01       	movw	r16, r8
     cb8:	73 01       	movw	r14, r6
     cba:	e2 2a       	or	r14, r18
     cbc:	f3 2a       	or	r15, r19
     cbe:	04 2b       	or	r16, r20
     cc0:	15 2b       	or	r17, r21
     cc2:	e9 ae       	std	Y+57, r14	; 0x39
     cc4:	fa ae       	std	Y+58, r15	; 0x3a
     cc6:	0b af       	std	Y+59, r16	; 0x3b
     cc8:	1c af       	std	Y+60, r17	; 0x3c
     cca:	32 01       	movw	r6, r4
     ccc:	88 24       	eor	r8, r8
     cce:	99 24       	eor	r9, r9
     cd0:	92 01       	movw	r18, r4
     cd2:	81 01       	movw	r16, r2
     cd4:	20 70       	andi	r18, 0x00	; 0
     cd6:	30 70       	andi	r19, 0x00	; 0
     cd8:	61 96       	adiw	r28, 0x11	; 17
     cda:	0c af       	std	Y+60, r16	; 0x3c
     cdc:	1d af       	std	Y+61, r17	; 0x3d
     cde:	2e af       	std	Y+62, r18	; 0x3e
     ce0:	3f af       	std	Y+63, r19	; 0x3f
     ce2:	61 97       	sbiw	r28, 0x11	; 17
     ce4:	c6 01       	movw	r24, r12
     ce6:	b5 01       	movw	r22, r10
     ce8:	a4 01       	movw	r20, r8
     cea:	93 01       	movw	r18, r6
     cec:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     cf0:	7b 01       	movw	r14, r22
     cf2:	8c 01       	movw	r16, r24
     cf4:	c6 01       	movw	r24, r12
     cf6:	b5 01       	movw	r22, r10
     cf8:	a4 01       	movw	r20, r8
     cfa:	93 01       	movw	r18, r6
     cfc:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     d00:	c9 01       	movw	r24, r18
     d02:	da 01       	movw	r26, r20
     d04:	65 96       	adiw	r28, 0x15	; 21
     d06:	8c af       	std	Y+60, r24	; 0x3c
     d08:	9d af       	std	Y+61, r25	; 0x3d
     d0a:	ae af       	std	Y+62, r26	; 0x3e
     d0c:	bf af       	std	Y+63, r27	; 0x3f
     d0e:	65 97       	sbiw	r28, 0x15	; 21
     d10:	bc 01       	movw	r22, r24
     d12:	cd 01       	movw	r24, r26
     d14:	61 96       	adiw	r28, 0x11	; 17
     d16:	2c ad       	ldd	r18, Y+60	; 0x3c
     d18:	3d ad       	ldd	r19, Y+61	; 0x3d
     d1a:	4e ad       	ldd	r20, Y+62	; 0x3e
     d1c:	5f ad       	ldd	r21, Y+63	; 0x3f
     d1e:	61 97       	sbiw	r28, 0x11	; 17
     d20:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
     d24:	9b 01       	movw	r18, r22
     d26:	ac 01       	movw	r20, r24
     d28:	87 01       	movw	r16, r14
     d2a:	ff 24       	eor	r15, r15
     d2c:	ee 24       	eor	r14, r14
     d2e:	a9 ac       	ldd	r10, Y+57	; 0x39
     d30:	ba ac       	ldd	r11, Y+58	; 0x3a
     d32:	cb ac       	ldd	r12, Y+59	; 0x3b
     d34:	dc ac       	ldd	r13, Y+60	; 0x3c
     d36:	c6 01       	movw	r24, r12
     d38:	aa 27       	eor	r26, r26
     d3a:	bb 27       	eor	r27, r27
     d3c:	5c 01       	movw	r10, r24
     d3e:	6d 01       	movw	r12, r26
     d40:	ae 28       	or	r10, r14
     d42:	bf 28       	or	r11, r15
     d44:	c0 2a       	or	r12, r16
     d46:	d1 2a       	or	r13, r17
     d48:	a2 16       	cp	r10, r18
     d4a:	b3 06       	cpc	r11, r19
     d4c:	c4 06       	cpc	r12, r20
     d4e:	d5 06       	cpc	r13, r21
     d50:	60 f5       	brcc	.+88     	; 0xdaa <__stack+0x54b>
     d52:	65 96       	adiw	r28, 0x15	; 21
     d54:	6c ad       	ldd	r22, Y+60	; 0x3c
     d56:	7d ad       	ldd	r23, Y+61	; 0x3d
     d58:	8e ad       	ldd	r24, Y+62	; 0x3e
     d5a:	9f ad       	ldd	r25, Y+63	; 0x3f
     d5c:	65 97       	sbiw	r28, 0x15	; 21
     d5e:	61 50       	subi	r22, 0x01	; 1
     d60:	70 40       	sbci	r23, 0x00	; 0
     d62:	80 40       	sbci	r24, 0x00	; 0
     d64:	90 40       	sbci	r25, 0x00	; 0
     d66:	65 96       	adiw	r28, 0x15	; 21
     d68:	6c af       	std	Y+60, r22	; 0x3c
     d6a:	7d af       	std	Y+61, r23	; 0x3d
     d6c:	8e af       	std	Y+62, r24	; 0x3e
     d6e:	9f af       	std	Y+63, r25	; 0x3f
     d70:	65 97       	sbiw	r28, 0x15	; 21
     d72:	a2 0c       	add	r10, r2
     d74:	b3 1c       	adc	r11, r3
     d76:	c4 1c       	adc	r12, r4
     d78:	d5 1c       	adc	r13, r5
     d7a:	a2 14       	cp	r10, r2
     d7c:	b3 04       	cpc	r11, r3
     d7e:	c4 04       	cpc	r12, r4
     d80:	d5 04       	cpc	r13, r5
     d82:	98 f0       	brcs	.+38     	; 0xdaa <__stack+0x54b>
     d84:	a2 16       	cp	r10, r18
     d86:	b3 06       	cpc	r11, r19
     d88:	c4 06       	cpc	r12, r20
     d8a:	d5 06       	cpc	r13, r21
     d8c:	70 f4       	brcc	.+28     	; 0xdaa <__stack+0x54b>
     d8e:	61 50       	subi	r22, 0x01	; 1
     d90:	70 40       	sbci	r23, 0x00	; 0
     d92:	80 40       	sbci	r24, 0x00	; 0
     d94:	90 40       	sbci	r25, 0x00	; 0
     d96:	65 96       	adiw	r28, 0x15	; 21
     d98:	6c af       	std	Y+60, r22	; 0x3c
     d9a:	7d af       	std	Y+61, r23	; 0x3d
     d9c:	8e af       	std	Y+62, r24	; 0x3e
     d9e:	9f af       	std	Y+63, r25	; 0x3f
     da0:	65 97       	sbiw	r28, 0x15	; 21
     da2:	a2 0c       	add	r10, r2
     da4:	b3 1c       	adc	r11, r3
     da6:	c4 1c       	adc	r12, r4
     da8:	d5 1c       	adc	r13, r5
     daa:	a2 1a       	sub	r10, r18
     dac:	b3 0a       	sbc	r11, r19
     dae:	c4 0a       	sbc	r12, r20
     db0:	d5 0a       	sbc	r13, r21
     db2:	c6 01       	movw	r24, r12
     db4:	b5 01       	movw	r22, r10
     db6:	a4 01       	movw	r20, r8
     db8:	93 01       	movw	r18, r6
     dba:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     dbe:	7b 01       	movw	r14, r22
     dc0:	8c 01       	movw	r16, r24
     dc2:	c6 01       	movw	r24, r12
     dc4:	b5 01       	movw	r22, r10
     dc6:	a4 01       	movw	r20, r8
     dc8:	93 01       	movw	r18, r6
     dca:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     dce:	c9 01       	movw	r24, r18
     dd0:	da 01       	movw	r26, r20
     dd2:	3c 01       	movw	r6, r24
     dd4:	4d 01       	movw	r8, r26
     dd6:	c4 01       	movw	r24, r8
     dd8:	b3 01       	movw	r22, r6
     dda:	61 96       	adiw	r28, 0x11	; 17
     ddc:	2c ad       	ldd	r18, Y+60	; 0x3c
     dde:	3d ad       	ldd	r19, Y+61	; 0x3d
     de0:	4e ad       	ldd	r20, Y+62	; 0x3e
     de2:	5f ad       	ldd	r21, Y+63	; 0x3f
     de4:	61 97       	sbiw	r28, 0x11	; 17
     de6:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
     dea:	9b 01       	movw	r18, r22
     dec:	ac 01       	movw	r20, r24
     dee:	87 01       	movw	r16, r14
     df0:	ff 24       	eor	r15, r15
     df2:	ee 24       	eor	r14, r14
     df4:	89 ad       	ldd	r24, Y+57	; 0x39
     df6:	9a ad       	ldd	r25, Y+58	; 0x3a
     df8:	ab ad       	ldd	r26, Y+59	; 0x3b
     dfa:	bc ad       	ldd	r27, Y+60	; 0x3c
     dfc:	a0 70       	andi	r26, 0x00	; 0
     dfe:	b0 70       	andi	r27, 0x00	; 0
     e00:	57 01       	movw	r10, r14
     e02:	68 01       	movw	r12, r16
     e04:	a8 2a       	or	r10, r24
     e06:	b9 2a       	or	r11, r25
     e08:	ca 2a       	or	r12, r26
     e0a:	db 2a       	or	r13, r27
     e0c:	a2 16       	cp	r10, r18
     e0e:	b3 06       	cpc	r11, r19
     e10:	c4 06       	cpc	r12, r20
     e12:	d5 06       	cpc	r13, r21
     e14:	e0 f4       	brcc	.+56     	; 0xe4e <__stack+0x5ef>
     e16:	08 94       	sec
     e18:	61 08       	sbc	r6, r1
     e1a:	71 08       	sbc	r7, r1
     e1c:	81 08       	sbc	r8, r1
     e1e:	91 08       	sbc	r9, r1
     e20:	a2 0c       	add	r10, r2
     e22:	b3 1c       	adc	r11, r3
     e24:	c4 1c       	adc	r12, r4
     e26:	d5 1c       	adc	r13, r5
     e28:	a2 14       	cp	r10, r2
     e2a:	b3 04       	cpc	r11, r3
     e2c:	c4 04       	cpc	r12, r4
     e2e:	d5 04       	cpc	r13, r5
     e30:	70 f0       	brcs	.+28     	; 0xe4e <__stack+0x5ef>
     e32:	a2 16       	cp	r10, r18
     e34:	b3 06       	cpc	r11, r19
     e36:	c4 06       	cpc	r12, r20
     e38:	d5 06       	cpc	r13, r21
     e3a:	48 f4       	brcc	.+18     	; 0xe4e <__stack+0x5ef>
     e3c:	08 94       	sec
     e3e:	61 08       	sbc	r6, r1
     e40:	71 08       	sbc	r7, r1
     e42:	81 08       	sbc	r8, r1
     e44:	91 08       	sbc	r9, r1
     e46:	a2 0c       	add	r10, r2
     e48:	b3 1c       	adc	r11, r3
     e4a:	c4 1c       	adc	r12, r4
     e4c:	d5 1c       	adc	r13, r5
     e4e:	21 96       	adiw	r28, 0x01	; 1
     e50:	8c ad       	ldd	r24, Y+60	; 0x3c
     e52:	9d ad       	ldd	r25, Y+61	; 0x3d
     e54:	ae ad       	ldd	r26, Y+62	; 0x3e
     e56:	bf ad       	ldd	r27, Y+63	; 0x3f
     e58:	21 97       	sbiw	r28, 0x01	; 1
     e5a:	e3 96       	adiw	r28, 0x33	; 51
     e5c:	0f ac       	ldd	r0, Y+63	; 0x3f
     e5e:	e3 97       	sbiw	r28, 0x33	; 51
     e60:	04 c0       	rjmp	.+8      	; 0xe6a <__stack+0x60b>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	aa 1f       	adc	r26, r26
     e68:	bb 1f       	adc	r27, r27
     e6a:	0a 94       	dec	r0
     e6c:	d2 f7       	brpl	.-12     	; 0xe62 <__stack+0x603>
     e6e:	21 96       	adiw	r28, 0x01	; 1
     e70:	8c af       	std	Y+60, r24	; 0x3c
     e72:	9d af       	std	Y+61, r25	; 0x3d
     e74:	ae af       	std	Y+62, r26	; 0x3e
     e76:	bf af       	std	Y+63, r27	; 0x3f
     e78:	21 97       	sbiw	r28, 0x01	; 1
     e7a:	a2 1a       	sub	r10, r18
     e7c:	b3 0a       	sbc	r11, r19
     e7e:	c4 0a       	sbc	r12, r20
     e80:	d5 0a       	sbc	r13, r21
     e82:	65 96       	adiw	r28, 0x15	; 21
     e84:	ec ac       	ldd	r14, Y+60	; 0x3c
     e86:	fd ac       	ldd	r15, Y+61	; 0x3d
     e88:	0e ad       	ldd	r16, Y+62	; 0x3e
     e8a:	1f ad       	ldd	r17, Y+63	; 0x3f
     e8c:	65 97       	sbiw	r28, 0x15	; 21
     e8e:	d7 01       	movw	r26, r14
     e90:	99 27       	eor	r25, r25
     e92:	88 27       	eor	r24, r24
     e94:	68 2a       	or	r6, r24
     e96:	79 2a       	or	r7, r25
     e98:	8a 2a       	or	r8, r26
     e9a:	9b 2a       	or	r9, r27
     e9c:	82 01       	movw	r16, r4
     e9e:	22 27       	eor	r18, r18
     ea0:	33 27       	eor	r19, r19
     ea2:	69 96       	adiw	r28, 0x19	; 25
     ea4:	0c af       	std	Y+60, r16	; 0x3c
     ea6:	1d af       	std	Y+61, r17	; 0x3d
     ea8:	2e af       	std	Y+62, r18	; 0x3e
     eaa:	3f af       	std	Y+63, r19	; 0x3f
     eac:	69 97       	sbiw	r28, 0x19	; 25
     eae:	a2 01       	movw	r20, r4
     eb0:	91 01       	movw	r18, r2
     eb2:	40 70       	andi	r20, 0x00	; 0
     eb4:	50 70       	andi	r21, 0x00	; 0
     eb6:	6d 96       	adiw	r28, 0x1d	; 29
     eb8:	2c af       	std	Y+60, r18	; 0x3c
     eba:	3d af       	std	Y+61, r19	; 0x3d
     ebc:	4e af       	std	Y+62, r20	; 0x3e
     ebe:	5f af       	std	Y+63, r21	; 0x3f
     ec0:	6d 97       	sbiw	r28, 0x1d	; 29
     ec2:	c6 01       	movw	r24, r12
     ec4:	b5 01       	movw	r22, r10
     ec6:	69 96       	adiw	r28, 0x19	; 25
     ec8:	2c ad       	ldd	r18, Y+60	; 0x3c
     eca:	3d ad       	ldd	r19, Y+61	; 0x3d
     ecc:	4e ad       	ldd	r20, Y+62	; 0x3e
     ece:	5f ad       	ldd	r21, Y+63	; 0x3f
     ed0:	69 97       	sbiw	r28, 0x19	; 25
     ed2:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     ed6:	7b 01       	movw	r14, r22
     ed8:	8c 01       	movw	r16, r24
     eda:	c6 01       	movw	r24, r12
     edc:	b5 01       	movw	r22, r10
     ede:	69 96       	adiw	r28, 0x19	; 25
     ee0:	2c ad       	ldd	r18, Y+60	; 0x3c
     ee2:	3d ad       	ldd	r19, Y+61	; 0x3d
     ee4:	4e ad       	ldd	r20, Y+62	; 0x3e
     ee6:	5f ad       	ldd	r21, Y+63	; 0x3f
     ee8:	69 97       	sbiw	r28, 0x19	; 25
     eea:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     eee:	c9 01       	movw	r24, r18
     ef0:	da 01       	movw	r26, r20
     ef2:	a1 96       	adiw	r28, 0x21	; 33
     ef4:	8c af       	std	Y+60, r24	; 0x3c
     ef6:	9d af       	std	Y+61, r25	; 0x3d
     ef8:	ae af       	std	Y+62, r26	; 0x3e
     efa:	bf af       	std	Y+63, r27	; 0x3f
     efc:	a1 97       	sbiw	r28, 0x21	; 33
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	6d 96       	adiw	r28, 0x1d	; 29
     f04:	2c ad       	ldd	r18, Y+60	; 0x3c
     f06:	3d ad       	ldd	r19, Y+61	; 0x3d
     f08:	4e ad       	ldd	r20, Y+62	; 0x3e
     f0a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f0c:	6d 97       	sbiw	r28, 0x1d	; 29
     f0e:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
     f12:	9b 01       	movw	r18, r22
     f14:	ac 01       	movw	r20, r24
     f16:	87 01       	movw	r16, r14
     f18:	ff 24       	eor	r15, r15
     f1a:	ee 24       	eor	r14, r14
     f1c:	21 96       	adiw	r28, 0x01	; 1
     f1e:	ac ac       	ldd	r10, Y+60	; 0x3c
     f20:	bd ac       	ldd	r11, Y+61	; 0x3d
     f22:	ce ac       	ldd	r12, Y+62	; 0x3e
     f24:	df ac       	ldd	r13, Y+63	; 0x3f
     f26:	21 97       	sbiw	r28, 0x01	; 1
     f28:	c6 01       	movw	r24, r12
     f2a:	aa 27       	eor	r26, r26
     f2c:	bb 27       	eor	r27, r27
     f2e:	57 01       	movw	r10, r14
     f30:	68 01       	movw	r12, r16
     f32:	a8 2a       	or	r10, r24
     f34:	b9 2a       	or	r11, r25
     f36:	ca 2a       	or	r12, r26
     f38:	db 2a       	or	r13, r27
     f3a:	a2 16       	cp	r10, r18
     f3c:	b3 06       	cpc	r11, r19
     f3e:	c4 06       	cpc	r12, r20
     f40:	d5 06       	cpc	r13, r21
     f42:	60 f5       	brcc	.+88     	; 0xf9c <__stack+0x73d>
     f44:	a1 96       	adiw	r28, 0x21	; 33
     f46:	6c ad       	ldd	r22, Y+60	; 0x3c
     f48:	7d ad       	ldd	r23, Y+61	; 0x3d
     f4a:	8e ad       	ldd	r24, Y+62	; 0x3e
     f4c:	9f ad       	ldd	r25, Y+63	; 0x3f
     f4e:	a1 97       	sbiw	r28, 0x21	; 33
     f50:	61 50       	subi	r22, 0x01	; 1
     f52:	70 40       	sbci	r23, 0x00	; 0
     f54:	80 40       	sbci	r24, 0x00	; 0
     f56:	90 40       	sbci	r25, 0x00	; 0
     f58:	a1 96       	adiw	r28, 0x21	; 33
     f5a:	6c af       	std	Y+60, r22	; 0x3c
     f5c:	7d af       	std	Y+61, r23	; 0x3d
     f5e:	8e af       	std	Y+62, r24	; 0x3e
     f60:	9f af       	std	Y+63, r25	; 0x3f
     f62:	a1 97       	sbiw	r28, 0x21	; 33
     f64:	a2 0c       	add	r10, r2
     f66:	b3 1c       	adc	r11, r3
     f68:	c4 1c       	adc	r12, r4
     f6a:	d5 1c       	adc	r13, r5
     f6c:	a2 14       	cp	r10, r2
     f6e:	b3 04       	cpc	r11, r3
     f70:	c4 04       	cpc	r12, r4
     f72:	d5 04       	cpc	r13, r5
     f74:	98 f0       	brcs	.+38     	; 0xf9c <__stack+0x73d>
     f76:	a2 16       	cp	r10, r18
     f78:	b3 06       	cpc	r11, r19
     f7a:	c4 06       	cpc	r12, r20
     f7c:	d5 06       	cpc	r13, r21
     f7e:	70 f4       	brcc	.+28     	; 0xf9c <__stack+0x73d>
     f80:	61 50       	subi	r22, 0x01	; 1
     f82:	70 40       	sbci	r23, 0x00	; 0
     f84:	80 40       	sbci	r24, 0x00	; 0
     f86:	90 40       	sbci	r25, 0x00	; 0
     f88:	a1 96       	adiw	r28, 0x21	; 33
     f8a:	6c af       	std	Y+60, r22	; 0x3c
     f8c:	7d af       	std	Y+61, r23	; 0x3d
     f8e:	8e af       	std	Y+62, r24	; 0x3e
     f90:	9f af       	std	Y+63, r25	; 0x3f
     f92:	a1 97       	sbiw	r28, 0x21	; 33
     f94:	a2 0c       	add	r10, r2
     f96:	b3 1c       	adc	r11, r3
     f98:	c4 1c       	adc	r12, r4
     f9a:	d5 1c       	adc	r13, r5
     f9c:	a2 1a       	sub	r10, r18
     f9e:	b3 0a       	sbc	r11, r19
     fa0:	c4 0a       	sbc	r12, r20
     fa2:	d5 0a       	sbc	r13, r21
     fa4:	c6 01       	movw	r24, r12
     fa6:	b5 01       	movw	r22, r10
     fa8:	69 96       	adiw	r28, 0x19	; 25
     faa:	2c ad       	ldd	r18, Y+60	; 0x3c
     fac:	3d ad       	ldd	r19, Y+61	; 0x3d
     fae:	4e ad       	ldd	r20, Y+62	; 0x3e
     fb0:	5f ad       	ldd	r21, Y+63	; 0x3f
     fb2:	69 97       	sbiw	r28, 0x19	; 25
     fb4:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     fb8:	7b 01       	movw	r14, r22
     fba:	8c 01       	movw	r16, r24
     fbc:	c6 01       	movw	r24, r12
     fbe:	b5 01       	movw	r22, r10
     fc0:	69 96       	adiw	r28, 0x19	; 25
     fc2:	2c ad       	ldd	r18, Y+60	; 0x3c
     fc4:	3d ad       	ldd	r19, Y+61	; 0x3d
     fc6:	4e ad       	ldd	r20, Y+62	; 0x3e
     fc8:	5f ad       	ldd	r21, Y+63	; 0x3f
     fca:	69 97       	sbiw	r28, 0x19	; 25
     fcc:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
     fd0:	c9 01       	movw	r24, r18
     fd2:	da 01       	movw	r26, r20
     fd4:	5c 01       	movw	r10, r24
     fd6:	6d 01       	movw	r12, r26
     fd8:	c6 01       	movw	r24, r12
     fda:	b5 01       	movw	r22, r10
     fdc:	6d 96       	adiw	r28, 0x1d	; 29
     fde:	2c ad       	ldd	r18, Y+60	; 0x3c
     fe0:	3d ad       	ldd	r19, Y+61	; 0x3d
     fe2:	4e ad       	ldd	r20, Y+62	; 0x3e
     fe4:	5f ad       	ldd	r21, Y+63	; 0x3f
     fe6:	6d 97       	sbiw	r28, 0x1d	; 29
     fe8:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
     fec:	9b 01       	movw	r18, r22
     fee:	ac 01       	movw	r20, r24
     ff0:	87 01       	movw	r16, r14
     ff2:	ff 24       	eor	r15, r15
     ff4:	ee 24       	eor	r14, r14
     ff6:	21 96       	adiw	r28, 0x01	; 1
     ff8:	8c ad       	ldd	r24, Y+60	; 0x3c
     ffa:	9d ad       	ldd	r25, Y+61	; 0x3d
     ffc:	ae ad       	ldd	r26, Y+62	; 0x3e
     ffe:	bf ad       	ldd	r27, Y+63	; 0x3f
    1000:	21 97       	sbiw	r28, 0x01	; 1
    1002:	a0 70       	andi	r26, 0x00	; 0
    1004:	b0 70       	andi	r27, 0x00	; 0
    1006:	e8 2a       	or	r14, r24
    1008:	f9 2a       	or	r15, r25
    100a:	0a 2b       	or	r16, r26
    100c:	1b 2b       	or	r17, r27
    100e:	e2 16       	cp	r14, r18
    1010:	f3 06       	cpc	r15, r19
    1012:	04 07       	cpc	r16, r20
    1014:	15 07       	cpc	r17, r21
    1016:	c0 f4       	brcc	.+48     	; 0x1048 <__stack+0x7e9>
    1018:	08 94       	sec
    101a:	a1 08       	sbc	r10, r1
    101c:	b1 08       	sbc	r11, r1
    101e:	c1 08       	sbc	r12, r1
    1020:	d1 08       	sbc	r13, r1
    1022:	e2 0c       	add	r14, r2
    1024:	f3 1c       	adc	r15, r3
    1026:	04 1d       	adc	r16, r4
    1028:	15 1d       	adc	r17, r5
    102a:	e2 14       	cp	r14, r2
    102c:	f3 04       	cpc	r15, r3
    102e:	04 05       	cpc	r16, r4
    1030:	15 05       	cpc	r17, r5
    1032:	50 f0       	brcs	.+20     	; 0x1048 <__stack+0x7e9>
    1034:	e2 16       	cp	r14, r18
    1036:	f3 06       	cpc	r15, r19
    1038:	04 07       	cpc	r16, r20
    103a:	15 07       	cpc	r17, r21
    103c:	28 f4       	brcc	.+10     	; 0x1048 <__stack+0x7e9>
    103e:	08 94       	sec
    1040:	a1 08       	sbc	r10, r1
    1042:	b1 08       	sbc	r11, r1
    1044:	c1 08       	sbc	r12, r1
    1046:	d1 08       	sbc	r13, r1
    1048:	a1 96       	adiw	r28, 0x21	; 33
    104a:	ec ac       	ldd	r14, Y+60	; 0x3c
    104c:	fd ac       	ldd	r15, Y+61	; 0x3d
    104e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1050:	1f ad       	ldd	r17, Y+63	; 0x3f
    1052:	a1 97       	sbiw	r28, 0x21	; 33
    1054:	d7 01       	movw	r26, r14
    1056:	99 27       	eor	r25, r25
    1058:	88 27       	eor	r24, r24
    105a:	96 01       	movw	r18, r12
    105c:	85 01       	movw	r16, r10
    105e:	08 2b       	or	r16, r24
    1060:	19 2b       	or	r17, r25
    1062:	2a 2b       	or	r18, r26
    1064:	3b 2b       	or	r19, r27
    1066:	25 96       	adiw	r28, 0x05	; 5
    1068:	0c af       	std	Y+60, r16	; 0x3c
    106a:	1d af       	std	Y+61, r17	; 0x3d
    106c:	2e af       	std	Y+62, r18	; 0x3e
    106e:	3f af       	std	Y+63, r19	; 0x3f
    1070:	25 97       	sbiw	r28, 0x05	; 5
    1072:	72 c2       	rjmp	.+1252   	; 0x1558 <__stack+0xcf9>
    1074:	6e 14       	cp	r6, r14
    1076:	7f 04       	cpc	r7, r15
    1078:	80 06       	cpc	r8, r16
    107a:	91 06       	cpc	r9, r17
    107c:	08 f4       	brcc	.+2      	; 0x1080 <__stack+0x821>
    107e:	5f c2       	rjmp	.+1214   	; 0x153e <__stack+0xcdf>
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	e2 16       	cp	r14, r18
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	f2 06       	cpc	r15, r18
    1088:	21 e0       	ldi	r18, 0x01	; 1
    108a:	02 07       	cpc	r16, r18
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	12 07       	cpc	r17, r18
    1090:	88 f4       	brcc	.+34     	; 0x10b4 <__stack+0x855>
    1092:	3f ef       	ldi	r19, 0xFF	; 255
    1094:	e3 16       	cp	r14, r19
    1096:	f1 04       	cpc	r15, r1
    1098:	01 05       	cpc	r16, r1
    109a:	11 05       	cpc	r17, r1
    109c:	31 f0       	breq	.+12     	; 0x10aa <__stack+0x84b>
    109e:	28 f0       	brcs	.+10     	; 0x10aa <__stack+0x84b>
    10a0:	48 e0       	ldi	r20, 0x08	; 8
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	17 c0       	rjmp	.+46     	; 0x10d8 <__stack+0x879>
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	12 c0       	rjmp	.+36     	; 0x10d8 <__stack+0x879>
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	e4 16       	cp	r14, r20
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	f4 06       	cpc	r15, r20
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	04 07       	cpc	r16, r20
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	14 07       	cpc	r17, r20
    10c4:	28 f0       	brcs	.+10     	; 0x10d0 <__stack+0x871>
    10c6:	48 e1       	ldi	r20, 0x18	; 24
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <__stack+0x879>
    10d0:	40 e1       	ldi	r20, 0x10	; 16
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	d8 01       	movw	r26, r16
    10da:	c7 01       	movw	r24, r14
    10dc:	04 2e       	mov	r0, r20
    10de:	04 c0       	rjmp	.+8      	; 0x10e8 <__stack+0x889>
    10e0:	b6 95       	lsr	r27
    10e2:	a7 95       	ror	r26
    10e4:	97 95       	ror	r25
    10e6:	87 95       	ror	r24
    10e8:	0a 94       	dec	r0
    10ea:	d2 f7       	brpl	.-12     	; 0x10e0 <__stack+0x881>
    10ec:	8c 58       	subi	r24, 0x8C	; 140
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	dc 01       	movw	r26, r24
    10f2:	2c 91       	ld	r18, X
    10f4:	30 e2       	ldi	r19, 0x20	; 32
    10f6:	a3 2e       	mov	r10, r19
    10f8:	b1 2c       	mov	r11, r1
    10fa:	c1 2c       	mov	r12, r1
    10fc:	d1 2c       	mov	r13, r1
    10fe:	d6 01       	movw	r26, r12
    1100:	c5 01       	movw	r24, r10
    1102:	84 1b       	sub	r24, r20
    1104:	95 0b       	sbc	r25, r21
    1106:	a6 0b       	sbc	r26, r22
    1108:	b7 0b       	sbc	r27, r23
    110a:	82 1b       	sub	r24, r18
    110c:	91 09       	sbc	r25, r1
    110e:	a1 09       	sbc	r26, r1
    1110:	b1 09       	sbc	r27, r1
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	a1 05       	cpc	r26, r1
    1116:	b1 05       	cpc	r27, r1
    1118:	99 f4       	brne	.+38     	; 0x1140 <__stack+0x8e1>
    111a:	e6 14       	cp	r14, r6
    111c:	f7 04       	cpc	r15, r7
    111e:	08 05       	cpc	r16, r8
    1120:	19 05       	cpc	r17, r9
    1122:	08 f4       	brcc	.+2      	; 0x1126 <__stack+0x8c7>
    1124:	fe c1       	rjmp	.+1020   	; 0x1522 <__stack+0xcc3>
    1126:	21 96       	adiw	r28, 0x01	; 1
    1128:	6c ac       	ldd	r6, Y+60	; 0x3c
    112a:	7d ac       	ldd	r7, Y+61	; 0x3d
    112c:	8e ac       	ldd	r8, Y+62	; 0x3e
    112e:	9f ac       	ldd	r9, Y+63	; 0x3f
    1130:	21 97       	sbiw	r28, 0x01	; 1
    1132:	62 14       	cp	r6, r2
    1134:	73 04       	cpc	r7, r3
    1136:	84 04       	cpc	r8, r4
    1138:	95 04       	cpc	r9, r5
    113a:	08 f0       	brcs	.+2      	; 0x113e <__stack+0x8df>
    113c:	f2 c1       	rjmp	.+996    	; 0x1522 <__stack+0xcc3>
    113e:	ff c1       	rjmp	.+1022   	; 0x153e <__stack+0xcdf>
    1140:	e2 96       	adiw	r28, 0x32	; 50
    1142:	8f af       	std	Y+63, r24	; 0x3f
    1144:	e2 97       	sbiw	r28, 0x32	; 50
    1146:	08 2e       	mov	r0, r24
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <__stack+0x8f3>
    114a:	ee 0c       	add	r14, r14
    114c:	ff 1c       	adc	r15, r15
    114e:	00 1f       	adc	r16, r16
    1150:	11 1f       	adc	r17, r17
    1152:	0a 94       	dec	r0
    1154:	d2 f7       	brpl	.-12     	; 0x114a <__stack+0x8eb>
    1156:	6a 2d       	mov	r22, r10
    1158:	68 1b       	sub	r22, r24
    115a:	d2 01       	movw	r26, r4
    115c:	c1 01       	movw	r24, r2
    115e:	06 2e       	mov	r0, r22
    1160:	04 c0       	rjmp	.+8      	; 0x116a <__stack+0x90b>
    1162:	b6 95       	lsr	r27
    1164:	a7 95       	ror	r26
    1166:	97 95       	ror	r25
    1168:	87 95       	ror	r24
    116a:	0a 94       	dec	r0
    116c:	d2 f7       	brpl	.-12     	; 0x1162 <__stack+0x903>
    116e:	5c 01       	movw	r10, r24
    1170:	6d 01       	movw	r12, r26
    1172:	ae 28       	or	r10, r14
    1174:	bf 28       	or	r11, r15
    1176:	c0 2a       	or	r12, r16
    1178:	d1 2a       	or	r13, r17
    117a:	ad aa       	std	Y+53, r10	; 0x35
    117c:	be aa       	std	Y+54, r11	; 0x36
    117e:	cf aa       	std	Y+55, r12	; 0x37
    1180:	d8 ae       	std	Y+56, r13	; 0x38
    1182:	72 01       	movw	r14, r4
    1184:	61 01       	movw	r12, r2
    1186:	e2 96       	adiw	r28, 0x32	; 50
    1188:	0f ac       	ldd	r0, Y+63	; 0x3f
    118a:	e2 97       	sbiw	r28, 0x32	; 50
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <__stack+0x937>
    118e:	cc 0c       	add	r12, r12
    1190:	dd 1c       	adc	r13, r13
    1192:	ee 1c       	adc	r14, r14
    1194:	ff 1c       	adc	r15, r15
    1196:	0a 94       	dec	r0
    1198:	d2 f7       	brpl	.-12     	; 0x118e <__stack+0x92f>
    119a:	c9 aa       	std	Y+49, r12	; 0x31
    119c:	da aa       	std	Y+50, r13	; 0x32
    119e:	eb aa       	std	Y+51, r14	; 0x33
    11a0:	fc aa       	std	Y+52, r15	; 0x34
    11a2:	64 01       	movw	r12, r8
    11a4:	53 01       	movw	r10, r6
    11a6:	06 2e       	mov	r0, r22
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <__stack+0x953>
    11aa:	d6 94       	lsr	r13
    11ac:	c7 94       	ror	r12
    11ae:	b7 94       	ror	r11
    11b0:	a7 94       	ror	r10
    11b2:	0a 94       	dec	r0
    11b4:	d2 f7       	brpl	.-12     	; 0x11aa <__stack+0x94b>
    11b6:	d4 01       	movw	r26, r8
    11b8:	c3 01       	movw	r24, r6
    11ba:	e2 96       	adiw	r28, 0x32	; 50
    11bc:	0f ac       	ldd	r0, Y+63	; 0x3f
    11be:	e2 97       	sbiw	r28, 0x32	; 50
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <__stack+0x96b>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	aa 1f       	adc	r26, r26
    11c8:	bb 1f       	adc	r27, r27
    11ca:	0a 94       	dec	r0
    11cc:	d2 f7       	brpl	.-12     	; 0x11c2 <__stack+0x963>
    11ce:	21 96       	adiw	r28, 0x01	; 1
    11d0:	ec ac       	ldd	r14, Y+60	; 0x3c
    11d2:	fd ac       	ldd	r15, Y+61	; 0x3d
    11d4:	0e ad       	ldd	r16, Y+62	; 0x3e
    11d6:	1f ad       	ldd	r17, Y+63	; 0x3f
    11d8:	21 97       	sbiw	r28, 0x01	; 1
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <__stack+0x985>
    11dc:	16 95       	lsr	r17
    11de:	07 95       	ror	r16
    11e0:	f7 94       	ror	r15
    11e2:	e7 94       	ror	r14
    11e4:	6a 95       	dec	r22
    11e6:	d2 f7       	brpl	.-12     	; 0x11dc <__stack+0x97d>
    11e8:	37 01       	movw	r6, r14
    11ea:	48 01       	movw	r8, r16
    11ec:	68 2a       	or	r6, r24
    11ee:	79 2a       	or	r7, r25
    11f0:	8a 2a       	or	r8, r26
    11f2:	9b 2a       	or	r9, r27
    11f4:	6d a6       	std	Y+45, r6	; 0x2d
    11f6:	7e a6       	std	Y+46, r7	; 0x2e
    11f8:	8f a6       	std	Y+47, r8	; 0x2f
    11fa:	98 aa       	std	Y+48, r9	; 0x30
    11fc:	ed a8       	ldd	r14, Y+53	; 0x35
    11fe:	fe a8       	ldd	r15, Y+54	; 0x36
    1200:	0f a9       	ldd	r16, Y+55	; 0x37
    1202:	18 ad       	ldd	r17, Y+56	; 0x38
    1204:	38 01       	movw	r6, r16
    1206:	88 24       	eor	r8, r8
    1208:	99 24       	eor	r9, r9
    120a:	98 01       	movw	r18, r16
    120c:	87 01       	movw	r16, r14
    120e:	20 70       	andi	r18, 0x00	; 0
    1210:	30 70       	andi	r19, 0x00	; 0
    1212:	a5 96       	adiw	r28, 0x25	; 37
    1214:	0c af       	std	Y+60, r16	; 0x3c
    1216:	1d af       	std	Y+61, r17	; 0x3d
    1218:	2e af       	std	Y+62, r18	; 0x3e
    121a:	3f af       	std	Y+63, r19	; 0x3f
    121c:	a5 97       	sbiw	r28, 0x25	; 37
    121e:	c6 01       	movw	r24, r12
    1220:	b5 01       	movw	r22, r10
    1222:	a4 01       	movw	r20, r8
    1224:	93 01       	movw	r18, r6
    1226:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    122a:	7b 01       	movw	r14, r22
    122c:	8c 01       	movw	r16, r24
    122e:	c6 01       	movw	r24, r12
    1230:	b5 01       	movw	r22, r10
    1232:	a4 01       	movw	r20, r8
    1234:	93 01       	movw	r18, r6
    1236:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    123a:	c9 01       	movw	r24, r18
    123c:	da 01       	movw	r26, r20
    123e:	1c 01       	movw	r2, r24
    1240:	2d 01       	movw	r4, r26
    1242:	c2 01       	movw	r24, r4
    1244:	b1 01       	movw	r22, r2
    1246:	a5 96       	adiw	r28, 0x25	; 37
    1248:	2c ad       	ldd	r18, Y+60	; 0x3c
    124a:	3d ad       	ldd	r19, Y+61	; 0x3d
    124c:	4e ad       	ldd	r20, Y+62	; 0x3e
    124e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1250:	a5 97       	sbiw	r28, 0x25	; 37
    1252:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    1256:	9b 01       	movw	r18, r22
    1258:	ac 01       	movw	r20, r24
    125a:	87 01       	movw	r16, r14
    125c:	ff 24       	eor	r15, r15
    125e:	ee 24       	eor	r14, r14
    1260:	ad a4       	ldd	r10, Y+45	; 0x2d
    1262:	be a4       	ldd	r11, Y+46	; 0x2e
    1264:	cf a4       	ldd	r12, Y+47	; 0x2f
    1266:	d8 a8       	ldd	r13, Y+48	; 0x30
    1268:	c6 01       	movw	r24, r12
    126a:	aa 27       	eor	r26, r26
    126c:	bb 27       	eor	r27, r27
    126e:	57 01       	movw	r10, r14
    1270:	68 01       	movw	r12, r16
    1272:	a8 2a       	or	r10, r24
    1274:	b9 2a       	or	r11, r25
    1276:	ca 2a       	or	r12, r26
    1278:	db 2a       	or	r13, r27
    127a:	a2 16       	cp	r10, r18
    127c:	b3 06       	cpc	r11, r19
    127e:	c4 06       	cpc	r12, r20
    1280:	d5 06       	cpc	r13, r21
    1282:	00 f5       	brcc	.+64     	; 0x12c4 <__stack+0xa65>
    1284:	08 94       	sec
    1286:	21 08       	sbc	r2, r1
    1288:	31 08       	sbc	r3, r1
    128a:	41 08       	sbc	r4, r1
    128c:	51 08       	sbc	r5, r1
    128e:	ed a8       	ldd	r14, Y+53	; 0x35
    1290:	fe a8       	ldd	r15, Y+54	; 0x36
    1292:	0f a9       	ldd	r16, Y+55	; 0x37
    1294:	18 ad       	ldd	r17, Y+56	; 0x38
    1296:	ae 0c       	add	r10, r14
    1298:	bf 1c       	adc	r11, r15
    129a:	c0 1e       	adc	r12, r16
    129c:	d1 1e       	adc	r13, r17
    129e:	ae 14       	cp	r10, r14
    12a0:	bf 04       	cpc	r11, r15
    12a2:	c0 06       	cpc	r12, r16
    12a4:	d1 06       	cpc	r13, r17
    12a6:	70 f0       	brcs	.+28     	; 0x12c4 <__stack+0xa65>
    12a8:	a2 16       	cp	r10, r18
    12aa:	b3 06       	cpc	r11, r19
    12ac:	c4 06       	cpc	r12, r20
    12ae:	d5 06       	cpc	r13, r21
    12b0:	48 f4       	brcc	.+18     	; 0x12c4 <__stack+0xa65>
    12b2:	08 94       	sec
    12b4:	21 08       	sbc	r2, r1
    12b6:	31 08       	sbc	r3, r1
    12b8:	41 08       	sbc	r4, r1
    12ba:	51 08       	sbc	r5, r1
    12bc:	ae 0c       	add	r10, r14
    12be:	bf 1c       	adc	r11, r15
    12c0:	c0 1e       	adc	r12, r16
    12c2:	d1 1e       	adc	r13, r17
    12c4:	a2 1a       	sub	r10, r18
    12c6:	b3 0a       	sbc	r11, r19
    12c8:	c4 0a       	sbc	r12, r20
    12ca:	d5 0a       	sbc	r13, r21
    12cc:	c6 01       	movw	r24, r12
    12ce:	b5 01       	movw	r22, r10
    12d0:	a4 01       	movw	r20, r8
    12d2:	93 01       	movw	r18, r6
    12d4:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    12d8:	7b 01       	movw	r14, r22
    12da:	8c 01       	movw	r16, r24
    12dc:	c6 01       	movw	r24, r12
    12de:	b5 01       	movw	r22, r10
    12e0:	a4 01       	movw	r20, r8
    12e2:	93 01       	movw	r18, r6
    12e4:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    12e8:	c9 01       	movw	r24, r18
    12ea:	da 01       	movw	r26, r20
    12ec:	3c 01       	movw	r6, r24
    12ee:	4d 01       	movw	r8, r26
    12f0:	c4 01       	movw	r24, r8
    12f2:	b3 01       	movw	r22, r6
    12f4:	a5 96       	adiw	r28, 0x25	; 37
    12f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    12f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    12fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    12fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    12fe:	a5 97       	sbiw	r28, 0x25	; 37
    1300:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	87 01       	movw	r16, r14
    130a:	ff 24       	eor	r15, r15
    130c:	ee 24       	eor	r14, r14
    130e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1310:	9e a5       	ldd	r25, Y+46	; 0x2e
    1312:	af a5       	ldd	r26, Y+47	; 0x2f
    1314:	b8 a9       	ldd	r27, Y+48	; 0x30
    1316:	a0 70       	andi	r26, 0x00	; 0
    1318:	b0 70       	andi	r27, 0x00	; 0
    131a:	57 01       	movw	r10, r14
    131c:	68 01       	movw	r12, r16
    131e:	a8 2a       	or	r10, r24
    1320:	b9 2a       	or	r11, r25
    1322:	ca 2a       	or	r12, r26
    1324:	db 2a       	or	r13, r27
    1326:	a2 16       	cp	r10, r18
    1328:	b3 06       	cpc	r11, r19
    132a:	c4 06       	cpc	r12, r20
    132c:	d5 06       	cpc	r13, r21
    132e:	00 f5       	brcc	.+64     	; 0x1370 <__stack+0xb11>
    1330:	08 94       	sec
    1332:	61 08       	sbc	r6, r1
    1334:	71 08       	sbc	r7, r1
    1336:	81 08       	sbc	r8, r1
    1338:	91 08       	sbc	r9, r1
    133a:	6d a9       	ldd	r22, Y+53	; 0x35
    133c:	7e a9       	ldd	r23, Y+54	; 0x36
    133e:	8f a9       	ldd	r24, Y+55	; 0x37
    1340:	98 ad       	ldd	r25, Y+56	; 0x38
    1342:	a6 0e       	add	r10, r22
    1344:	b7 1e       	adc	r11, r23
    1346:	c8 1e       	adc	r12, r24
    1348:	d9 1e       	adc	r13, r25
    134a:	a6 16       	cp	r10, r22
    134c:	b7 06       	cpc	r11, r23
    134e:	c8 06       	cpc	r12, r24
    1350:	d9 06       	cpc	r13, r25
    1352:	70 f0       	brcs	.+28     	; 0x1370 <__stack+0xb11>
    1354:	a2 16       	cp	r10, r18
    1356:	b3 06       	cpc	r11, r19
    1358:	c4 06       	cpc	r12, r20
    135a:	d5 06       	cpc	r13, r21
    135c:	48 f4       	brcc	.+18     	; 0x1370 <__stack+0xb11>
    135e:	08 94       	sec
    1360:	61 08       	sbc	r6, r1
    1362:	71 08       	sbc	r7, r1
    1364:	81 08       	sbc	r8, r1
    1366:	91 08       	sbc	r9, r1
    1368:	a6 0e       	add	r10, r22
    136a:	b7 1e       	adc	r11, r23
    136c:	c8 1e       	adc	r12, r24
    136e:	d9 1e       	adc	r13, r25
    1370:	d6 01       	movw	r26, r12
    1372:	c5 01       	movw	r24, r10
    1374:	82 1b       	sub	r24, r18
    1376:	93 0b       	sbc	r25, r19
    1378:	a4 0b       	sbc	r26, r20
    137a:	b5 0b       	sbc	r27, r21
    137c:	89 a7       	std	Y+41, r24	; 0x29
    137e:	9a a7       	std	Y+42, r25	; 0x2a
    1380:	ab a7       	std	Y+43, r26	; 0x2b
    1382:	bc a7       	std	Y+44, r27	; 0x2c
    1384:	d1 01       	movw	r26, r2
    1386:	99 27       	eor	r25, r25
    1388:	88 27       	eor	r24, r24
    138a:	64 01       	movw	r12, r8
    138c:	53 01       	movw	r10, r6
    138e:	a8 2a       	or	r10, r24
    1390:	b9 2a       	or	r11, r25
    1392:	ca 2a       	or	r12, r26
    1394:	db 2a       	or	r13, r27
    1396:	25 96       	adiw	r28, 0x05	; 5
    1398:	ac ae       	std	Y+60, r10	; 0x3c
    139a:	bd ae       	std	Y+61, r11	; 0x3d
    139c:	ce ae       	std	Y+62, r12	; 0x3e
    139e:	df ae       	std	Y+63, r13	; 0x3f
    13a0:	25 97       	sbiw	r28, 0x05	; 5
    13a2:	86 01       	movw	r16, r12
    13a4:	75 01       	movw	r14, r10
    13a6:	2f ef       	ldi	r18, 0xFF	; 255
    13a8:	3f ef       	ldi	r19, 0xFF	; 255
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	e2 22       	and	r14, r18
    13b0:	f3 22       	and	r15, r19
    13b2:	04 23       	and	r16, r20
    13b4:	15 23       	and	r17, r21
    13b6:	a6 01       	movw	r20, r12
    13b8:	66 27       	eor	r22, r22
    13ba:	77 27       	eor	r23, r23
    13bc:	ad 96       	adiw	r28, 0x2d	; 45
    13be:	4c af       	std	Y+60, r20	; 0x3c
    13c0:	5d af       	std	Y+61, r21	; 0x3d
    13c2:	6e af       	std	Y+62, r22	; 0x3e
    13c4:	7f af       	std	Y+63, r23	; 0x3f
    13c6:	ad 97       	sbiw	r28, 0x2d	; 45
    13c8:	a9 a8       	ldd	r10, Y+49	; 0x31
    13ca:	ba a8       	ldd	r11, Y+50	; 0x32
    13cc:	cb a8       	ldd	r12, Y+51	; 0x33
    13ce:	dc a8       	ldd	r13, Y+52	; 0x34
    13d0:	6f ef       	ldi	r22, 0xFF	; 255
    13d2:	7f ef       	ldi	r23, 0xFF	; 255
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a6 22       	and	r10, r22
    13da:	b7 22       	and	r11, r23
    13dc:	c8 22       	and	r12, r24
    13de:	d9 22       	and	r13, r25
    13e0:	89 a9       	ldd	r24, Y+49	; 0x31
    13e2:	9a a9       	ldd	r25, Y+50	; 0x32
    13e4:	ab a9       	ldd	r26, Y+51	; 0x33
    13e6:	bc a9       	ldd	r27, Y+52	; 0x34
    13e8:	1d 01       	movw	r2, r26
    13ea:	44 24       	eor	r4, r4
    13ec:	55 24       	eor	r5, r5
    13ee:	c8 01       	movw	r24, r16
    13f0:	b7 01       	movw	r22, r14
    13f2:	a6 01       	movw	r20, r12
    13f4:	95 01       	movw	r18, r10
    13f6:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    13fa:	a9 96       	adiw	r28, 0x29	; 41
    13fc:	6c af       	std	Y+60, r22	; 0x3c
    13fe:	7d af       	std	Y+61, r23	; 0x3d
    1400:	8e af       	std	Y+62, r24	; 0x3e
    1402:	9f af       	std	Y+63, r25	; 0x3f
    1404:	a9 97       	sbiw	r28, 0x29	; 41
    1406:	c8 01       	movw	r24, r16
    1408:	b7 01       	movw	r22, r14
    140a:	a2 01       	movw	r20, r4
    140c:	91 01       	movw	r18, r2
    140e:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    1412:	3b 01       	movw	r6, r22
    1414:	4c 01       	movw	r8, r24
    1416:	ad 96       	adiw	r28, 0x2d	; 45
    1418:	6c ad       	ldd	r22, Y+60	; 0x3c
    141a:	7d ad       	ldd	r23, Y+61	; 0x3d
    141c:	8e ad       	ldd	r24, Y+62	; 0x3e
    141e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1420:	ad 97       	sbiw	r28, 0x2d	; 45
    1422:	a6 01       	movw	r20, r12
    1424:	95 01       	movw	r18, r10
    1426:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    142a:	7b 01       	movw	r14, r22
    142c:	8c 01       	movw	r16, r24
    142e:	ad 96       	adiw	r28, 0x2d	; 45
    1430:	6c ad       	ldd	r22, Y+60	; 0x3c
    1432:	7d ad       	ldd	r23, Y+61	; 0x3d
    1434:	8e ad       	ldd	r24, Y+62	; 0x3e
    1436:	9f ad       	ldd	r25, Y+63	; 0x3f
    1438:	ad 97       	sbiw	r28, 0x2d	; 45
    143a:	a2 01       	movw	r20, r4
    143c:	91 01       	movw	r18, r2
    143e:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    1442:	5b 01       	movw	r10, r22
    1444:	6c 01       	movw	r12, r24
    1446:	a8 01       	movw	r20, r16
    1448:	97 01       	movw	r18, r14
    144a:	26 0d       	add	r18, r6
    144c:	37 1d       	adc	r19, r7
    144e:	48 1d       	adc	r20, r8
    1450:	59 1d       	adc	r21, r9
    1452:	a9 96       	adiw	r28, 0x29	; 41
    1454:	6c ac       	ldd	r6, Y+60	; 0x3c
    1456:	7d ac       	ldd	r7, Y+61	; 0x3d
    1458:	8e ac       	ldd	r8, Y+62	; 0x3e
    145a:	9f ac       	ldd	r9, Y+63	; 0x3f
    145c:	a9 97       	sbiw	r28, 0x29	; 41
    145e:	c4 01       	movw	r24, r8
    1460:	aa 27       	eor	r26, r26
    1462:	bb 27       	eor	r27, r27
    1464:	28 0f       	add	r18, r24
    1466:	39 1f       	adc	r19, r25
    1468:	4a 1f       	adc	r20, r26
    146a:	5b 1f       	adc	r21, r27
    146c:	2e 15       	cp	r18, r14
    146e:	3f 05       	cpc	r19, r15
    1470:	40 07       	cpc	r20, r16
    1472:	51 07       	cpc	r21, r17
    1474:	48 f4       	brcc	.+18     	; 0x1488 <__stack+0xc29>
    1476:	e1 2c       	mov	r14, r1
    1478:	f1 2c       	mov	r15, r1
    147a:	61 e0       	ldi	r22, 0x01	; 1
    147c:	06 2f       	mov	r16, r22
    147e:	11 2d       	mov	r17, r1
    1480:	ae 0c       	add	r10, r14
    1482:	bf 1c       	adc	r11, r15
    1484:	c0 1e       	adc	r12, r16
    1486:	d1 1e       	adc	r13, r17
    1488:	ca 01       	movw	r24, r20
    148a:	aa 27       	eor	r26, r26
    148c:	bb 27       	eor	r27, r27
    148e:	bc 01       	movw	r22, r24
    1490:	cd 01       	movw	r24, r26
    1492:	6a 0d       	add	r22, r10
    1494:	7b 1d       	adc	r23, r11
    1496:	8c 1d       	adc	r24, r12
    1498:	9d 1d       	adc	r25, r13
    149a:	69 a4       	ldd	r6, Y+41	; 0x29
    149c:	7a a4       	ldd	r7, Y+42	; 0x2a
    149e:	8b a4       	ldd	r8, Y+43	; 0x2b
    14a0:	9c a4       	ldd	r9, Y+44	; 0x2c
    14a2:	66 16       	cp	r6, r22
    14a4:	77 06       	cpc	r7, r23
    14a6:	88 06       	cpc	r8, r24
    14a8:	99 06       	cpc	r9, r25
    14aa:	50 f1       	brcs	.+84     	; 0x1500 <__stack+0xca1>
    14ac:	66 15       	cp	r22, r6
    14ae:	77 05       	cpc	r23, r7
    14b0:	88 05       	cpc	r24, r8
    14b2:	99 05       	cpc	r25, r9
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <__stack+0xc59>
    14b6:	4d c0       	rjmp	.+154    	; 0x1552 <__stack+0xcf3>
    14b8:	d9 01       	movw	r26, r18
    14ba:	99 27       	eor	r25, r25
    14bc:	88 27       	eor	r24, r24
    14be:	a9 96       	adiw	r28, 0x29	; 41
    14c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    14c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    14c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    14c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    14c8:	a9 97       	sbiw	r28, 0x29	; 41
    14ca:	40 70       	andi	r20, 0x00	; 0
    14cc:	50 70       	andi	r21, 0x00	; 0
    14ce:	82 0f       	add	r24, r18
    14d0:	93 1f       	adc	r25, r19
    14d2:	a4 1f       	adc	r26, r20
    14d4:	b5 1f       	adc	r27, r21
    14d6:	21 96       	adiw	r28, 0x01	; 1
    14d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    14da:	3d ad       	ldd	r19, Y+61	; 0x3d
    14dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    14de:	5f ad       	ldd	r21, Y+63	; 0x3f
    14e0:	21 97       	sbiw	r28, 0x01	; 1
    14e2:	e2 96       	adiw	r28, 0x32	; 50
    14e4:	0f ac       	ldd	r0, Y+63	; 0x3f
    14e6:	e2 97       	sbiw	r28, 0x32	; 50
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <__stack+0xc93>
    14ea:	22 0f       	add	r18, r18
    14ec:	33 1f       	adc	r19, r19
    14ee:	44 1f       	adc	r20, r20
    14f0:	55 1f       	adc	r21, r21
    14f2:	0a 94       	dec	r0
    14f4:	d2 f7       	brpl	.-12     	; 0x14ea <__stack+0xc8b>
    14f6:	28 17       	cp	r18, r24
    14f8:	39 07       	cpc	r19, r25
    14fa:	4a 07       	cpc	r20, r26
    14fc:	5b 07       	cpc	r21, r27
    14fe:	48 f5       	brcc	.+82     	; 0x1552 <__stack+0xcf3>
    1500:	25 96       	adiw	r28, 0x05	; 5
    1502:	0c ad       	ldd	r16, Y+60	; 0x3c
    1504:	1d ad       	ldd	r17, Y+61	; 0x3d
    1506:	2e ad       	ldd	r18, Y+62	; 0x3e
    1508:	3f ad       	ldd	r19, Y+63	; 0x3f
    150a:	25 97       	sbiw	r28, 0x05	; 5
    150c:	01 50       	subi	r16, 0x01	; 1
    150e:	10 40       	sbci	r17, 0x00	; 0
    1510:	20 40       	sbci	r18, 0x00	; 0
    1512:	30 40       	sbci	r19, 0x00	; 0
    1514:	25 96       	adiw	r28, 0x05	; 5
    1516:	0c af       	std	Y+60, r16	; 0x3c
    1518:	1d af       	std	Y+61, r17	; 0x3d
    151a:	2e af       	std	Y+62, r18	; 0x3e
    151c:	3f af       	std	Y+63, r19	; 0x3f
    151e:	25 97       	sbiw	r28, 0x05	; 5
    1520:	18 c0       	rjmp	.+48     	; 0x1552 <__stack+0xcf3>
    1522:	66 24       	eor	r6, r6
    1524:	77 24       	eor	r7, r7
    1526:	43 01       	movw	r8, r6
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	25 96       	adiw	r28, 0x05	; 5
    1532:	2c af       	std	Y+60, r18	; 0x3c
    1534:	3d af       	std	Y+61, r19	; 0x3d
    1536:	4e af       	std	Y+62, r20	; 0x3e
    1538:	5f af       	std	Y+63, r21	; 0x3f
    153a:	25 97       	sbiw	r28, 0x05	; 5
    153c:	0d c0       	rjmp	.+26     	; 0x1558 <__stack+0xcf9>
    153e:	66 24       	eor	r6, r6
    1540:	77 24       	eor	r7, r7
    1542:	43 01       	movw	r8, r6
    1544:	25 96       	adiw	r28, 0x05	; 5
    1546:	1c ae       	std	Y+60, r1	; 0x3c
    1548:	1d ae       	std	Y+61, r1	; 0x3d
    154a:	1e ae       	std	Y+62, r1	; 0x3e
    154c:	1f ae       	std	Y+63, r1	; 0x3f
    154e:	25 97       	sbiw	r28, 0x05	; 5
    1550:	03 c0       	rjmp	.+6      	; 0x1558 <__stack+0xcf9>
    1552:	66 24       	eor	r6, r6
    1554:	77 24       	eor	r7, r7
    1556:	43 01       	movw	r8, r6
    1558:	fe 01       	movw	r30, r28
    155a:	b1 96       	adiw	r30, 0x21	; 33
    155c:	88 e0       	ldi	r24, 0x08	; 8
    155e:	df 01       	movw	r26, r30
    1560:	1d 92       	st	X+, r1
    1562:	8a 95       	dec	r24
    1564:	e9 f7       	brne	.-6      	; 0x1560 <__stack+0xd01>
    1566:	25 96       	adiw	r28, 0x05	; 5
    1568:	ac ac       	ldd	r10, Y+60	; 0x3c
    156a:	bd ac       	ldd	r11, Y+61	; 0x3d
    156c:	ce ac       	ldd	r12, Y+62	; 0x3e
    156e:	df ac       	ldd	r13, Y+63	; 0x3f
    1570:	25 97       	sbiw	r28, 0x05	; 5
    1572:	a9 a2       	std	Y+33, r10	; 0x21
    1574:	ba a2       	std	Y+34, r11	; 0x22
    1576:	cb a2       	std	Y+35, r12	; 0x23
    1578:	dc a2       	std	Y+36, r13	; 0x24
    157a:	6d a2       	std	Y+37, r6	; 0x25
    157c:	7e a2       	std	Y+38, r7	; 0x26
    157e:	8f a2       	std	Y+39, r8	; 0x27
    1580:	98 a6       	std	Y+40, r9	; 0x28
    1582:	22 96       	adiw	r28, 0x02	; 2
    1584:	2f ad       	ldd	r18, Y+63	; 0x3f
    1586:	22 97       	sbiw	r28, 0x02	; 2
    1588:	3a a1       	ldd	r19, Y+34	; 0x22
    158a:	4b a1       	ldd	r20, Y+35	; 0x23
    158c:	5c a1       	ldd	r21, Y+36	; 0x24
    158e:	66 2d       	mov	r22, r6
    1590:	7e a1       	ldd	r23, Y+38	; 0x26
    1592:	df a0       	ldd	r13, Y+39	; 0x27
    1594:	98 a5       	ldd	r25, Y+40	; 0x28
    1596:	e1 96       	adiw	r28, 0x31	; 49
    1598:	ec ac       	ldd	r14, Y+60	; 0x3c
    159a:	fd ac       	ldd	r15, Y+61	; 0x3d
    159c:	0e ad       	ldd	r16, Y+62	; 0x3e
    159e:	1f ad       	ldd	r17, Y+63	; 0x3f
    15a0:	e1 97       	sbiw	r28, 0x31	; 49
    15a2:	e1 14       	cp	r14, r1
    15a4:	f1 04       	cpc	r15, r1
    15a6:	01 05       	cpc	r16, r1
    15a8:	11 05       	cpc	r17, r1
    15aa:	09 f4       	brne	.+2      	; 0x15ae <__stack+0xd4f>
    15ac:	56 c0       	rjmp	.+172    	; 0x165a <__stack+0xdfb>
    15ae:	21 95       	neg	r18
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	12 16       	cp	r1, r18
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <__stack+0xd59>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	31 95       	neg	r19
    15ba:	e1 e0       	ldi	r30, 0x01	; 1
    15bc:	13 16       	cp	r1, r19
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <__stack+0xd63>
    15c0:	e0 e0       	ldi	r30, 0x00	; 0
    15c2:	93 2e       	mov	r9, r19
    15c4:	98 1a       	sub	r9, r24
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	39 15       	cp	r19, r9
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <__stack+0xd6f>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	e8 2b       	or	r30, r24
    15d0:	41 95       	neg	r20
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	14 16       	cp	r1, r20
    15d6:	08 f0       	brcs	.+2      	; 0x15da <__stack+0xd7b>
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	a4 2e       	mov	r10, r20
    15dc:	ae 1a       	sub	r10, r30
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	4a 15       	cp	r20, r10
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <__stack+0xd87>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	f8 2b       	or	r31, r24
    15e8:	51 95       	neg	r21
    15ea:	e1 e0       	ldi	r30, 0x01	; 1
    15ec:	15 16       	cp	r1, r21
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <__stack+0xd93>
    15f0:	e0 e0       	ldi	r30, 0x00	; 0
    15f2:	b5 2e       	mov	r11, r21
    15f4:	bf 1a       	sub	r11, r31
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	5b 15       	cp	r21, r11
    15fa:	08 f0       	brcs	.+2      	; 0x15fe <__stack+0xd9f>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	e8 2b       	or	r30, r24
    1600:	61 95       	neg	r22
    1602:	f1 e0       	ldi	r31, 0x01	; 1
    1604:	16 16       	cp	r1, r22
    1606:	08 f0       	brcs	.+2      	; 0x160a <__stack+0xdab>
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	a6 2f       	mov	r26, r22
    160c:	ae 1b       	sub	r26, r30
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	6a 17       	cp	r22, r26
    1612:	08 f0       	brcs	.+2      	; 0x1616 <__stack+0xdb7>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	f8 2b       	or	r31, r24
    1618:	71 95       	neg	r23
    161a:	e1 e0       	ldi	r30, 0x01	; 1
    161c:	17 16       	cp	r1, r23
    161e:	08 f0       	brcs	.+2      	; 0x1622 <__stack+0xdc3>
    1620:	e0 e0       	ldi	r30, 0x00	; 0
    1622:	c7 2e       	mov	r12, r23
    1624:	cf 1a       	sub	r12, r31
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	7c 15       	cp	r23, r12
    162a:	08 f0       	brcs	.+2      	; 0x162e <__stack+0xdcf>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	e8 2b       	or	r30, r24
    1630:	8d 2d       	mov	r24, r13
    1632:	81 95       	neg	r24
    1634:	f1 e0       	ldi	r31, 0x01	; 1
    1636:	18 16       	cp	r1, r24
    1638:	08 f0       	brcs	.+2      	; 0x163c <__stack+0xddd>
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	d8 2e       	mov	r13, r24
    163e:	de 1a       	sub	r13, r30
    1640:	e1 e0       	ldi	r30, 0x01	; 1
    1642:	8d 15       	cp	r24, r13
    1644:	08 f0       	brcs	.+2      	; 0x1648 <__stack+0xde9>
    1646:	e0 e0       	ldi	r30, 0x00	; 0
    1648:	fe 2b       	or	r31, r30
    164a:	89 2f       	mov	r24, r25
    164c:	81 95       	neg	r24
    164e:	39 2d       	mov	r19, r9
    1650:	a5 01       	movw	r20, r10
    1652:	6a 2f       	mov	r22, r26
    1654:	7c 2d       	mov	r23, r12
    1656:	98 2f       	mov	r25, r24
    1658:	9f 1b       	sub	r25, r31
    165a:	8d 2d       	mov	r24, r13
    165c:	ce 58       	subi	r28, 0x8E	; 142
    165e:	df 4f       	sbci	r29, 0xFF	; 255
    1660:	e2 e1       	ldi	r30, 0x12	; 18
    1662:	0c 94 71 3e 	jmp	0x7ce2	; 0x7ce2 <__epilogue_restores__>

00001666 <__moddi3>:
    1666:	a7 e7       	ldi	r26, 0x77	; 119
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e9 e3       	ldi	r30, 0x39	; 57
    166c:	fb e0       	ldi	r31, 0x0B	; 11
    166e:	0c 94 55 3e 	jmp	0x7caa	; 0x7caa <__prologue_saves__>
    1672:	98 2e       	mov	r9, r24
    1674:	89 2e       	mov	r8, r25
    1676:	71 2e       	mov	r7, r17
    1678:	88 e0       	ldi	r24, 0x08	; 8
    167a:	fe 01       	movw	r30, r28
    167c:	31 96       	adiw	r30, 0x01	; 1
    167e:	df 01       	movw	r26, r30
    1680:	68 2e       	mov	r6, r24
    1682:	1d 92       	st	X+, r1
    1684:	6a 94       	dec	r6
    1686:	e9 f7       	brne	.-6      	; 0x1682 <__moddi3+0x1c>
    1688:	29 83       	std	Y+1, r18	; 0x01
    168a:	3a 83       	std	Y+2, r19	; 0x02
    168c:	4b 83       	std	Y+3, r20	; 0x03
    168e:	5c 83       	std	Y+4, r21	; 0x04
    1690:	6d 83       	std	Y+5, r22	; 0x05
    1692:	7e 83       	std	Y+6, r23	; 0x06
    1694:	9f 82       	std	Y+7, r9	; 0x07
    1696:	98 87       	std	Y+8, r25	; 0x08
    1698:	fe 01       	movw	r30, r28
    169a:	39 96       	adiw	r30, 0x09	; 9
    169c:	df 01       	movw	r26, r30
    169e:	1d 92       	st	X+, r1
    16a0:	8a 95       	dec	r24
    16a2:	e9 f7       	brne	.-6      	; 0x169e <__moddi3+0x38>
    16a4:	a9 86       	std	Y+9, r10	; 0x09
    16a6:	ba 86       	std	Y+10, r11	; 0x0a
    16a8:	cb 86       	std	Y+11, r12	; 0x0b
    16aa:	dc 86       	std	Y+12, r13	; 0x0c
    16ac:	ed 86       	std	Y+13, r14	; 0x0d
    16ae:	fe 86       	std	Y+14, r15	; 0x0e
    16b0:	0f 87       	std	Y+15, r16	; 0x0f
    16b2:	18 8b       	std	Y+16, r17	; 0x10
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	af 81       	ldd	r26, Y+7	; 0x07
    16ba:	b8 85       	ldd	r27, Y+8	; 0x08
    16bc:	b7 fd       	sbrc	r27, 7
    16be:	07 c0       	rjmp	.+14     	; 0x16ce <__moddi3+0x68>
    16c0:	e1 96       	adiw	r28, 0x31	; 49
    16c2:	1c ae       	std	Y+60, r1	; 0x3c
    16c4:	1d ae       	std	Y+61, r1	; 0x3d
    16c6:	1e ae       	std	Y+62, r1	; 0x3e
    16c8:	1f ae       	std	Y+63, r1	; 0x3f
    16ca:	e1 97       	sbiw	r28, 0x31	; 49
    16cc:	64 c0       	rjmp	.+200    	; 0x1796 <__moddi3+0x130>
    16ce:	21 95       	neg	r18
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	12 16       	cp	r1, r18
    16d4:	08 f0       	brcs	.+2      	; 0x16d8 <__moddi3+0x72>
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	31 95       	neg	r19
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	13 16       	cp	r1, r19
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <__moddi3+0x7c>
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	b3 2f       	mov	r27, r19
    16e4:	b8 1b       	sub	r27, r24
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	3b 17       	cp	r19, r27
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <__moddi3+0x88>
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	98 2b       	or	r25, r24
    16f0:	41 95       	neg	r20
    16f2:	31 e0       	ldi	r19, 0x01	; 1
    16f4:	14 16       	cp	r1, r20
    16f6:	08 f0       	brcs	.+2      	; 0x16fa <__moddi3+0x94>
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	a4 2f       	mov	r26, r20
    16fc:	a9 1b       	sub	r26, r25
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	4a 17       	cp	r20, r26
    1702:	08 f0       	brcs	.+2      	; 0x1706 <__moddi3+0xa0>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	38 2b       	or	r19, r24
    1708:	51 95       	neg	r21
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	15 16       	cp	r1, r21
    170e:	08 f0       	brcs	.+2      	; 0x1712 <__moddi3+0xac>
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	f5 2f       	mov	r31, r21
    1714:	f3 1b       	sub	r31, r19
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	5f 17       	cp	r21, r31
    171a:	08 f0       	brcs	.+2      	; 0x171e <__moddi3+0xb8>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	98 2b       	or	r25, r24
    1720:	61 95       	neg	r22
    1722:	31 e0       	ldi	r19, 0x01	; 1
    1724:	16 16       	cp	r1, r22
    1726:	08 f0       	brcs	.+2      	; 0x172a <__moddi3+0xc4>
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	e6 2f       	mov	r30, r22
    172c:	e9 1b       	sub	r30, r25
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	6e 17       	cp	r22, r30
    1732:	08 f0       	brcs	.+2      	; 0x1736 <__moddi3+0xd0>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	38 2b       	or	r19, r24
    1738:	71 95       	neg	r23
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	17 16       	cp	r1, r23
    173e:	08 f0       	brcs	.+2      	; 0x1742 <__moddi3+0xdc>
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	57 2f       	mov	r21, r23
    1744:	53 1b       	sub	r21, r19
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	75 17       	cp	r23, r21
    174a:	08 f0       	brcs	.+2      	; 0x174e <__moddi3+0xe8>
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	48 2b       	or	r20, r24
    1750:	89 2d       	mov	r24, r9
    1752:	81 95       	neg	r24
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	18 16       	cp	r1, r24
    1758:	08 f0       	brcs	.+2      	; 0x175c <__moddi3+0xf6>
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	68 2e       	mov	r6, r24
    175e:	64 1a       	sub	r6, r20
    1760:	46 2d       	mov	r20, r6
    1762:	31 e0       	ldi	r19, 0x01	; 1
    1764:	86 15       	cp	r24, r6
    1766:	08 f0       	brcs	.+2      	; 0x176a <__moddi3+0x104>
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	93 2b       	or	r25, r19
    176c:	88 2d       	mov	r24, r8
    176e:	81 95       	neg	r24
    1770:	89 1b       	sub	r24, r25
    1772:	29 83       	std	Y+1, r18	; 0x01
    1774:	ba 83       	std	Y+2, r27	; 0x02
    1776:	ab 83       	std	Y+3, r26	; 0x03
    1778:	fc 83       	std	Y+4, r31	; 0x04
    177a:	ed 83       	std	Y+5, r30	; 0x05
    177c:	5e 83       	std	Y+6, r21	; 0x06
    177e:	4f 83       	std	Y+7, r20	; 0x07
    1780:	88 87       	std	Y+8, r24	; 0x08
    1782:	2f ef       	ldi	r18, 0xFF	; 255
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f ef       	ldi	r20, 0xFF	; 255
    1788:	5f ef       	ldi	r21, 0xFF	; 255
    178a:	e1 96       	adiw	r28, 0x31	; 49
    178c:	2c af       	std	Y+60, r18	; 0x3c
    178e:	3d af       	std	Y+61, r19	; 0x3d
    1790:	4e af       	std	Y+62, r20	; 0x3e
    1792:	5f af       	std	Y+63, r21	; 0x3f
    1794:	e1 97       	sbiw	r28, 0x31	; 49
    1796:	8d 85       	ldd	r24, Y+13	; 0x0d
    1798:	9e 85       	ldd	r25, Y+14	; 0x0e
    179a:	af 85       	ldd	r26, Y+15	; 0x0f
    179c:	b8 89       	ldd	r27, Y+16	; 0x10
    179e:	b7 ff       	sbrs	r27, 7
    17a0:	5a c0       	rjmp	.+180    	; 0x1856 <__moddi3+0x1f0>
    17a2:	a1 94       	neg	r10
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	1a 14       	cp	r1, r10
    17a8:	08 f0       	brcs	.+2      	; 0x17ac <__moddi3+0x146>
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	b1 94       	neg	r11
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	1b 14       	cp	r1, r11
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <__moddi3+0x150>
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	6b 2d       	mov	r22, r11
    17b8:	68 1b       	sub	r22, r24
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	b6 16       	cp	r11, r22
    17be:	08 f0       	brcs	.+2      	; 0x17c2 <__moddi3+0x15c>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	98 2b       	or	r25, r24
    17c4:	c1 94       	neg	r12
    17c6:	21 e0       	ldi	r18, 0x01	; 1
    17c8:	1c 14       	cp	r1, r12
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <__moddi3+0x168>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	5c 2d       	mov	r21, r12
    17d0:	59 1b       	sub	r21, r25
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	c5 16       	cp	r12, r21
    17d6:	08 f0       	brcs	.+2      	; 0x17da <__moddi3+0x174>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	28 2b       	or	r18, r24
    17dc:	d1 94       	neg	r13
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	1d 14       	cp	r1, r13
    17e2:	08 f0       	brcs	.+2      	; 0x17e6 <__moddi3+0x180>
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	4d 2d       	mov	r20, r13
    17e8:	42 1b       	sub	r20, r18
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	d4 16       	cp	r13, r20
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <__moddi3+0x18c>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	98 2b       	or	r25, r24
    17f4:	e1 94       	neg	r14
    17f6:	21 e0       	ldi	r18, 0x01	; 1
    17f8:	1e 14       	cp	r1, r14
    17fa:	08 f0       	brcs	.+2      	; 0x17fe <__moddi3+0x198>
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	3e 2d       	mov	r19, r14
    1800:	39 1b       	sub	r19, r25
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	e3 16       	cp	r14, r19
    1806:	08 f0       	brcs	.+2      	; 0x180a <__moddi3+0x1a4>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	28 2b       	or	r18, r24
    180c:	f1 94       	neg	r15
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	1f 14       	cp	r1, r15
    1812:	08 f0       	brcs	.+2      	; 0x1816 <__moddi3+0x1b0>
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	7f 2d       	mov	r23, r15
    1818:	72 1b       	sub	r23, r18
    181a:	27 2f       	mov	r18, r23
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	f7 16       	cp	r15, r23
    1820:	08 f0       	brcs	.+2      	; 0x1824 <__moddi3+0x1be>
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	98 2b       	or	r25, r24
    1826:	01 95       	neg	r16
    1828:	11 e0       	ldi	r17, 0x01	; 1
    182a:	10 16       	cp	r1, r16
    182c:	08 f0       	brcs	.+2      	; 0x1830 <__moddi3+0x1ca>
    182e:	10 e0       	ldi	r17, 0x00	; 0
    1830:	80 2f       	mov	r24, r16
    1832:	89 1b       	sub	r24, r25
    1834:	98 2f       	mov	r25, r24
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	09 17       	cp	r16, r25
    183a:	08 f0       	brcs	.+2      	; 0x183e <__moddi3+0x1d8>
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	18 2b       	or	r17, r24
    1840:	87 2d       	mov	r24, r7
    1842:	81 95       	neg	r24
    1844:	81 1b       	sub	r24, r17
    1846:	a9 86       	std	Y+9, r10	; 0x09
    1848:	6a 87       	std	Y+10, r22	; 0x0a
    184a:	5b 87       	std	Y+11, r21	; 0x0b
    184c:	4c 87       	std	Y+12, r20	; 0x0c
    184e:	3d 87       	std	Y+13, r19	; 0x0d
    1850:	2e 87       	std	Y+14, r18	; 0x0e
    1852:	9f 87       	std	Y+15, r25	; 0x0f
    1854:	88 8b       	std	Y+16, r24	; 0x10
    1856:	99 81       	ldd	r25, Y+1	; 0x01
    1858:	2a 81       	ldd	r18, Y+2	; 0x02
    185a:	3b 81       	ldd	r19, Y+3	; 0x03
    185c:	4c 81       	ldd	r20, Y+4	; 0x04
    185e:	5d 81       	ldd	r21, Y+5	; 0x05
    1860:	6e 81       	ldd	r22, Y+6	; 0x06
    1862:	7f 81       	ldd	r23, Y+7	; 0x07
    1864:	a8 85       	ldd	r26, Y+8	; 0x08
    1866:	b9 85       	ldd	r27, Y+9	; 0x09
    1868:	1a 85       	ldd	r17, Y+10	; 0x0a
    186a:	0b 85       	ldd	r16, Y+11	; 0x0b
    186c:	fc 84       	ldd	r15, Y+12	; 0x0c
    186e:	ed 84       	ldd	r14, Y+13	; 0x0d
    1870:	de 84       	ldd	r13, Y+14	; 0x0e
    1872:	cf 84       	ldd	r12, Y+15	; 0x0f
    1874:	b8 88       	ldd	r11, Y+16	; 0x10
    1876:	88 e0       	ldi	r24, 0x08	; 8
    1878:	e9 e1       	ldi	r30, 0x19	; 25
    187a:	8e 2e       	mov	r8, r30
    187c:	91 2c       	mov	r9, r1
    187e:	8c 0e       	add	r8, r28
    1880:	9d 1e       	adc	r9, r29
    1882:	f4 01       	movw	r30, r8
    1884:	68 2e       	mov	r6, r24
    1886:	11 92       	st	Z+, r1
    1888:	6a 94       	dec	r6
    188a:	e9 f7       	brne	.-6      	; 0x1886 <__moddi3+0x220>
    188c:	99 8f       	std	Y+25, r25	; 0x19
    188e:	2a 8f       	std	Y+26, r18	; 0x1a
    1890:	3b 8f       	std	Y+27, r19	; 0x1b
    1892:	4c 8f       	std	Y+28, r20	; 0x1c
    1894:	5d 8f       	std	Y+29, r21	; 0x1d
    1896:	6e 8f       	std	Y+30, r22	; 0x1e
    1898:	7f 8f       	std	Y+31, r23	; 0x1f
    189a:	a8 a3       	std	Y+32, r26	; 0x20
    189c:	9e 01       	movw	r18, r28
    189e:	2f 5d       	subi	r18, 0xDF	; 223
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	f9 01       	movw	r30, r18
    18a4:	11 92       	st	Z+, r1
    18a6:	8a 95       	dec	r24
    18a8:	e9 f7       	brne	.-6      	; 0x18a4 <__moddi3+0x23e>
    18aa:	b9 a3       	std	Y+33, r27	; 0x21
    18ac:	1a a3       	std	Y+34, r17	; 0x22
    18ae:	0b a3       	std	Y+35, r16	; 0x23
    18b0:	fc a2       	std	Y+36, r15	; 0x24
    18b2:	ed a2       	std	Y+37, r14	; 0x25
    18b4:	de a2       	std	Y+38, r13	; 0x26
    18b6:	cf a2       	std	Y+39, r12	; 0x27
    18b8:	b8 a6       	std	Y+40, r11	; 0x28
    18ba:	29 a0       	ldd	r2, Y+33	; 0x21
    18bc:	3a a0       	ldd	r3, Y+34	; 0x22
    18be:	4b a0       	ldd	r4, Y+35	; 0x23
    18c0:	5c a0       	ldd	r5, Y+36	; 0x24
    18c2:	ad a0       	ldd	r10, Y+37	; 0x25
    18c4:	be a0       	ldd	r11, Y+38	; 0x26
    18c6:	cf a0       	ldd	r12, Y+39	; 0x27
    18c8:	d8 a4       	ldd	r13, Y+40	; 0x28
    18ca:	49 8d       	ldd	r20, Y+25	; 0x19
    18cc:	5a 8d       	ldd	r21, Y+26	; 0x1a
    18ce:	6b 8d       	ldd	r22, Y+27	; 0x1b
    18d0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    18d2:	e5 96       	adiw	r28, 0x35	; 53
    18d4:	4f af       	std	Y+63, r20	; 0x3f
    18d6:	e5 97       	sbiw	r28, 0x35	; 53
    18d8:	e6 96       	adiw	r28, 0x36	; 54
    18da:	5f af       	std	Y+63, r21	; 0x3f
    18dc:	e6 97       	sbiw	r28, 0x36	; 54
    18de:	e7 96       	adiw	r28, 0x37	; 55
    18e0:	6f af       	std	Y+63, r22	; 0x3f
    18e2:	e7 97       	sbiw	r28, 0x37	; 55
    18e4:	e8 96       	adiw	r28, 0x38	; 56
    18e6:	7f af       	std	Y+63, r23	; 0x3f
    18e8:	e8 97       	sbiw	r28, 0x38	; 56
    18ea:	e8 96       	adiw	r28, 0x38	; 56
    18ec:	6c ac       	ldd	r6, Y+60	; 0x3c
    18ee:	7d ac       	ldd	r7, Y+61	; 0x3d
    18f0:	8e ac       	ldd	r8, Y+62	; 0x3e
    18f2:	9f ac       	ldd	r9, Y+63	; 0x3f
    18f4:	e8 97       	sbiw	r28, 0x38	; 56
    18f6:	2d 96       	adiw	r28, 0x0d	; 13
    18f8:	6c ae       	std	Y+60, r6	; 0x3c
    18fa:	7d ae       	std	Y+61, r7	; 0x3d
    18fc:	8e ae       	std	Y+62, r8	; 0x3e
    18fe:	9f ae       	std	Y+63, r9	; 0x3f
    1900:	2d 97       	sbiw	r28, 0x0d	; 13
    1902:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1904:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1906:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1908:	38 a1       	ldd	r19, Y+32	; 0x20
    190a:	3c 01       	movw	r6, r24
    190c:	49 01       	movw	r8, r18
    190e:	61 96       	adiw	r28, 0x11	; 17
    1910:	6c ae       	std	Y+60, r6	; 0x3c
    1912:	7d ae       	std	Y+61, r7	; 0x3d
    1914:	8e ae       	std	Y+62, r8	; 0x3e
    1916:	9f ae       	std	Y+63, r9	; 0x3f
    1918:	61 97       	sbiw	r28, 0x11	; 17
    191a:	a1 14       	cp	r10, r1
    191c:	b1 04       	cpc	r11, r1
    191e:	c1 04       	cpc	r12, r1
    1920:	d1 04       	cpc	r13, r1
    1922:	09 f0       	breq	.+2      	; 0x1926 <__moddi3+0x2c0>
    1924:	28 c3       	rjmp	.+1616   	; 0x1f76 <__moddi3+0x910>
    1926:	62 14       	cp	r6, r2
    1928:	73 04       	cpc	r7, r3
    192a:	84 04       	cpc	r8, r4
    192c:	95 04       	cpc	r9, r5
    192e:	08 f0       	brcs	.+2      	; 0x1932 <__moddi3+0x2cc>
    1930:	0e c1       	rjmp	.+540    	; 0x1b4e <__moddi3+0x4e8>
    1932:	00 e0       	ldi	r16, 0x00	; 0
    1934:	20 16       	cp	r2, r16
    1936:	00 e0       	ldi	r16, 0x00	; 0
    1938:	30 06       	cpc	r3, r16
    193a:	01 e0       	ldi	r16, 0x01	; 1
    193c:	40 06       	cpc	r4, r16
    193e:	00 e0       	ldi	r16, 0x00	; 0
    1940:	50 06       	cpc	r5, r16
    1942:	88 f4       	brcc	.+34     	; 0x1966 <__moddi3+0x300>
    1944:	1f ef       	ldi	r17, 0xFF	; 255
    1946:	21 16       	cp	r2, r17
    1948:	31 04       	cpc	r3, r1
    194a:	41 04       	cpc	r4, r1
    194c:	51 04       	cpc	r5, r1
    194e:	39 f0       	breq	.+14     	; 0x195e <__moddi3+0x2f8>
    1950:	30 f0       	brcs	.+12     	; 0x195e <__moddi3+0x2f8>
    1952:	88 e0       	ldi	r24, 0x08	; 8
    1954:	e8 2e       	mov	r14, r24
    1956:	f1 2c       	mov	r15, r1
    1958:	01 2d       	mov	r16, r1
    195a:	11 2d       	mov	r17, r1
    195c:	18 c0       	rjmp	.+48     	; 0x198e <__moddi3+0x328>
    195e:	ee 24       	eor	r14, r14
    1960:	ff 24       	eor	r15, r15
    1962:	87 01       	movw	r16, r14
    1964:	14 c0       	rjmp	.+40     	; 0x198e <__moddi3+0x328>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	22 16       	cp	r2, r18
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	32 06       	cpc	r3, r18
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	42 06       	cpc	r4, r18
    1972:	21 e0       	ldi	r18, 0x01	; 1
    1974:	52 06       	cpc	r5, r18
    1976:	30 f0       	brcs	.+12     	; 0x1984 <__moddi3+0x31e>
    1978:	b8 e1       	ldi	r27, 0x18	; 24
    197a:	eb 2e       	mov	r14, r27
    197c:	f1 2c       	mov	r15, r1
    197e:	01 2d       	mov	r16, r1
    1980:	11 2d       	mov	r17, r1
    1982:	05 c0       	rjmp	.+10     	; 0x198e <__moddi3+0x328>
    1984:	a0 e1       	ldi	r26, 0x10	; 16
    1986:	ea 2e       	mov	r14, r26
    1988:	f1 2c       	mov	r15, r1
    198a:	01 2d       	mov	r16, r1
    198c:	11 2d       	mov	r17, r1
    198e:	d2 01       	movw	r26, r4
    1990:	c1 01       	movw	r24, r2
    1992:	0e 2c       	mov	r0, r14
    1994:	04 c0       	rjmp	.+8      	; 0x199e <__moddi3+0x338>
    1996:	b6 95       	lsr	r27
    1998:	a7 95       	ror	r26
    199a:	97 95       	ror	r25
    199c:	87 95       	ror	r24
    199e:	0a 94       	dec	r0
    19a0:	d2 f7       	brpl	.-12     	; 0x1996 <__moddi3+0x330>
    19a2:	8c 58       	subi	r24, 0x8C	; 140
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	dc 01       	movw	r26, r24
    19a8:	2c 91       	ld	r18, X
    19aa:	80 e2       	ldi	r24, 0x20	; 32
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a0 e0       	ldi	r26, 0x00	; 0
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	8e 19       	sub	r24, r14
    19b4:	9f 09       	sbc	r25, r15
    19b6:	a0 0b       	sbc	r26, r16
    19b8:	b1 0b       	sbc	r27, r17
    19ba:	5c 01       	movw	r10, r24
    19bc:	6d 01       	movw	r12, r26
    19be:	a2 1a       	sub	r10, r18
    19c0:	b1 08       	sbc	r11, r1
    19c2:	c1 08       	sbc	r12, r1
    19c4:	d1 08       	sbc	r13, r1
    19c6:	65 96       	adiw	r28, 0x15	; 21
    19c8:	ac ae       	std	Y+60, r10	; 0x3c
    19ca:	bd ae       	std	Y+61, r11	; 0x3d
    19cc:	ce ae       	std	Y+62, r12	; 0x3e
    19ce:	df ae       	std	Y+63, r13	; 0x3f
    19d0:	65 97       	sbiw	r28, 0x15	; 21
    19d2:	a1 14       	cp	r10, r1
    19d4:	b1 04       	cpc	r11, r1
    19d6:	c1 04       	cpc	r12, r1
    19d8:	d1 04       	cpc	r13, r1
    19da:	09 f4       	brne	.+2      	; 0x19de <__moddi3+0x378>
    19dc:	45 c0       	rjmp	.+138    	; 0x1a68 <__moddi3+0x402>
    19de:	62 96       	adiw	r28, 0x12	; 18
    19e0:	6f ad       	ldd	r22, Y+63	; 0x3f
    19e2:	62 97       	sbiw	r28, 0x12	; 18
    19e4:	06 2e       	mov	r0, r22
    19e6:	04 c0       	rjmp	.+8      	; 0x19f0 <__moddi3+0x38a>
    19e8:	22 0c       	add	r2, r2
    19ea:	33 1c       	adc	r3, r3
    19ec:	44 1c       	adc	r4, r4
    19ee:	55 1c       	adc	r5, r5
    19f0:	0a 94       	dec	r0
    19f2:	d2 f7       	brpl	.-12     	; 0x19e8 <__moddi3+0x382>
    19f4:	a4 01       	movw	r20, r8
    19f6:	93 01       	movw	r18, r6
    19f8:	06 2e       	mov	r0, r22
    19fa:	04 c0       	rjmp	.+8      	; 0x1a04 <__moddi3+0x39e>
    19fc:	22 0f       	add	r18, r18
    19fe:	33 1f       	adc	r19, r19
    1a00:	44 1f       	adc	r20, r20
    1a02:	55 1f       	adc	r21, r21
    1a04:	0a 94       	dec	r0
    1a06:	d2 f7       	brpl	.-12     	; 0x19fc <__moddi3+0x396>
    1a08:	80 e2       	ldi	r24, 0x20	; 32
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	8a 19       	sub	r24, r10
    1a0e:	9b 09       	sbc	r25, r11
    1a10:	e8 96       	adiw	r28, 0x38	; 56
    1a12:	cc ac       	ldd	r12, Y+60	; 0x3c
    1a14:	dd ac       	ldd	r13, Y+61	; 0x3d
    1a16:	ee ac       	ldd	r14, Y+62	; 0x3e
    1a18:	ff ac       	ldd	r15, Y+63	; 0x3f
    1a1a:	e8 97       	sbiw	r28, 0x38	; 56
    1a1c:	04 c0       	rjmp	.+8      	; 0x1a26 <__moddi3+0x3c0>
    1a1e:	f6 94       	lsr	r15
    1a20:	e7 94       	ror	r14
    1a22:	d7 94       	ror	r13
    1a24:	c7 94       	ror	r12
    1a26:	8a 95       	dec	r24
    1a28:	d2 f7       	brpl	.-12     	; 0x1a1e <__moddi3+0x3b8>
    1a2a:	87 01       	movw	r16, r14
    1a2c:	76 01       	movw	r14, r12
    1a2e:	e2 2a       	or	r14, r18
    1a30:	f3 2a       	or	r15, r19
    1a32:	04 2b       	or	r16, r20
    1a34:	15 2b       	or	r17, r21
    1a36:	61 96       	adiw	r28, 0x11	; 17
    1a38:	ec ae       	std	Y+60, r14	; 0x3c
    1a3a:	fd ae       	std	Y+61, r15	; 0x3d
    1a3c:	0e af       	std	Y+62, r16	; 0x3e
    1a3e:	1f af       	std	Y+63, r17	; 0x3f
    1a40:	61 97       	sbiw	r28, 0x11	; 17
    1a42:	e8 96       	adiw	r28, 0x38	; 56
    1a44:	0c ad       	ldd	r16, Y+60	; 0x3c
    1a46:	1d ad       	ldd	r17, Y+61	; 0x3d
    1a48:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a4a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a4c:	e8 97       	sbiw	r28, 0x38	; 56
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <__moddi3+0x3f2>
    1a50:	00 0f       	add	r16, r16
    1a52:	11 1f       	adc	r17, r17
    1a54:	22 1f       	adc	r18, r18
    1a56:	33 1f       	adc	r19, r19
    1a58:	6a 95       	dec	r22
    1a5a:	d2 f7       	brpl	.-12     	; 0x1a50 <__moddi3+0x3ea>
    1a5c:	2d 96       	adiw	r28, 0x0d	; 13
    1a5e:	0c af       	std	Y+60, r16	; 0x3c
    1a60:	1d af       	std	Y+61, r17	; 0x3d
    1a62:	2e af       	std	Y+62, r18	; 0x3e
    1a64:	3f af       	std	Y+63, r19	; 0x3f
    1a66:	2d 97       	sbiw	r28, 0x0d	; 13
    1a68:	32 01       	movw	r6, r4
    1a6a:	88 24       	eor	r8, r8
    1a6c:	99 24       	eor	r9, r9
    1a6e:	a2 01       	movw	r20, r4
    1a70:	91 01       	movw	r18, r2
    1a72:	40 70       	andi	r20, 0x00	; 0
    1a74:	50 70       	andi	r21, 0x00	; 0
    1a76:	69 96       	adiw	r28, 0x19	; 25
    1a78:	2c af       	std	Y+60, r18	; 0x3c
    1a7a:	3d af       	std	Y+61, r19	; 0x3d
    1a7c:	4e af       	std	Y+62, r20	; 0x3e
    1a7e:	5f af       	std	Y+63, r21	; 0x3f
    1a80:	69 97       	sbiw	r28, 0x19	; 25
    1a82:	61 96       	adiw	r28, 0x11	; 17
    1a84:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a86:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a88:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a8c:	61 97       	sbiw	r28, 0x11	; 17
    1a8e:	a4 01       	movw	r20, r8
    1a90:	93 01       	movw	r18, r6
    1a92:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1a96:	7b 01       	movw	r14, r22
    1a98:	8c 01       	movw	r16, r24
    1a9a:	61 96       	adiw	r28, 0x11	; 17
    1a9c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a9e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1aa0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1aa2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aa4:	61 97       	sbiw	r28, 0x11	; 17
    1aa6:	a4 01       	movw	r20, r8
    1aa8:	93 01       	movw	r18, r6
    1aaa:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1aae:	ca 01       	movw	r24, r20
    1ab0:	b9 01       	movw	r22, r18
    1ab2:	69 96       	adiw	r28, 0x19	; 25
    1ab4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ab6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ab8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1aba:	5f ad       	ldd	r21, Y+63	; 0x3f
    1abc:	69 97       	sbiw	r28, 0x19	; 25
    1abe:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    1ac2:	9b 01       	movw	r18, r22
    1ac4:	ac 01       	movw	r20, r24
    1ac6:	87 01       	movw	r16, r14
    1ac8:	ff 24       	eor	r15, r15
    1aca:	ee 24       	eor	r14, r14
    1acc:	2d 96       	adiw	r28, 0x0d	; 13
    1ace:	ac ac       	ldd	r10, Y+60	; 0x3c
    1ad0:	bd ac       	ldd	r11, Y+61	; 0x3d
    1ad2:	ce ac       	ldd	r12, Y+62	; 0x3e
    1ad4:	df ac       	ldd	r13, Y+63	; 0x3f
    1ad6:	2d 97       	sbiw	r28, 0x0d	; 13
    1ad8:	c6 01       	movw	r24, r12
    1ada:	aa 27       	eor	r26, r26
    1adc:	bb 27       	eor	r27, r27
    1ade:	57 01       	movw	r10, r14
    1ae0:	68 01       	movw	r12, r16
    1ae2:	a8 2a       	or	r10, r24
    1ae4:	b9 2a       	or	r11, r25
    1ae6:	ca 2a       	or	r12, r26
    1ae8:	db 2a       	or	r13, r27
    1aea:	a2 16       	cp	r10, r18
    1aec:	b3 06       	cpc	r11, r19
    1aee:	c4 06       	cpc	r12, r20
    1af0:	d5 06       	cpc	r13, r21
    1af2:	90 f4       	brcc	.+36     	; 0x1b18 <__moddi3+0x4b2>
    1af4:	a2 0c       	add	r10, r2
    1af6:	b3 1c       	adc	r11, r3
    1af8:	c4 1c       	adc	r12, r4
    1afa:	d5 1c       	adc	r13, r5
    1afc:	a2 14       	cp	r10, r2
    1afe:	b3 04       	cpc	r11, r3
    1b00:	c4 04       	cpc	r12, r4
    1b02:	d5 04       	cpc	r13, r5
    1b04:	48 f0       	brcs	.+18     	; 0x1b18 <__moddi3+0x4b2>
    1b06:	a2 16       	cp	r10, r18
    1b08:	b3 06       	cpc	r11, r19
    1b0a:	c4 06       	cpc	r12, r20
    1b0c:	d5 06       	cpc	r13, r21
    1b0e:	20 f4       	brcc	.+8      	; 0x1b18 <__moddi3+0x4b2>
    1b10:	a2 0c       	add	r10, r2
    1b12:	b3 1c       	adc	r11, r3
    1b14:	c4 1c       	adc	r12, r4
    1b16:	d5 1c       	adc	r13, r5
    1b18:	a2 1a       	sub	r10, r18
    1b1a:	b3 0a       	sbc	r11, r19
    1b1c:	c4 0a       	sbc	r12, r20
    1b1e:	d5 0a       	sbc	r13, r21
    1b20:	c6 01       	movw	r24, r12
    1b22:	b5 01       	movw	r22, r10
    1b24:	a4 01       	movw	r20, r8
    1b26:	93 01       	movw	r18, r6
    1b28:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1b2c:	7b 01       	movw	r14, r22
    1b2e:	8c 01       	movw	r16, r24
    1b30:	c6 01       	movw	r24, r12
    1b32:	b5 01       	movw	r22, r10
    1b34:	a4 01       	movw	r20, r8
    1b36:	93 01       	movw	r18, r6
    1b38:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1b3c:	ca 01       	movw	r24, r20
    1b3e:	b9 01       	movw	r22, r18
    1b40:	69 96       	adiw	r28, 0x19	; 25
    1b42:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b44:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b46:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b48:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b4a:	69 97       	sbiw	r28, 0x19	; 25
    1b4c:	c8 c1       	rjmp	.+912    	; 0x1ede <__moddi3+0x878>
    1b4e:	21 14       	cp	r2, r1
    1b50:	31 04       	cpc	r3, r1
    1b52:	41 04       	cpc	r4, r1
    1b54:	51 04       	cpc	r5, r1
    1b56:	71 f4       	brne	.+28     	; 0x1b74 <__moddi3+0x50e>
    1b58:	61 e0       	ldi	r22, 0x01	; 1
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1b6c:	c9 01       	movw	r24, r18
    1b6e:	da 01       	movw	r26, r20
    1b70:	1c 01       	movw	r2, r24
    1b72:	2d 01       	movw	r4, r26
    1b74:	00 e0       	ldi	r16, 0x00	; 0
    1b76:	20 16       	cp	r2, r16
    1b78:	00 e0       	ldi	r16, 0x00	; 0
    1b7a:	30 06       	cpc	r3, r16
    1b7c:	01 e0       	ldi	r16, 0x01	; 1
    1b7e:	40 06       	cpc	r4, r16
    1b80:	00 e0       	ldi	r16, 0x00	; 0
    1b82:	50 06       	cpc	r5, r16
    1b84:	88 f4       	brcc	.+34     	; 0x1ba8 <__moddi3+0x542>
    1b86:	1f ef       	ldi	r17, 0xFF	; 255
    1b88:	21 16       	cp	r2, r17
    1b8a:	31 04       	cpc	r3, r1
    1b8c:	41 04       	cpc	r4, r1
    1b8e:	51 04       	cpc	r5, r1
    1b90:	39 f0       	breq	.+14     	; 0x1ba0 <__moddi3+0x53a>
    1b92:	30 f0       	brcs	.+12     	; 0x1ba0 <__moddi3+0x53a>
    1b94:	68 e0       	ldi	r22, 0x08	; 8
    1b96:	e6 2e       	mov	r14, r22
    1b98:	f1 2c       	mov	r15, r1
    1b9a:	01 2d       	mov	r16, r1
    1b9c:	11 2d       	mov	r17, r1
    1b9e:	18 c0       	rjmp	.+48     	; 0x1bd0 <__moddi3+0x56a>
    1ba0:	ee 24       	eor	r14, r14
    1ba2:	ff 24       	eor	r15, r15
    1ba4:	87 01       	movw	r16, r14
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <__moddi3+0x56a>
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	22 16       	cp	r2, r18
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	32 06       	cpc	r3, r18
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	42 06       	cpc	r4, r18
    1bb4:	21 e0       	ldi	r18, 0x01	; 1
    1bb6:	52 06       	cpc	r5, r18
    1bb8:	30 f0       	brcs	.+12     	; 0x1bc6 <__moddi3+0x560>
    1bba:	58 e1       	ldi	r21, 0x18	; 24
    1bbc:	e5 2e       	mov	r14, r21
    1bbe:	f1 2c       	mov	r15, r1
    1bc0:	01 2d       	mov	r16, r1
    1bc2:	11 2d       	mov	r17, r1
    1bc4:	05 c0       	rjmp	.+10     	; 0x1bd0 <__moddi3+0x56a>
    1bc6:	40 e1       	ldi	r20, 0x10	; 16
    1bc8:	e4 2e       	mov	r14, r20
    1bca:	f1 2c       	mov	r15, r1
    1bcc:	01 2d       	mov	r16, r1
    1bce:	11 2d       	mov	r17, r1
    1bd0:	d2 01       	movw	r26, r4
    1bd2:	c1 01       	movw	r24, r2
    1bd4:	0e 2c       	mov	r0, r14
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <__moddi3+0x57a>
    1bd8:	b6 95       	lsr	r27
    1bda:	a7 95       	ror	r26
    1bdc:	97 95       	ror	r25
    1bde:	87 95       	ror	r24
    1be0:	0a 94       	dec	r0
    1be2:	d2 f7       	brpl	.-12     	; 0x1bd8 <__moddi3+0x572>
    1be4:	8c 58       	subi	r24, 0x8C	; 140
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	dc 01       	movw	r26, r24
    1bea:	2c 91       	ld	r18, X
    1bec:	30 e2       	ldi	r19, 0x20	; 32
    1bee:	a3 2e       	mov	r10, r19
    1bf0:	b1 2c       	mov	r11, r1
    1bf2:	c1 2c       	mov	r12, r1
    1bf4:	d1 2c       	mov	r13, r1
    1bf6:	d6 01       	movw	r26, r12
    1bf8:	c5 01       	movw	r24, r10
    1bfa:	8e 19       	sub	r24, r14
    1bfc:	9f 09       	sbc	r25, r15
    1bfe:	a0 0b       	sbc	r26, r16
    1c00:	b1 0b       	sbc	r27, r17
    1c02:	7c 01       	movw	r14, r24
    1c04:	8d 01       	movw	r16, r26
    1c06:	e2 1a       	sub	r14, r18
    1c08:	f1 08       	sbc	r15, r1
    1c0a:	01 09       	sbc	r16, r1
    1c0c:	11 09       	sbc	r17, r1
    1c0e:	65 96       	adiw	r28, 0x15	; 21
    1c10:	ec ae       	std	Y+60, r14	; 0x3c
    1c12:	fd ae       	std	Y+61, r15	; 0x3d
    1c14:	0e af       	std	Y+62, r16	; 0x3e
    1c16:	1f af       	std	Y+63, r17	; 0x3f
    1c18:	65 97       	sbiw	r28, 0x15	; 21
    1c1a:	e1 14       	cp	r14, r1
    1c1c:	f1 04       	cpc	r15, r1
    1c1e:	01 05       	cpc	r16, r1
    1c20:	11 05       	cpc	r17, r1
    1c22:	39 f4       	brne	.+14     	; 0x1c32 <__moddi3+0x5cc>
    1c24:	64 01       	movw	r12, r8
    1c26:	53 01       	movw	r10, r6
    1c28:	a2 18       	sub	r10, r2
    1c2a:	b3 08       	sbc	r11, r3
    1c2c:	c4 08       	sbc	r12, r4
    1c2e:	d5 08       	sbc	r13, r5
    1c30:	ec c0       	rjmp	.+472    	; 0x1e0a <__moddi3+0x7a4>
    1c32:	62 96       	adiw	r28, 0x12	; 18
    1c34:	ff ac       	ldd	r15, Y+63	; 0x3f
    1c36:	62 97       	sbiw	r28, 0x12	; 18
    1c38:	e4 96       	adiw	r28, 0x34	; 52
    1c3a:	ff ae       	std	Y+63, r15	; 0x3f
    1c3c:	e4 97       	sbiw	r28, 0x34	; 52
    1c3e:	0f 2c       	mov	r0, r15
    1c40:	04 c0       	rjmp	.+8      	; 0x1c4a <__moddi3+0x5e4>
    1c42:	22 0c       	add	r2, r2
    1c44:	33 1c       	adc	r3, r3
    1c46:	44 1c       	adc	r4, r4
    1c48:	55 1c       	adc	r5, r5
    1c4a:	0a 94       	dec	r0
    1c4c:	d2 f7       	brpl	.-12     	; 0x1c42 <__moddi3+0x5dc>
    1c4e:	8a 2d       	mov	r24, r10
    1c50:	8f 19       	sub	r24, r15
    1c52:	64 01       	movw	r12, r8
    1c54:	53 01       	movw	r10, r6
    1c56:	08 2e       	mov	r0, r24
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <__moddi3+0x5fc>
    1c5a:	d6 94       	lsr	r13
    1c5c:	c7 94       	ror	r12
    1c5e:	b7 94       	ror	r11
    1c60:	a7 94       	ror	r10
    1c62:	0a 94       	dec	r0
    1c64:	d2 f7       	brpl	.-12     	; 0x1c5a <__moddi3+0x5f4>
    1c66:	a4 01       	movw	r20, r8
    1c68:	93 01       	movw	r18, r6
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <__moddi3+0x60e>
    1c6c:	22 0f       	add	r18, r18
    1c6e:	33 1f       	adc	r19, r19
    1c70:	44 1f       	adc	r20, r20
    1c72:	55 1f       	adc	r21, r21
    1c74:	fa 94       	dec	r15
    1c76:	d2 f7       	brpl	.-12     	; 0x1c6c <__moddi3+0x606>
    1c78:	e8 96       	adiw	r28, 0x38	; 56
    1c7a:	6c ac       	ldd	r6, Y+60	; 0x3c
    1c7c:	7d ac       	ldd	r7, Y+61	; 0x3d
    1c7e:	8e ac       	ldd	r8, Y+62	; 0x3e
    1c80:	9f ac       	ldd	r9, Y+63	; 0x3f
    1c82:	e8 97       	sbiw	r28, 0x38	; 56
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <__moddi3+0x628>
    1c86:	96 94       	lsr	r9
    1c88:	87 94       	ror	r8
    1c8a:	77 94       	ror	r7
    1c8c:	67 94       	ror	r6
    1c8e:	8a 95       	dec	r24
    1c90:	d2 f7       	brpl	.-12     	; 0x1c86 <__moddi3+0x620>
    1c92:	84 01       	movw	r16, r8
    1c94:	73 01       	movw	r14, r6
    1c96:	e2 2a       	or	r14, r18
    1c98:	f3 2a       	or	r15, r19
    1c9a:	04 2b       	or	r16, r20
    1c9c:	15 2b       	or	r17, r21
    1c9e:	29 96       	adiw	r28, 0x09	; 9
    1ca0:	ec ae       	std	Y+60, r14	; 0x3c
    1ca2:	fd ae       	std	Y+61, r15	; 0x3d
    1ca4:	0e af       	std	Y+62, r16	; 0x3e
    1ca6:	1f af       	std	Y+63, r17	; 0x3f
    1ca8:	29 97       	sbiw	r28, 0x09	; 9
    1caa:	32 01       	movw	r6, r4
    1cac:	88 24       	eor	r8, r8
    1cae:	99 24       	eor	r9, r9
    1cb0:	92 01       	movw	r18, r4
    1cb2:	81 01       	movw	r16, r2
    1cb4:	20 70       	andi	r18, 0x00	; 0
    1cb6:	30 70       	andi	r19, 0x00	; 0
    1cb8:	6d 96       	adiw	r28, 0x1d	; 29
    1cba:	0c af       	std	Y+60, r16	; 0x3c
    1cbc:	1d af       	std	Y+61, r17	; 0x3d
    1cbe:	2e af       	std	Y+62, r18	; 0x3e
    1cc0:	3f af       	std	Y+63, r19	; 0x3f
    1cc2:	6d 97       	sbiw	r28, 0x1d	; 29
    1cc4:	c6 01       	movw	r24, r12
    1cc6:	b5 01       	movw	r22, r10
    1cc8:	a4 01       	movw	r20, r8
    1cca:	93 01       	movw	r18, r6
    1ccc:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1cd0:	7b 01       	movw	r14, r22
    1cd2:	8c 01       	movw	r16, r24
    1cd4:	c6 01       	movw	r24, r12
    1cd6:	b5 01       	movw	r22, r10
    1cd8:	a4 01       	movw	r20, r8
    1cda:	93 01       	movw	r18, r6
    1cdc:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1ce0:	ca 01       	movw	r24, r20
    1ce2:	b9 01       	movw	r22, r18
    1ce4:	6d 96       	adiw	r28, 0x1d	; 29
    1ce6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ce8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cea:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cec:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cee:	6d 97       	sbiw	r28, 0x1d	; 29
    1cf0:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    1cf4:	9b 01       	movw	r18, r22
    1cf6:	ac 01       	movw	r20, r24
    1cf8:	87 01       	movw	r16, r14
    1cfa:	ff 24       	eor	r15, r15
    1cfc:	ee 24       	eor	r14, r14
    1cfe:	29 96       	adiw	r28, 0x09	; 9
    1d00:	ac ac       	ldd	r10, Y+60	; 0x3c
    1d02:	bd ac       	ldd	r11, Y+61	; 0x3d
    1d04:	ce ac       	ldd	r12, Y+62	; 0x3e
    1d06:	df ac       	ldd	r13, Y+63	; 0x3f
    1d08:	29 97       	sbiw	r28, 0x09	; 9
    1d0a:	c6 01       	movw	r24, r12
    1d0c:	aa 27       	eor	r26, r26
    1d0e:	bb 27       	eor	r27, r27
    1d10:	5c 01       	movw	r10, r24
    1d12:	6d 01       	movw	r12, r26
    1d14:	ae 28       	or	r10, r14
    1d16:	bf 28       	or	r11, r15
    1d18:	c0 2a       	or	r12, r16
    1d1a:	d1 2a       	or	r13, r17
    1d1c:	a2 16       	cp	r10, r18
    1d1e:	b3 06       	cpc	r11, r19
    1d20:	c4 06       	cpc	r12, r20
    1d22:	d5 06       	cpc	r13, r21
    1d24:	90 f4       	brcc	.+36     	; 0x1d4a <__moddi3+0x6e4>
    1d26:	a2 0c       	add	r10, r2
    1d28:	b3 1c       	adc	r11, r3
    1d2a:	c4 1c       	adc	r12, r4
    1d2c:	d5 1c       	adc	r13, r5
    1d2e:	a2 14       	cp	r10, r2
    1d30:	b3 04       	cpc	r11, r3
    1d32:	c4 04       	cpc	r12, r4
    1d34:	d5 04       	cpc	r13, r5
    1d36:	48 f0       	brcs	.+18     	; 0x1d4a <__moddi3+0x6e4>
    1d38:	a2 16       	cp	r10, r18
    1d3a:	b3 06       	cpc	r11, r19
    1d3c:	c4 06       	cpc	r12, r20
    1d3e:	d5 06       	cpc	r13, r21
    1d40:	20 f4       	brcc	.+8      	; 0x1d4a <__moddi3+0x6e4>
    1d42:	a2 0c       	add	r10, r2
    1d44:	b3 1c       	adc	r11, r3
    1d46:	c4 1c       	adc	r12, r4
    1d48:	d5 1c       	adc	r13, r5
    1d4a:	a2 1a       	sub	r10, r18
    1d4c:	b3 0a       	sbc	r11, r19
    1d4e:	c4 0a       	sbc	r12, r20
    1d50:	d5 0a       	sbc	r13, r21
    1d52:	c6 01       	movw	r24, r12
    1d54:	b5 01       	movw	r22, r10
    1d56:	a4 01       	movw	r20, r8
    1d58:	93 01       	movw	r18, r6
    1d5a:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1d5e:	7b 01       	movw	r14, r22
    1d60:	8c 01       	movw	r16, r24
    1d62:	c6 01       	movw	r24, r12
    1d64:	b5 01       	movw	r22, r10
    1d66:	a4 01       	movw	r20, r8
    1d68:	93 01       	movw	r18, r6
    1d6a:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1d6e:	ca 01       	movw	r24, r20
    1d70:	b9 01       	movw	r22, r18
    1d72:	6d 96       	adiw	r28, 0x1d	; 29
    1d74:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d76:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d78:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d7a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d7c:	6d 97       	sbiw	r28, 0x1d	; 29
    1d7e:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    1d82:	9b 01       	movw	r18, r22
    1d84:	ac 01       	movw	r20, r24
    1d86:	87 01       	movw	r16, r14
    1d88:	ff 24       	eor	r15, r15
    1d8a:	ee 24       	eor	r14, r14
    1d8c:	29 96       	adiw	r28, 0x09	; 9
    1d8e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d90:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d92:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d94:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d96:	29 97       	sbiw	r28, 0x09	; 9
    1d98:	a0 70       	andi	r26, 0x00	; 0
    1d9a:	b0 70       	andi	r27, 0x00	; 0
    1d9c:	57 01       	movw	r10, r14
    1d9e:	68 01       	movw	r12, r16
    1da0:	a8 2a       	or	r10, r24
    1da2:	b9 2a       	or	r11, r25
    1da4:	ca 2a       	or	r12, r26
    1da6:	db 2a       	or	r13, r27
    1da8:	a2 16       	cp	r10, r18
    1daa:	b3 06       	cpc	r11, r19
    1dac:	c4 06       	cpc	r12, r20
    1dae:	d5 06       	cpc	r13, r21
    1db0:	90 f4       	brcc	.+36     	; 0x1dd6 <__moddi3+0x770>
    1db2:	a2 0c       	add	r10, r2
    1db4:	b3 1c       	adc	r11, r3
    1db6:	c4 1c       	adc	r12, r4
    1db8:	d5 1c       	adc	r13, r5
    1dba:	a2 14       	cp	r10, r2
    1dbc:	b3 04       	cpc	r11, r3
    1dbe:	c4 04       	cpc	r12, r4
    1dc0:	d5 04       	cpc	r13, r5
    1dc2:	48 f0       	brcs	.+18     	; 0x1dd6 <__moddi3+0x770>
    1dc4:	a2 16       	cp	r10, r18
    1dc6:	b3 06       	cpc	r11, r19
    1dc8:	c4 06       	cpc	r12, r20
    1dca:	d5 06       	cpc	r13, r21
    1dcc:	20 f4       	brcc	.+8      	; 0x1dd6 <__moddi3+0x770>
    1dce:	a2 0c       	add	r10, r2
    1dd0:	b3 1c       	adc	r11, r3
    1dd2:	c4 1c       	adc	r12, r4
    1dd4:	d5 1c       	adc	r13, r5
    1dd6:	e8 96       	adiw	r28, 0x38	; 56
    1dd8:	ec ac       	ldd	r14, Y+60	; 0x3c
    1dda:	fd ac       	ldd	r15, Y+61	; 0x3d
    1ddc:	0e ad       	ldd	r16, Y+62	; 0x3e
    1dde:	1f ad       	ldd	r17, Y+63	; 0x3f
    1de0:	e8 97       	sbiw	r28, 0x38	; 56
    1de2:	e4 96       	adiw	r28, 0x34	; 52
    1de4:	0f ac       	ldd	r0, Y+63	; 0x3f
    1de6:	e4 97       	sbiw	r28, 0x34	; 52
    1de8:	04 c0       	rjmp	.+8      	; 0x1df2 <__moddi3+0x78c>
    1dea:	ee 0c       	add	r14, r14
    1dec:	ff 1c       	adc	r15, r15
    1dee:	00 1f       	adc	r16, r16
    1df0:	11 1f       	adc	r17, r17
    1df2:	0a 94       	dec	r0
    1df4:	d2 f7       	brpl	.-12     	; 0x1dea <__moddi3+0x784>
    1df6:	2d 96       	adiw	r28, 0x0d	; 13
    1df8:	ec ae       	std	Y+60, r14	; 0x3c
    1dfa:	fd ae       	std	Y+61, r15	; 0x3d
    1dfc:	0e af       	std	Y+62, r16	; 0x3e
    1dfe:	1f af       	std	Y+63, r17	; 0x3f
    1e00:	2d 97       	sbiw	r28, 0x0d	; 13
    1e02:	a2 1a       	sub	r10, r18
    1e04:	b3 0a       	sbc	r11, r19
    1e06:	c4 0a       	sbc	r12, r20
    1e08:	d5 0a       	sbc	r13, r21
    1e0a:	32 01       	movw	r6, r4
    1e0c:	88 24       	eor	r8, r8
    1e0e:	99 24       	eor	r9, r9
    1e10:	92 01       	movw	r18, r4
    1e12:	81 01       	movw	r16, r2
    1e14:	20 70       	andi	r18, 0x00	; 0
    1e16:	30 70       	andi	r19, 0x00	; 0
    1e18:	a1 96       	adiw	r28, 0x21	; 33
    1e1a:	0c af       	std	Y+60, r16	; 0x3c
    1e1c:	1d af       	std	Y+61, r17	; 0x3d
    1e1e:	2e af       	std	Y+62, r18	; 0x3e
    1e20:	3f af       	std	Y+63, r19	; 0x3f
    1e22:	a1 97       	sbiw	r28, 0x21	; 33
    1e24:	c6 01       	movw	r24, r12
    1e26:	b5 01       	movw	r22, r10
    1e28:	a4 01       	movw	r20, r8
    1e2a:	93 01       	movw	r18, r6
    1e2c:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1e30:	7b 01       	movw	r14, r22
    1e32:	8c 01       	movw	r16, r24
    1e34:	c6 01       	movw	r24, r12
    1e36:	b5 01       	movw	r22, r10
    1e38:	a4 01       	movw	r20, r8
    1e3a:	93 01       	movw	r18, r6
    1e3c:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1e40:	ca 01       	movw	r24, r20
    1e42:	b9 01       	movw	r22, r18
    1e44:	a1 96       	adiw	r28, 0x21	; 33
    1e46:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e48:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e4a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e4c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e4e:	a1 97       	sbiw	r28, 0x21	; 33
    1e50:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    1e54:	9b 01       	movw	r18, r22
    1e56:	ac 01       	movw	r20, r24
    1e58:	87 01       	movw	r16, r14
    1e5a:	ff 24       	eor	r15, r15
    1e5c:	ee 24       	eor	r14, r14
    1e5e:	2d 96       	adiw	r28, 0x0d	; 13
    1e60:	ac ac       	ldd	r10, Y+60	; 0x3c
    1e62:	bd ac       	ldd	r11, Y+61	; 0x3d
    1e64:	ce ac       	ldd	r12, Y+62	; 0x3e
    1e66:	df ac       	ldd	r13, Y+63	; 0x3f
    1e68:	2d 97       	sbiw	r28, 0x0d	; 13
    1e6a:	c6 01       	movw	r24, r12
    1e6c:	aa 27       	eor	r26, r26
    1e6e:	bb 27       	eor	r27, r27
    1e70:	57 01       	movw	r10, r14
    1e72:	68 01       	movw	r12, r16
    1e74:	a8 2a       	or	r10, r24
    1e76:	b9 2a       	or	r11, r25
    1e78:	ca 2a       	or	r12, r26
    1e7a:	db 2a       	or	r13, r27
    1e7c:	a2 16       	cp	r10, r18
    1e7e:	b3 06       	cpc	r11, r19
    1e80:	c4 06       	cpc	r12, r20
    1e82:	d5 06       	cpc	r13, r21
    1e84:	90 f4       	brcc	.+36     	; 0x1eaa <__moddi3+0x844>
    1e86:	a2 0c       	add	r10, r2
    1e88:	b3 1c       	adc	r11, r3
    1e8a:	c4 1c       	adc	r12, r4
    1e8c:	d5 1c       	adc	r13, r5
    1e8e:	a2 14       	cp	r10, r2
    1e90:	b3 04       	cpc	r11, r3
    1e92:	c4 04       	cpc	r12, r4
    1e94:	d5 04       	cpc	r13, r5
    1e96:	48 f0       	brcs	.+18     	; 0x1eaa <__moddi3+0x844>
    1e98:	a2 16       	cp	r10, r18
    1e9a:	b3 06       	cpc	r11, r19
    1e9c:	c4 06       	cpc	r12, r20
    1e9e:	d5 06       	cpc	r13, r21
    1ea0:	20 f4       	brcc	.+8      	; 0x1eaa <__moddi3+0x844>
    1ea2:	a2 0c       	add	r10, r2
    1ea4:	b3 1c       	adc	r11, r3
    1ea6:	c4 1c       	adc	r12, r4
    1ea8:	d5 1c       	adc	r13, r5
    1eaa:	a2 1a       	sub	r10, r18
    1eac:	b3 0a       	sbc	r11, r19
    1eae:	c4 0a       	sbc	r12, r20
    1eb0:	d5 0a       	sbc	r13, r21
    1eb2:	c6 01       	movw	r24, r12
    1eb4:	b5 01       	movw	r22, r10
    1eb6:	a4 01       	movw	r20, r8
    1eb8:	93 01       	movw	r18, r6
    1eba:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1ebe:	7b 01       	movw	r14, r22
    1ec0:	8c 01       	movw	r16, r24
    1ec2:	c6 01       	movw	r24, r12
    1ec4:	b5 01       	movw	r22, r10
    1ec6:	a4 01       	movw	r20, r8
    1ec8:	93 01       	movw	r18, r6
    1eca:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    1ece:	ca 01       	movw	r24, r20
    1ed0:	b9 01       	movw	r22, r18
    1ed2:	a1 96       	adiw	r28, 0x21	; 33
    1ed4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ed6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ed8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eda:	5f ad       	ldd	r21, Y+63	; 0x3f
    1edc:	a1 97       	sbiw	r28, 0x21	; 33
    1ede:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    1ee2:	9b 01       	movw	r18, r22
    1ee4:	ac 01       	movw	r20, r24
    1ee6:	87 01       	movw	r16, r14
    1ee8:	ff 24       	eor	r15, r15
    1eea:	ee 24       	eor	r14, r14
    1eec:	2d 96       	adiw	r28, 0x0d	; 13
    1eee:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ef0:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ef2:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ef4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ef6:	2d 97       	sbiw	r28, 0x0d	; 13
    1ef8:	a0 70       	andi	r26, 0x00	; 0
    1efa:	b0 70       	andi	r27, 0x00	; 0
    1efc:	e8 2a       	or	r14, r24
    1efe:	f9 2a       	or	r15, r25
    1f00:	0a 2b       	or	r16, r26
    1f02:	1b 2b       	or	r17, r27
    1f04:	e2 16       	cp	r14, r18
    1f06:	f3 06       	cpc	r15, r19
    1f08:	04 07       	cpc	r16, r20
    1f0a:	15 07       	cpc	r17, r21
    1f0c:	90 f4       	brcc	.+36     	; 0x1f32 <__moddi3+0x8cc>
    1f0e:	e2 0c       	add	r14, r2
    1f10:	f3 1c       	adc	r15, r3
    1f12:	04 1d       	adc	r16, r4
    1f14:	15 1d       	adc	r17, r5
    1f16:	e2 14       	cp	r14, r2
    1f18:	f3 04       	cpc	r15, r3
    1f1a:	04 05       	cpc	r16, r4
    1f1c:	15 05       	cpc	r17, r5
    1f1e:	48 f0       	brcs	.+18     	; 0x1f32 <__moddi3+0x8cc>
    1f20:	e2 16       	cp	r14, r18
    1f22:	f3 06       	cpc	r15, r19
    1f24:	04 07       	cpc	r16, r20
    1f26:	15 07       	cpc	r17, r21
    1f28:	20 f4       	brcc	.+8      	; 0x1f32 <__moddi3+0x8cc>
    1f2a:	e2 0c       	add	r14, r2
    1f2c:	f3 1c       	adc	r15, r3
    1f2e:	04 1d       	adc	r16, r4
    1f30:	15 1d       	adc	r17, r5
    1f32:	e2 1a       	sub	r14, r18
    1f34:	f3 0a       	sbc	r15, r19
    1f36:	04 0b       	sbc	r16, r20
    1f38:	15 0b       	sbc	r17, r21
    1f3a:	d8 01       	movw	r26, r16
    1f3c:	c7 01       	movw	r24, r14
    1f3e:	62 96       	adiw	r28, 0x12	; 18
    1f40:	0f ac       	ldd	r0, Y+63	; 0x3f
    1f42:	62 97       	sbiw	r28, 0x12	; 18
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <__moddi3+0x8e8>
    1f46:	b6 95       	lsr	r27
    1f48:	a7 95       	ror	r26
    1f4a:	97 95       	ror	r25
    1f4c:	87 95       	ror	r24
    1f4e:	0a 94       	dec	r0
    1f50:	d2 f7       	brpl	.-12     	; 0x1f46 <__moddi3+0x8e0>
    1f52:	89 a7       	std	Y+41, r24	; 0x29
    1f54:	9a a7       	std	Y+42, r25	; 0x2a
    1f56:	ab a7       	std	Y+43, r26	; 0x2b
    1f58:	bc a7       	std	Y+44, r27	; 0x2c
    1f5a:	1d a6       	std	Y+45, r1	; 0x2d
    1f5c:	1e a6       	std	Y+46, r1	; 0x2e
    1f5e:	1f a6       	std	Y+47, r1	; 0x2f
    1f60:	18 aa       	std	Y+48, r1	; 0x30
    1f62:	89 8b       	std	Y+17, r24	; 0x11
    1f64:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f66:	8a 8b       	std	Y+18, r24	; 0x12
    1f68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6a:	8b 8b       	std	Y+19, r24	; 0x13
    1f6c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f6e:	8c 8b       	std	Y+20, r24	; 0x14
    1f70:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f72:	8d 8b       	std	Y+21, r24	; 0x15
    1f74:	2f c3       	rjmp	.+1630   	; 0x25d4 <__moddi3+0xf6e>
    1f76:	6a 14       	cp	r6, r10
    1f78:	7b 04       	cpc	r7, r11
    1f7a:	8c 04       	cpc	r8, r12
    1f7c:	9d 04       	cpc	r9, r13
    1f7e:	48 f4       	brcc	.+18     	; 0x1f92 <__moddi3+0x92c>
    1f80:	49 8b       	std	Y+17, r20	; 0x11
    1f82:	5a 8b       	std	Y+18, r21	; 0x12
    1f84:	6b 8b       	std	Y+19, r22	; 0x13
    1f86:	7c 8b       	std	Y+20, r23	; 0x14
    1f88:	8d 8b       	std	Y+21, r24	; 0x15
    1f8a:	9e 8b       	std	Y+22, r25	; 0x16
    1f8c:	2f 8b       	std	Y+23, r18	; 0x17
    1f8e:	38 8f       	std	Y+24, r19	; 0x18
    1f90:	27 c3       	rjmp	.+1614   	; 0x25e0 <__moddi3+0xf7a>
    1f92:	00 e0       	ldi	r16, 0x00	; 0
    1f94:	a0 16       	cp	r10, r16
    1f96:	00 e0       	ldi	r16, 0x00	; 0
    1f98:	b0 06       	cpc	r11, r16
    1f9a:	01 e0       	ldi	r16, 0x01	; 1
    1f9c:	c0 06       	cpc	r12, r16
    1f9e:	00 e0       	ldi	r16, 0x00	; 0
    1fa0:	d0 06       	cpc	r13, r16
    1fa2:	88 f4       	brcc	.+34     	; 0x1fc6 <__moddi3+0x960>
    1fa4:	1f ef       	ldi	r17, 0xFF	; 255
    1fa6:	a1 16       	cp	r10, r17
    1fa8:	b1 04       	cpc	r11, r1
    1faa:	c1 04       	cpc	r12, r1
    1fac:	d1 04       	cpc	r13, r1
    1fae:	39 f0       	breq	.+14     	; 0x1fbe <__moddi3+0x958>
    1fb0:	30 f0       	brcs	.+12     	; 0x1fbe <__moddi3+0x958>
    1fb2:	28 e0       	ldi	r18, 0x08	; 8
    1fb4:	e2 2e       	mov	r14, r18
    1fb6:	f1 2c       	mov	r15, r1
    1fb8:	01 2d       	mov	r16, r1
    1fba:	11 2d       	mov	r17, r1
    1fbc:	18 c0       	rjmp	.+48     	; 0x1fee <__moddi3+0x988>
    1fbe:	ee 24       	eor	r14, r14
    1fc0:	ff 24       	eor	r15, r15
    1fc2:	87 01       	movw	r16, r14
    1fc4:	14 c0       	rjmp	.+40     	; 0x1fee <__moddi3+0x988>
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	a2 16       	cp	r10, r18
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	b2 06       	cpc	r11, r18
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	c2 06       	cpc	r12, r18
    1fd2:	21 e0       	ldi	r18, 0x01	; 1
    1fd4:	d2 06       	cpc	r13, r18
    1fd6:	30 f0       	brcs	.+12     	; 0x1fe4 <__moddi3+0x97e>
    1fd8:	98 e1       	ldi	r25, 0x18	; 24
    1fda:	e9 2e       	mov	r14, r25
    1fdc:	f1 2c       	mov	r15, r1
    1fde:	01 2d       	mov	r16, r1
    1fe0:	11 2d       	mov	r17, r1
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <__moddi3+0x988>
    1fe4:	80 e1       	ldi	r24, 0x10	; 16
    1fe6:	e8 2e       	mov	r14, r24
    1fe8:	f1 2c       	mov	r15, r1
    1fea:	01 2d       	mov	r16, r1
    1fec:	11 2d       	mov	r17, r1
    1fee:	d6 01       	movw	r26, r12
    1ff0:	c5 01       	movw	r24, r10
    1ff2:	0e 2c       	mov	r0, r14
    1ff4:	04 c0       	rjmp	.+8      	; 0x1ffe <__moddi3+0x998>
    1ff6:	b6 95       	lsr	r27
    1ff8:	a7 95       	ror	r26
    1ffa:	97 95       	ror	r25
    1ffc:	87 95       	ror	r24
    1ffe:	0a 94       	dec	r0
    2000:	d2 f7       	brpl	.-12     	; 0x1ff6 <__moddi3+0x990>
    2002:	8c 58       	subi	r24, 0x8C	; 140
    2004:	9f 4f       	sbci	r25, 0xFF	; 255
    2006:	dc 01       	movw	r26, r24
    2008:	2c 91       	ld	r18, X
    200a:	80 e2       	ldi	r24, 0x20	; 32
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	a0 e0       	ldi	r26, 0x00	; 0
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	8e 19       	sub	r24, r14
    2014:	9f 09       	sbc	r25, r15
    2016:	a0 0b       	sbc	r26, r16
    2018:	b1 0b       	sbc	r27, r17
    201a:	82 1b       	sub	r24, r18
    201c:	91 09       	sbc	r25, r1
    201e:	a1 09       	sbc	r26, r1
    2020:	b1 09       	sbc	r27, r1
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	a1 05       	cpc	r26, r1
    2026:	b1 05       	cpc	r27, r1
    2028:	09 f0       	breq	.+2      	; 0x202c <__moddi3+0x9c6>
    202a:	59 c0       	rjmp	.+178    	; 0x20de <__moddi3+0xa78>
    202c:	a6 14       	cp	r10, r6
    202e:	b7 04       	cpc	r11, r7
    2030:	c8 04       	cpc	r12, r8
    2032:	d9 04       	cpc	r13, r9
    2034:	70 f0       	brcs	.+28     	; 0x2052 <__moddi3+0x9ec>
    2036:	e8 96       	adiw	r28, 0x38	; 56
    2038:	ec ac       	ldd	r14, Y+60	; 0x3c
    203a:	fd ac       	ldd	r15, Y+61	; 0x3d
    203c:	0e ad       	ldd	r16, Y+62	; 0x3e
    203e:	1f ad       	ldd	r17, Y+63	; 0x3f
    2040:	e8 97       	sbiw	r28, 0x38	; 56
    2042:	e2 14       	cp	r14, r2
    2044:	f3 04       	cpc	r15, r3
    2046:	04 05       	cpc	r16, r4
    2048:	15 05       	cpc	r17, r5
    204a:	18 f4       	brcc	.+6      	; 0x2052 <__moddi3+0x9ec>
    204c:	d8 01       	movw	r26, r16
    204e:	c7 01       	movw	r24, r14
    2050:	2f c0       	rjmp	.+94     	; 0x20b0 <__moddi3+0xa4a>
    2052:	e8 96       	adiw	r28, 0x38	; 56
    2054:	8c ad       	ldd	r24, Y+60	; 0x3c
    2056:	9d ad       	ldd	r25, Y+61	; 0x3d
    2058:	ae ad       	ldd	r26, Y+62	; 0x3e
    205a:	bf ad       	ldd	r27, Y+63	; 0x3f
    205c:	e8 97       	sbiw	r28, 0x38	; 56
    205e:	82 19       	sub	r24, r2
    2060:	93 09       	sbc	r25, r3
    2062:	a4 09       	sbc	r26, r4
    2064:	b5 09       	sbc	r27, r5
    2066:	a4 01       	movw	r20, r8
    2068:	93 01       	movw	r18, r6
    206a:	2a 19       	sub	r18, r10
    206c:	3b 09       	sbc	r19, r11
    206e:	4c 09       	sbc	r20, r12
    2070:	5d 09       	sbc	r21, r13
    2072:	aa 24       	eor	r10, r10
    2074:	bb 24       	eor	r11, r11
    2076:	65 01       	movw	r12, r10
    2078:	e8 96       	adiw	r28, 0x38	; 56
    207a:	6c ac       	ldd	r6, Y+60	; 0x3c
    207c:	7d ac       	ldd	r7, Y+61	; 0x3d
    207e:	8e ac       	ldd	r8, Y+62	; 0x3e
    2080:	9f ac       	ldd	r9, Y+63	; 0x3f
    2082:	e8 97       	sbiw	r28, 0x38	; 56
    2084:	68 16       	cp	r6, r24
    2086:	79 06       	cpc	r7, r25
    2088:	8a 06       	cpc	r8, r26
    208a:	9b 06       	cpc	r9, r27
    208c:	28 f4       	brcc	.+10     	; 0x2098 <__moddi3+0xa32>
    208e:	11 e0       	ldi	r17, 0x01	; 1
    2090:	a1 2e       	mov	r10, r17
    2092:	b1 2c       	mov	r11, r1
    2094:	c1 2c       	mov	r12, r1
    2096:	d1 2c       	mov	r13, r1
    2098:	79 01       	movw	r14, r18
    209a:	8a 01       	movw	r16, r20
    209c:	ea 18       	sub	r14, r10
    209e:	fb 08       	sbc	r15, r11
    20a0:	0c 09       	sbc	r16, r12
    20a2:	1d 09       	sbc	r17, r13
    20a4:	61 96       	adiw	r28, 0x11	; 17
    20a6:	ec ae       	std	Y+60, r14	; 0x3c
    20a8:	fd ae       	std	Y+61, r15	; 0x3d
    20aa:	0e af       	std	Y+62, r16	; 0x3e
    20ac:	1f af       	std	Y+63, r17	; 0x3f
    20ae:	61 97       	sbiw	r28, 0x11	; 17
    20b0:	89 a7       	std	Y+41, r24	; 0x29
    20b2:	9a a7       	std	Y+42, r25	; 0x2a
    20b4:	ab a7       	std	Y+43, r26	; 0x2b
    20b6:	bc a7       	std	Y+44, r27	; 0x2c
    20b8:	61 96       	adiw	r28, 0x11	; 17
    20ba:	0c ad       	ldd	r16, Y+60	; 0x3c
    20bc:	1d ad       	ldd	r17, Y+61	; 0x3d
    20be:	2e ad       	ldd	r18, Y+62	; 0x3e
    20c0:	3f ad       	ldd	r19, Y+63	; 0x3f
    20c2:	61 97       	sbiw	r28, 0x11	; 17
    20c4:	0d a7       	std	Y+45, r16	; 0x2d
    20c6:	1e a7       	std	Y+46, r17	; 0x2e
    20c8:	2f a7       	std	Y+47, r18	; 0x2f
    20ca:	38 ab       	std	Y+48, r19	; 0x30
    20cc:	89 8b       	std	Y+17, r24	; 0x11
    20ce:	8a a5       	ldd	r24, Y+42	; 0x2a
    20d0:	8a 8b       	std	Y+18, r24	; 0x12
    20d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20d4:	8b 8b       	std	Y+19, r24	; 0x13
    20d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    20d8:	8c 8b       	std	Y+20, r24	; 0x14
    20da:	0d 8b       	std	Y+21, r16	; 0x15
    20dc:	7b c2       	rjmp	.+1270   	; 0x25d4 <__moddi3+0xf6e>
    20de:	e3 96       	adiw	r28, 0x33	; 51
    20e0:	8f af       	std	Y+63, r24	; 0x3f
    20e2:	e3 97       	sbiw	r28, 0x33	; 51
    20e4:	a6 01       	movw	r20, r12
    20e6:	95 01       	movw	r18, r10
    20e8:	08 2e       	mov	r0, r24
    20ea:	04 c0       	rjmp	.+8      	; 0x20f4 <__moddi3+0xa8e>
    20ec:	22 0f       	add	r18, r18
    20ee:	33 1f       	adc	r19, r19
    20f0:	44 1f       	adc	r20, r20
    20f2:	55 1f       	adc	r21, r21
    20f4:	0a 94       	dec	r0
    20f6:	d2 f7       	brpl	.-12     	; 0x20ec <__moddi3+0xa86>
    20f8:	10 e2       	ldi	r17, 0x20	; 32
    20fa:	18 1b       	sub	r17, r24
    20fc:	e2 96       	adiw	r28, 0x32	; 50
    20fe:	1f af       	std	Y+63, r17	; 0x3f
    2100:	e2 97       	sbiw	r28, 0x32	; 50
    2102:	d2 01       	movw	r26, r4
    2104:	c1 01       	movw	r24, r2
    2106:	01 2e       	mov	r0, r17
    2108:	04 c0       	rjmp	.+8      	; 0x2112 <__moddi3+0xaac>
    210a:	b6 95       	lsr	r27
    210c:	a7 95       	ror	r26
    210e:	97 95       	ror	r25
    2110:	87 95       	ror	r24
    2112:	0a 94       	dec	r0
    2114:	d2 f7       	brpl	.-12     	; 0x210a <__moddi3+0xaa4>
    2116:	5c 01       	movw	r10, r24
    2118:	6d 01       	movw	r12, r26
    211a:	a2 2a       	or	r10, r18
    211c:	b3 2a       	or	r11, r19
    211e:	c4 2a       	or	r12, r20
    2120:	d5 2a       	or	r13, r21
    2122:	25 96       	adiw	r28, 0x05	; 5
    2124:	ac ae       	std	Y+60, r10	; 0x3c
    2126:	bd ae       	std	Y+61, r11	; 0x3d
    2128:	ce ae       	std	Y+62, r12	; 0x3e
    212a:	df ae       	std	Y+63, r13	; 0x3f
    212c:	25 97       	sbiw	r28, 0x05	; 5
    212e:	72 01       	movw	r14, r4
    2130:	61 01       	movw	r12, r2
    2132:	e3 96       	adiw	r28, 0x33	; 51
    2134:	0f ac       	ldd	r0, Y+63	; 0x3f
    2136:	e3 97       	sbiw	r28, 0x33	; 51
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <__moddi3+0xadc>
    213a:	cc 0c       	add	r12, r12
    213c:	dd 1c       	adc	r13, r13
    213e:	ee 1c       	adc	r14, r14
    2140:	ff 1c       	adc	r15, r15
    2142:	0a 94       	dec	r0
    2144:	d2 f7       	brpl	.-12     	; 0x213a <__moddi3+0xad4>
    2146:	21 96       	adiw	r28, 0x01	; 1
    2148:	cc ae       	std	Y+60, r12	; 0x3c
    214a:	dd ae       	std	Y+61, r13	; 0x3d
    214c:	ee ae       	std	Y+62, r14	; 0x3e
    214e:	ff ae       	std	Y+63, r15	; 0x3f
    2150:	21 97       	sbiw	r28, 0x01	; 1
    2152:	64 01       	movw	r12, r8
    2154:	53 01       	movw	r10, r6
    2156:	01 2e       	mov	r0, r17
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <__moddi3+0xafc>
    215a:	d6 94       	lsr	r13
    215c:	c7 94       	ror	r12
    215e:	b7 94       	ror	r11
    2160:	a7 94       	ror	r10
    2162:	0a 94       	dec	r0
    2164:	d2 f7       	brpl	.-12     	; 0x215a <__moddi3+0xaf4>
    2166:	a4 01       	movw	r20, r8
    2168:	93 01       	movw	r18, r6
    216a:	e3 96       	adiw	r28, 0x33	; 51
    216c:	0f ac       	ldd	r0, Y+63	; 0x3f
    216e:	e3 97       	sbiw	r28, 0x33	; 51
    2170:	04 c0       	rjmp	.+8      	; 0x217a <__moddi3+0xb14>
    2172:	22 0f       	add	r18, r18
    2174:	33 1f       	adc	r19, r19
    2176:	44 1f       	adc	r20, r20
    2178:	55 1f       	adc	r21, r21
    217a:	0a 94       	dec	r0
    217c:	d2 f7       	brpl	.-12     	; 0x2172 <__moddi3+0xb0c>
    217e:	e8 96       	adiw	r28, 0x38	; 56
    2180:	8c ad       	ldd	r24, Y+60	; 0x3c
    2182:	9d ad       	ldd	r25, Y+61	; 0x3d
    2184:	ae ad       	ldd	r26, Y+62	; 0x3e
    2186:	bf ad       	ldd	r27, Y+63	; 0x3f
    2188:	e8 97       	sbiw	r28, 0x38	; 56
    218a:	04 c0       	rjmp	.+8      	; 0x2194 <__moddi3+0xb2e>
    218c:	b6 95       	lsr	r27
    218e:	a7 95       	ror	r26
    2190:	97 95       	ror	r25
    2192:	87 95       	ror	r24
    2194:	1a 95       	dec	r17
    2196:	d2 f7       	brpl	.-12     	; 0x218c <__moddi3+0xb26>
    2198:	7c 01       	movw	r14, r24
    219a:	8d 01       	movw	r16, r26
    219c:	e2 2a       	or	r14, r18
    219e:	f3 2a       	or	r15, r19
    21a0:	04 2b       	or	r16, r20
    21a2:	15 2b       	or	r17, r21
    21a4:	e9 ae       	std	Y+57, r14	; 0x39
    21a6:	fa ae       	std	Y+58, r15	; 0x3a
    21a8:	0b af       	std	Y+59, r16	; 0x3b
    21aa:	1c af       	std	Y+60, r17	; 0x3c
    21ac:	e8 96       	adiw	r28, 0x38	; 56
    21ae:	0c ad       	ldd	r16, Y+60	; 0x3c
    21b0:	1d ad       	ldd	r17, Y+61	; 0x3d
    21b2:	2e ad       	ldd	r18, Y+62	; 0x3e
    21b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    21b6:	e8 97       	sbiw	r28, 0x38	; 56
    21b8:	e3 96       	adiw	r28, 0x33	; 51
    21ba:	0f ac       	ldd	r0, Y+63	; 0x3f
    21bc:	e3 97       	sbiw	r28, 0x33	; 51
    21be:	04 c0       	rjmp	.+8      	; 0x21c8 <__moddi3+0xb62>
    21c0:	00 0f       	add	r16, r16
    21c2:	11 1f       	adc	r17, r17
    21c4:	22 1f       	adc	r18, r18
    21c6:	33 1f       	adc	r19, r19
    21c8:	0a 94       	dec	r0
    21ca:	d2 f7       	brpl	.-12     	; 0x21c0 <__moddi3+0xb5a>
    21cc:	0d ab       	std	Y+53, r16	; 0x35
    21ce:	1e ab       	std	Y+54, r17	; 0x36
    21d0:	2f ab       	std	Y+55, r18	; 0x37
    21d2:	38 af       	std	Y+56, r19	; 0x38
    21d4:	25 96       	adiw	r28, 0x05	; 5
    21d6:	2c ad       	ldd	r18, Y+60	; 0x3c
    21d8:	3d ad       	ldd	r19, Y+61	; 0x3d
    21da:	4e ad       	ldd	r20, Y+62	; 0x3e
    21dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    21de:	25 97       	sbiw	r28, 0x05	; 5
    21e0:	3a 01       	movw	r6, r20
    21e2:	88 24       	eor	r8, r8
    21e4:	99 24       	eor	r9, r9
    21e6:	40 70       	andi	r20, 0x00	; 0
    21e8:	50 70       	andi	r21, 0x00	; 0
    21ea:	a5 96       	adiw	r28, 0x25	; 37
    21ec:	2c af       	std	Y+60, r18	; 0x3c
    21ee:	3d af       	std	Y+61, r19	; 0x3d
    21f0:	4e af       	std	Y+62, r20	; 0x3e
    21f2:	5f af       	std	Y+63, r21	; 0x3f
    21f4:	a5 97       	sbiw	r28, 0x25	; 37
    21f6:	c6 01       	movw	r24, r12
    21f8:	b5 01       	movw	r22, r10
    21fa:	a4 01       	movw	r20, r8
    21fc:	93 01       	movw	r18, r6
    21fe:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    2202:	7b 01       	movw	r14, r22
    2204:	8c 01       	movw	r16, r24
    2206:	c6 01       	movw	r24, r12
    2208:	b5 01       	movw	r22, r10
    220a:	a4 01       	movw	r20, r8
    220c:	93 01       	movw	r18, r6
    220e:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    2212:	c9 01       	movw	r24, r18
    2214:	da 01       	movw	r26, r20
    2216:	1c 01       	movw	r2, r24
    2218:	2d 01       	movw	r4, r26
    221a:	c2 01       	movw	r24, r4
    221c:	b1 01       	movw	r22, r2
    221e:	a5 96       	adiw	r28, 0x25	; 37
    2220:	2c ad       	ldd	r18, Y+60	; 0x3c
    2222:	3d ad       	ldd	r19, Y+61	; 0x3d
    2224:	4e ad       	ldd	r20, Y+62	; 0x3e
    2226:	5f ad       	ldd	r21, Y+63	; 0x3f
    2228:	a5 97       	sbiw	r28, 0x25	; 37
    222a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    222e:	9b 01       	movw	r18, r22
    2230:	ac 01       	movw	r20, r24
    2232:	87 01       	movw	r16, r14
    2234:	ff 24       	eor	r15, r15
    2236:	ee 24       	eor	r14, r14
    2238:	a9 ac       	ldd	r10, Y+57	; 0x39
    223a:	ba ac       	ldd	r11, Y+58	; 0x3a
    223c:	cb ac       	ldd	r12, Y+59	; 0x3b
    223e:	dc ac       	ldd	r13, Y+60	; 0x3c
    2240:	c6 01       	movw	r24, r12
    2242:	aa 27       	eor	r26, r26
    2244:	bb 27       	eor	r27, r27
    2246:	57 01       	movw	r10, r14
    2248:	68 01       	movw	r12, r16
    224a:	a8 2a       	or	r10, r24
    224c:	b9 2a       	or	r11, r25
    224e:	ca 2a       	or	r12, r26
    2250:	db 2a       	or	r13, r27
    2252:	a2 16       	cp	r10, r18
    2254:	b3 06       	cpc	r11, r19
    2256:	c4 06       	cpc	r12, r20
    2258:	d5 06       	cpc	r13, r21
    225a:	10 f5       	brcc	.+68     	; 0x22a0 <__moddi3+0xc3a>
    225c:	08 94       	sec
    225e:	21 08       	sbc	r2, r1
    2260:	31 08       	sbc	r3, r1
    2262:	41 08       	sbc	r4, r1
    2264:	51 08       	sbc	r5, r1
    2266:	25 96       	adiw	r28, 0x05	; 5
    2268:	ec ac       	ldd	r14, Y+60	; 0x3c
    226a:	fd ac       	ldd	r15, Y+61	; 0x3d
    226c:	0e ad       	ldd	r16, Y+62	; 0x3e
    226e:	1f ad       	ldd	r17, Y+63	; 0x3f
    2270:	25 97       	sbiw	r28, 0x05	; 5
    2272:	ae 0c       	add	r10, r14
    2274:	bf 1c       	adc	r11, r15
    2276:	c0 1e       	adc	r12, r16
    2278:	d1 1e       	adc	r13, r17
    227a:	ae 14       	cp	r10, r14
    227c:	bf 04       	cpc	r11, r15
    227e:	c0 06       	cpc	r12, r16
    2280:	d1 06       	cpc	r13, r17
    2282:	70 f0       	brcs	.+28     	; 0x22a0 <__moddi3+0xc3a>
    2284:	a2 16       	cp	r10, r18
    2286:	b3 06       	cpc	r11, r19
    2288:	c4 06       	cpc	r12, r20
    228a:	d5 06       	cpc	r13, r21
    228c:	48 f4       	brcc	.+18     	; 0x22a0 <__moddi3+0xc3a>
    228e:	08 94       	sec
    2290:	21 08       	sbc	r2, r1
    2292:	31 08       	sbc	r3, r1
    2294:	41 08       	sbc	r4, r1
    2296:	51 08       	sbc	r5, r1
    2298:	ae 0c       	add	r10, r14
    229a:	bf 1c       	adc	r11, r15
    229c:	c0 1e       	adc	r12, r16
    229e:	d1 1e       	adc	r13, r17
    22a0:	a2 1a       	sub	r10, r18
    22a2:	b3 0a       	sbc	r11, r19
    22a4:	c4 0a       	sbc	r12, r20
    22a6:	d5 0a       	sbc	r13, r21
    22a8:	c6 01       	movw	r24, r12
    22aa:	b5 01       	movw	r22, r10
    22ac:	a4 01       	movw	r20, r8
    22ae:	93 01       	movw	r18, r6
    22b0:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    22b4:	7b 01       	movw	r14, r22
    22b6:	8c 01       	movw	r16, r24
    22b8:	c6 01       	movw	r24, r12
    22ba:	b5 01       	movw	r22, r10
    22bc:	a4 01       	movw	r20, r8
    22be:	93 01       	movw	r18, r6
    22c0:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <__udivmodsi4>
    22c4:	c9 01       	movw	r24, r18
    22c6:	da 01       	movw	r26, r20
    22c8:	3c 01       	movw	r6, r24
    22ca:	4d 01       	movw	r8, r26
    22cc:	c4 01       	movw	r24, r8
    22ce:	b3 01       	movw	r22, r6
    22d0:	a5 96       	adiw	r28, 0x25	; 37
    22d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    22d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    22d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    22d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    22da:	a5 97       	sbiw	r28, 0x25	; 37
    22dc:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    22e0:	9b 01       	movw	r18, r22
    22e2:	ac 01       	movw	r20, r24
    22e4:	87 01       	movw	r16, r14
    22e6:	ff 24       	eor	r15, r15
    22e8:	ee 24       	eor	r14, r14
    22ea:	89 ad       	ldd	r24, Y+57	; 0x39
    22ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    22ee:	ab ad       	ldd	r26, Y+59	; 0x3b
    22f0:	bc ad       	ldd	r27, Y+60	; 0x3c
    22f2:	a0 70       	andi	r26, 0x00	; 0
    22f4:	b0 70       	andi	r27, 0x00	; 0
    22f6:	57 01       	movw	r10, r14
    22f8:	68 01       	movw	r12, r16
    22fa:	a8 2a       	or	r10, r24
    22fc:	b9 2a       	or	r11, r25
    22fe:	ca 2a       	or	r12, r26
    2300:	db 2a       	or	r13, r27
    2302:	a2 16       	cp	r10, r18
    2304:	b3 06       	cpc	r11, r19
    2306:	c4 06       	cpc	r12, r20
    2308:	d5 06       	cpc	r13, r21
    230a:	10 f5       	brcc	.+68     	; 0x2350 <__moddi3+0xcea>
    230c:	08 94       	sec
    230e:	61 08       	sbc	r6, r1
    2310:	71 08       	sbc	r7, r1
    2312:	81 08       	sbc	r8, r1
    2314:	91 08       	sbc	r9, r1
    2316:	25 96       	adiw	r28, 0x05	; 5
    2318:	6c ad       	ldd	r22, Y+60	; 0x3c
    231a:	7d ad       	ldd	r23, Y+61	; 0x3d
    231c:	8e ad       	ldd	r24, Y+62	; 0x3e
    231e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2320:	25 97       	sbiw	r28, 0x05	; 5
    2322:	a6 0e       	add	r10, r22
    2324:	b7 1e       	adc	r11, r23
    2326:	c8 1e       	adc	r12, r24
    2328:	d9 1e       	adc	r13, r25
    232a:	a6 16       	cp	r10, r22
    232c:	b7 06       	cpc	r11, r23
    232e:	c8 06       	cpc	r12, r24
    2330:	d9 06       	cpc	r13, r25
    2332:	70 f0       	brcs	.+28     	; 0x2350 <__moddi3+0xcea>
    2334:	a2 16       	cp	r10, r18
    2336:	b3 06       	cpc	r11, r19
    2338:	c4 06       	cpc	r12, r20
    233a:	d5 06       	cpc	r13, r21
    233c:	48 f4       	brcc	.+18     	; 0x2350 <__moddi3+0xcea>
    233e:	08 94       	sec
    2340:	61 08       	sbc	r6, r1
    2342:	71 08       	sbc	r7, r1
    2344:	81 08       	sbc	r8, r1
    2346:	91 08       	sbc	r9, r1
    2348:	a6 0e       	add	r10, r22
    234a:	b7 1e       	adc	r11, r23
    234c:	c8 1e       	adc	r12, r24
    234e:	d9 1e       	adc	r13, r25
    2350:	d6 01       	movw	r26, r12
    2352:	c5 01       	movw	r24, r10
    2354:	82 1b       	sub	r24, r18
    2356:	93 0b       	sbc	r25, r19
    2358:	a4 0b       	sbc	r26, r20
    235a:	b5 0b       	sbc	r27, r21
    235c:	89 ab       	std	Y+49, r24	; 0x31
    235e:	9a ab       	std	Y+50, r25	; 0x32
    2360:	ab ab       	std	Y+51, r26	; 0x33
    2362:	bc ab       	std	Y+52, r27	; 0x34
    2364:	d1 01       	movw	r26, r2
    2366:	99 27       	eor	r25, r25
    2368:	88 27       	eor	r24, r24
    236a:	84 01       	movw	r16, r8
    236c:	73 01       	movw	r14, r6
    236e:	e8 2a       	or	r14, r24
    2370:	f9 2a       	or	r15, r25
    2372:	0a 2b       	or	r16, r26
    2374:	1b 2b       	or	r17, r27
    2376:	8f ef       	ldi	r24, 0xFF	; 255
    2378:	a8 2e       	mov	r10, r24
    237a:	8f ef       	ldi	r24, 0xFF	; 255
    237c:	b8 2e       	mov	r11, r24
    237e:	c1 2c       	mov	r12, r1
    2380:	d1 2c       	mov	r13, r1
    2382:	ae 20       	and	r10, r14
    2384:	bf 20       	and	r11, r15
    2386:	c0 22       	and	r12, r16
    2388:	d1 22       	and	r13, r17
    238a:	78 01       	movw	r14, r16
    238c:	00 27       	eor	r16, r16
    238e:	11 27       	eor	r17, r17
    2390:	21 96       	adiw	r28, 0x01	; 1
    2392:	6c ac       	ldd	r6, Y+60	; 0x3c
    2394:	7d ac       	ldd	r7, Y+61	; 0x3d
    2396:	8e ac       	ldd	r8, Y+62	; 0x3e
    2398:	9f ac       	ldd	r9, Y+63	; 0x3f
    239a:	21 97       	sbiw	r28, 0x01	; 1
    239c:	2f ef       	ldi	r18, 0xFF	; 255
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	62 22       	and	r6, r18
    23a6:	73 22       	and	r7, r19
    23a8:	84 22       	and	r8, r20
    23aa:	95 22       	and	r9, r21
    23ac:	21 96       	adiw	r28, 0x01	; 1
    23ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    23b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    23b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    23b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    23b6:	21 97       	sbiw	r28, 0x01	; 1
    23b8:	ac 01       	movw	r20, r24
    23ba:	66 27       	eor	r22, r22
    23bc:	77 27       	eor	r23, r23
    23be:	ad 96       	adiw	r28, 0x2d	; 45
    23c0:	4c af       	std	Y+60, r20	; 0x3c
    23c2:	5d af       	std	Y+61, r21	; 0x3d
    23c4:	6e af       	std	Y+62, r22	; 0x3e
    23c6:	7f af       	std	Y+63, r23	; 0x3f
    23c8:	ad 97       	sbiw	r28, 0x2d	; 45
    23ca:	c6 01       	movw	r24, r12
    23cc:	b5 01       	movw	r22, r10
    23ce:	a4 01       	movw	r20, r8
    23d0:	93 01       	movw	r18, r6
    23d2:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    23d6:	a9 96       	adiw	r28, 0x29	; 41
    23d8:	6c af       	std	Y+60, r22	; 0x3c
    23da:	7d af       	std	Y+61, r23	; 0x3d
    23dc:	8e af       	std	Y+62, r24	; 0x3e
    23de:	9f af       	std	Y+63, r25	; 0x3f
    23e0:	a9 97       	sbiw	r28, 0x29	; 41
    23e2:	c6 01       	movw	r24, r12
    23e4:	b5 01       	movw	r22, r10
    23e6:	ad 96       	adiw	r28, 0x2d	; 45
    23e8:	2c ad       	ldd	r18, Y+60	; 0x3c
    23ea:	3d ad       	ldd	r19, Y+61	; 0x3d
    23ec:	4e ad       	ldd	r20, Y+62	; 0x3e
    23ee:	5f ad       	ldd	r21, Y+63	; 0x3f
    23f0:	ad 97       	sbiw	r28, 0x2d	; 45
    23f2:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    23f6:	1b 01       	movw	r2, r22
    23f8:	2c 01       	movw	r4, r24
    23fa:	c8 01       	movw	r24, r16
    23fc:	b7 01       	movw	r22, r14
    23fe:	a4 01       	movw	r20, r8
    2400:	93 01       	movw	r18, r6
    2402:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    2406:	5b 01       	movw	r10, r22
    2408:	6c 01       	movw	r12, r24
    240a:	c8 01       	movw	r24, r16
    240c:	b7 01       	movw	r22, r14
    240e:	ad 96       	adiw	r28, 0x2d	; 45
    2410:	2c ad       	ldd	r18, Y+60	; 0x3c
    2412:	3d ad       	ldd	r19, Y+61	; 0x3d
    2414:	4e ad       	ldd	r20, Y+62	; 0x3e
    2416:	5f ad       	ldd	r21, Y+63	; 0x3f
    2418:	ad 97       	sbiw	r28, 0x2d	; 45
    241a:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    241e:	7b 01       	movw	r14, r22
    2420:	8c 01       	movw	r16, r24
    2422:	a6 01       	movw	r20, r12
    2424:	95 01       	movw	r18, r10
    2426:	22 0d       	add	r18, r2
    2428:	33 1d       	adc	r19, r3
    242a:	44 1d       	adc	r20, r4
    242c:	55 1d       	adc	r21, r5
    242e:	a9 96       	adiw	r28, 0x29	; 41
    2430:	6c ac       	ldd	r6, Y+60	; 0x3c
    2432:	7d ac       	ldd	r7, Y+61	; 0x3d
    2434:	8e ac       	ldd	r8, Y+62	; 0x3e
    2436:	9f ac       	ldd	r9, Y+63	; 0x3f
    2438:	a9 97       	sbiw	r28, 0x29	; 41
    243a:	c4 01       	movw	r24, r8
    243c:	aa 27       	eor	r26, r26
    243e:	bb 27       	eor	r27, r27
    2440:	28 0f       	add	r18, r24
    2442:	39 1f       	adc	r19, r25
    2444:	4a 1f       	adc	r20, r26
    2446:	5b 1f       	adc	r21, r27
    2448:	2a 15       	cp	r18, r10
    244a:	3b 05       	cpc	r19, r11
    244c:	4c 05       	cpc	r20, r12
    244e:	5d 05       	cpc	r21, r13
    2450:	48 f4       	brcc	.+18     	; 0x2464 <__moddi3+0xdfe>
    2452:	81 2c       	mov	r8, r1
    2454:	91 2c       	mov	r9, r1
    2456:	e1 e0       	ldi	r30, 0x01	; 1
    2458:	ae 2e       	mov	r10, r30
    245a:	b1 2c       	mov	r11, r1
    245c:	e8 0c       	add	r14, r8
    245e:	f9 1c       	adc	r15, r9
    2460:	0a 1d       	adc	r16, r10
    2462:	1b 1d       	adc	r17, r11
    2464:	ca 01       	movw	r24, r20
    2466:	aa 27       	eor	r26, r26
    2468:	bb 27       	eor	r27, r27
    246a:	57 01       	movw	r10, r14
    246c:	68 01       	movw	r12, r16
    246e:	a8 0e       	add	r10, r24
    2470:	b9 1e       	adc	r11, r25
    2472:	ca 1e       	adc	r12, r26
    2474:	db 1e       	adc	r13, r27
    2476:	a9 01       	movw	r20, r18
    2478:	33 27       	eor	r19, r19
    247a:	22 27       	eor	r18, r18
    247c:	a9 96       	adiw	r28, 0x29	; 41
    247e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2480:	9d ad       	ldd	r25, Y+61	; 0x3d
    2482:	ae ad       	ldd	r26, Y+62	; 0x3e
    2484:	bf ad       	ldd	r27, Y+63	; 0x3f
    2486:	a9 97       	sbiw	r28, 0x29	; 41
    2488:	a0 70       	andi	r26, 0x00	; 0
    248a:	b0 70       	andi	r27, 0x00	; 0
    248c:	28 0f       	add	r18, r24
    248e:	39 1f       	adc	r19, r25
    2490:	4a 1f       	adc	r20, r26
    2492:	5b 1f       	adc	r21, r27
    2494:	e9 a8       	ldd	r14, Y+49	; 0x31
    2496:	fa a8       	ldd	r15, Y+50	; 0x32
    2498:	0b a9       	ldd	r16, Y+51	; 0x33
    249a:	1c a9       	ldd	r17, Y+52	; 0x34
    249c:	ea 14       	cp	r14, r10
    249e:	fb 04       	cpc	r15, r11
    24a0:	0c 05       	cpc	r16, r12
    24a2:	1d 05       	cpc	r17, r13
    24a4:	70 f0       	brcs	.+28     	; 0x24c2 <__moddi3+0xe5c>
    24a6:	ae 14       	cp	r10, r14
    24a8:	bf 04       	cpc	r11, r15
    24aa:	c0 06       	cpc	r12, r16
    24ac:	d1 06       	cpc	r13, r17
    24ae:	89 f5       	brne	.+98     	; 0x2512 <__moddi3+0xeac>
    24b0:	6d a9       	ldd	r22, Y+53	; 0x35
    24b2:	7e a9       	ldd	r23, Y+54	; 0x36
    24b4:	8f a9       	ldd	r24, Y+55	; 0x37
    24b6:	98 ad       	ldd	r25, Y+56	; 0x38
    24b8:	62 17       	cp	r22, r18
    24ba:	73 07       	cpc	r23, r19
    24bc:	84 07       	cpc	r24, r20
    24be:	95 07       	cpc	r25, r21
    24c0:	40 f5       	brcc	.+80     	; 0x2512 <__moddi3+0xeac>
    24c2:	da 01       	movw	r26, r20
    24c4:	c9 01       	movw	r24, r18
    24c6:	21 96       	adiw	r28, 0x01	; 1
    24c8:	6c ac       	ldd	r6, Y+60	; 0x3c
    24ca:	7d ac       	ldd	r7, Y+61	; 0x3d
    24cc:	8e ac       	ldd	r8, Y+62	; 0x3e
    24ce:	9f ac       	ldd	r9, Y+63	; 0x3f
    24d0:	21 97       	sbiw	r28, 0x01	; 1
    24d2:	86 19       	sub	r24, r6
    24d4:	97 09       	sbc	r25, r7
    24d6:	a8 09       	sbc	r26, r8
    24d8:	b9 09       	sbc	r27, r9
    24da:	25 96       	adiw	r28, 0x05	; 5
    24dc:	ec ac       	ldd	r14, Y+60	; 0x3c
    24de:	fd ac       	ldd	r15, Y+61	; 0x3d
    24e0:	0e ad       	ldd	r16, Y+62	; 0x3e
    24e2:	1f ad       	ldd	r17, Y+63	; 0x3f
    24e4:	25 97       	sbiw	r28, 0x05	; 5
    24e6:	ae 18       	sub	r10, r14
    24e8:	bf 08       	sbc	r11, r15
    24ea:	c0 0a       	sbc	r12, r16
    24ec:	d1 0a       	sbc	r13, r17
    24ee:	ee 24       	eor	r14, r14
    24f0:	ff 24       	eor	r15, r15
    24f2:	87 01       	movw	r16, r14
    24f4:	28 17       	cp	r18, r24
    24f6:	39 07       	cpc	r19, r25
    24f8:	4a 07       	cpc	r20, r26
    24fa:	5b 07       	cpc	r21, r27
    24fc:	28 f4       	brcc	.+10     	; 0x2508 <__moddi3+0xea2>
    24fe:	21 e0       	ldi	r18, 0x01	; 1
    2500:	e2 2e       	mov	r14, r18
    2502:	f1 2c       	mov	r15, r1
    2504:	01 2d       	mov	r16, r1
    2506:	11 2d       	mov	r17, r1
    2508:	ae 18       	sub	r10, r14
    250a:	bf 08       	sbc	r11, r15
    250c:	c0 0a       	sbc	r12, r16
    250e:	d1 0a       	sbc	r13, r17
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <__moddi3+0xeb0>
    2512:	da 01       	movw	r26, r20
    2514:	c9 01       	movw	r24, r18
    2516:	6d a8       	ldd	r6, Y+53	; 0x35
    2518:	7e a8       	ldd	r7, Y+54	; 0x36
    251a:	8f a8       	ldd	r8, Y+55	; 0x37
    251c:	98 ac       	ldd	r9, Y+56	; 0x38
    251e:	68 1a       	sub	r6, r24
    2520:	79 0a       	sbc	r7, r25
    2522:	8a 0a       	sbc	r8, r26
    2524:	9b 0a       	sbc	r9, r27
    2526:	09 a9       	ldd	r16, Y+49	; 0x31
    2528:	1a a9       	ldd	r17, Y+50	; 0x32
    252a:	2b a9       	ldd	r18, Y+51	; 0x33
    252c:	3c a9       	ldd	r19, Y+52	; 0x34
    252e:	0a 19       	sub	r16, r10
    2530:	1b 09       	sbc	r17, r11
    2532:	2c 09       	sbc	r18, r12
    2534:	3d 09       	sbc	r19, r13
    2536:	58 01       	movw	r10, r16
    2538:	69 01       	movw	r12, r18
    253a:	22 24       	eor	r2, r2
    253c:	33 24       	eor	r3, r3
    253e:	21 01       	movw	r4, r2
    2540:	2d a9       	ldd	r18, Y+53	; 0x35
    2542:	3e a9       	ldd	r19, Y+54	; 0x36
    2544:	4f a9       	ldd	r20, Y+55	; 0x37
    2546:	58 ad       	ldd	r21, Y+56	; 0x38
    2548:	26 15       	cp	r18, r6
    254a:	37 05       	cpc	r19, r7
    254c:	48 05       	cpc	r20, r8
    254e:	59 05       	cpc	r21, r9
    2550:	28 f4       	brcc	.+10     	; 0x255c <__moddi3+0xef6>
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	28 2e       	mov	r2, r24
    2556:	31 2c       	mov	r3, r1
    2558:	41 2c       	mov	r4, r1
    255a:	51 2c       	mov	r5, r1
    255c:	86 01       	movw	r16, r12
    255e:	75 01       	movw	r14, r10
    2560:	e2 18       	sub	r14, r2
    2562:	f3 08       	sbc	r15, r3
    2564:	04 09       	sbc	r16, r4
    2566:	15 09       	sbc	r17, r5
    2568:	a8 01       	movw	r20, r16
    256a:	97 01       	movw	r18, r14
    256c:	e2 96       	adiw	r28, 0x32	; 50
    256e:	0f ac       	ldd	r0, Y+63	; 0x3f
    2570:	e2 97       	sbiw	r28, 0x32	; 50
    2572:	04 c0       	rjmp	.+8      	; 0x257c <__moddi3+0xf16>
    2574:	22 0f       	add	r18, r18
    2576:	33 1f       	adc	r19, r19
    2578:	44 1f       	adc	r20, r20
    257a:	55 1f       	adc	r21, r21
    257c:	0a 94       	dec	r0
    257e:	d2 f7       	brpl	.-12     	; 0x2574 <__moddi3+0xf0e>
    2580:	d4 01       	movw	r26, r8
    2582:	c3 01       	movw	r24, r6
    2584:	e3 96       	adiw	r28, 0x33	; 51
    2586:	0f ac       	ldd	r0, Y+63	; 0x3f
    2588:	e3 97       	sbiw	r28, 0x33	; 51
    258a:	04 c0       	rjmp	.+8      	; 0x2594 <__moddi3+0xf2e>
    258c:	b6 95       	lsr	r27
    258e:	a7 95       	ror	r26
    2590:	97 95       	ror	r25
    2592:	87 95       	ror	r24
    2594:	0a 94       	dec	r0
    2596:	d2 f7       	brpl	.-12     	; 0x258c <__moddi3+0xf26>
    2598:	28 2b       	or	r18, r24
    259a:	39 2b       	or	r19, r25
    259c:	4a 2b       	or	r20, r26
    259e:	5b 2b       	or	r21, r27
    25a0:	29 a7       	std	Y+41, r18	; 0x29
    25a2:	3a a7       	std	Y+42, r19	; 0x2a
    25a4:	4b a7       	std	Y+43, r20	; 0x2b
    25a6:	5c a7       	std	Y+44, r21	; 0x2c
    25a8:	e3 96       	adiw	r28, 0x33	; 51
    25aa:	0f ac       	ldd	r0, Y+63	; 0x3f
    25ac:	e3 97       	sbiw	r28, 0x33	; 51
    25ae:	04 c0       	rjmp	.+8      	; 0x25b8 <__moddi3+0xf52>
    25b0:	16 95       	lsr	r17
    25b2:	07 95       	ror	r16
    25b4:	f7 94       	ror	r15
    25b6:	e7 94       	ror	r14
    25b8:	0a 94       	dec	r0
    25ba:	d2 f7       	brpl	.-12     	; 0x25b0 <__moddi3+0xf4a>
    25bc:	ed a6       	std	Y+45, r14	; 0x2d
    25be:	fe a6       	std	Y+46, r15	; 0x2e
    25c0:	0f a7       	std	Y+47, r16	; 0x2f
    25c2:	18 ab       	std	Y+48, r17	; 0x30
    25c4:	29 8b       	std	Y+17, r18	; 0x11
    25c6:	8a a5       	ldd	r24, Y+42	; 0x2a
    25c8:	8a 8b       	std	Y+18, r24	; 0x12
    25ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    25cc:	8b 8b       	std	Y+19, r24	; 0x13
    25ce:	8c a5       	ldd	r24, Y+44	; 0x2c
    25d0:	8c 8b       	std	Y+20, r24	; 0x14
    25d2:	ed 8a       	std	Y+21, r14	; 0x15
    25d4:	8e a5       	ldd	r24, Y+46	; 0x2e
    25d6:	8e 8b       	std	Y+22, r24	; 0x16
    25d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25da:	8f 8b       	std	Y+23, r24	; 0x17
    25dc:	88 a9       	ldd	r24, Y+48	; 0x30
    25de:	88 8f       	std	Y+24, r24	; 0x18
    25e0:	e1 96       	adiw	r28, 0x31	; 49
    25e2:	4c ad       	ldd	r20, Y+60	; 0x3c
    25e4:	5d ad       	ldd	r21, Y+61	; 0x3d
    25e6:	6e ad       	ldd	r22, Y+62	; 0x3e
    25e8:	7f ad       	ldd	r23, Y+63	; 0x3f
    25ea:	e1 97       	sbiw	r28, 0x31	; 49
    25ec:	41 15       	cp	r20, r1
    25ee:	51 05       	cpc	r21, r1
    25f0:	61 05       	cpc	r22, r1
    25f2:	71 05       	cpc	r23, r1
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <__moddi3+0xf92>
    25f6:	67 c0       	rjmp	.+206    	; 0x26c6 <__moddi3+0x1060>
    25f8:	89 89       	ldd	r24, Y+17	; 0x11
    25fa:	2a 89       	ldd	r18, Y+18	; 0x12
    25fc:	3b 89       	ldd	r19, Y+19	; 0x13
    25fe:	4c 89       	ldd	r20, Y+20	; 0x14
    2600:	5d 89       	ldd	r21, Y+21	; 0x15
    2602:	ae 89       	ldd	r26, Y+22	; 0x16
    2604:	bf 89       	ldd	r27, Y+23	; 0x17
    2606:	18 8d       	ldd	r17, Y+24	; 0x18
    2608:	f8 2f       	mov	r31, r24
    260a:	f1 95       	neg	r31
    260c:	91 e0       	ldi	r25, 0x01	; 1
    260e:	1f 16       	cp	r1, r31
    2610:	08 f0       	brcs	.+2      	; 0x2614 <__moddi3+0xfae>
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	82 2f       	mov	r24, r18
    2616:	81 95       	neg	r24
    2618:	21 e0       	ldi	r18, 0x01	; 1
    261a:	18 16       	cp	r1, r24
    261c:	08 f0       	brcs	.+2      	; 0x2620 <__moddi3+0xfba>
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	e8 2f       	mov	r30, r24
    2622:	e9 1b       	sub	r30, r25
    2624:	91 e0       	ldi	r25, 0x01	; 1
    2626:	8e 17       	cp	r24, r30
    2628:	08 f0       	brcs	.+2      	; 0x262c <__moddi3+0xfc6>
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	29 2b       	or	r18, r25
    262e:	83 2f       	mov	r24, r19
    2630:	81 95       	neg	r24
    2632:	31 e0       	ldi	r19, 0x01	; 1
    2634:	18 16       	cp	r1, r24
    2636:	08 f0       	brcs	.+2      	; 0x263a <__moddi3+0xfd4>
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	78 2f       	mov	r23, r24
    263c:	72 1b       	sub	r23, r18
    263e:	91 e0       	ldi	r25, 0x01	; 1
    2640:	87 17       	cp	r24, r23
    2642:	08 f0       	brcs	.+2      	; 0x2646 <__moddi3+0xfe0>
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	39 2b       	or	r19, r25
    2648:	84 2f       	mov	r24, r20
    264a:	81 95       	neg	r24
    264c:	21 e0       	ldi	r18, 0x01	; 1
    264e:	18 16       	cp	r1, r24
    2650:	08 f0       	brcs	.+2      	; 0x2654 <__moddi3+0xfee>
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	68 2f       	mov	r22, r24
    2656:	63 1b       	sub	r22, r19
    2658:	91 e0       	ldi	r25, 0x01	; 1
    265a:	86 17       	cp	r24, r22
    265c:	08 f0       	brcs	.+2      	; 0x2660 <__moddi3+0xffa>
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	29 2b       	or	r18, r25
    2662:	85 2f       	mov	r24, r21
    2664:	81 95       	neg	r24
    2666:	31 e0       	ldi	r19, 0x01	; 1
    2668:	18 16       	cp	r1, r24
    266a:	08 f0       	brcs	.+2      	; 0x266e <__moddi3+0x1008>
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	58 2f       	mov	r21, r24
    2670:	52 1b       	sub	r21, r18
    2672:	91 e0       	ldi	r25, 0x01	; 1
    2674:	85 17       	cp	r24, r21
    2676:	08 f0       	brcs	.+2      	; 0x267a <__moddi3+0x1014>
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	39 2b       	or	r19, r25
    267c:	8a 2f       	mov	r24, r26
    267e:	81 95       	neg	r24
    2680:	21 e0       	ldi	r18, 0x01	; 1
    2682:	18 16       	cp	r1, r24
    2684:	08 f0       	brcs	.+2      	; 0x2688 <__moddi3+0x1022>
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	48 2f       	mov	r20, r24
    268a:	43 1b       	sub	r20, r19
    268c:	91 e0       	ldi	r25, 0x01	; 1
    268e:	84 17       	cp	r24, r20
    2690:	08 f0       	brcs	.+2      	; 0x2694 <__moddi3+0x102e>
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	29 2b       	or	r18, r25
    2696:	8b 2f       	mov	r24, r27
    2698:	81 95       	neg	r24
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	18 16       	cp	r1, r24
    269e:	08 f0       	brcs	.+2      	; 0x26a2 <__moddi3+0x103c>
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	38 2f       	mov	r19, r24
    26a4:	32 1b       	sub	r19, r18
    26a6:	21 e0       	ldi	r18, 0x01	; 1
    26a8:	83 17       	cp	r24, r19
    26aa:	08 f0       	brcs	.+2      	; 0x26ae <__moddi3+0x1048>
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	92 2b       	or	r25, r18
    26b0:	81 2f       	mov	r24, r17
    26b2:	81 95       	neg	r24
    26b4:	89 1b       	sub	r24, r25
    26b6:	f9 8b       	std	Y+17, r31	; 0x11
    26b8:	ea 8b       	std	Y+18, r30	; 0x12
    26ba:	7b 8b       	std	Y+19, r23	; 0x13
    26bc:	6c 8b       	std	Y+20, r22	; 0x14
    26be:	5d 8b       	std	Y+21, r21	; 0x15
    26c0:	4e 8b       	std	Y+22, r20	; 0x16
    26c2:	3f 8b       	std	Y+23, r19	; 0x17
    26c4:	88 8f       	std	Y+24, r24	; 0x18
    26c6:	29 89       	ldd	r18, Y+17	; 0x11
    26c8:	3a 89       	ldd	r19, Y+18	; 0x12
    26ca:	4b 89       	ldd	r20, Y+19	; 0x13
    26cc:	5c 89       	ldd	r21, Y+20	; 0x14
    26ce:	6d 89       	ldd	r22, Y+21	; 0x15
    26d0:	7e 89       	ldd	r23, Y+22	; 0x16
    26d2:	8f 89       	ldd	r24, Y+23	; 0x17
    26d4:	98 8d       	ldd	r25, Y+24	; 0x18
    26d6:	c9 58       	subi	r28, 0x89	; 137
    26d8:	df 4f       	sbci	r29, 0xFF	; 255
    26da:	e2 e1       	ldi	r30, 0x12	; 18
    26dc:	0c 94 71 3e 	jmp	0x7ce2	; 0x7ce2 <__epilogue_restores__>

000026e0 <_fpadd_parts>:
    26e0:	a0 e0       	ldi	r26, 0x00	; 0
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e6 e7       	ldi	r30, 0x76	; 118
    26e6:	f3 e1       	ldi	r31, 0x13	; 19
    26e8:	0c 94 55 3e 	jmp	0x7caa	; 0x7caa <__prologue_saves__>
    26ec:	dc 01       	movw	r26, r24
    26ee:	2b 01       	movw	r4, r22
    26f0:	fa 01       	movw	r30, r20
    26f2:	9c 91       	ld	r25, X
    26f4:	92 30       	cpi	r25, 0x02	; 2
    26f6:	08 f4       	brcc	.+2      	; 0x26fa <_fpadd_parts+0x1a>
    26f8:	39 c1       	rjmp	.+626    	; 0x296c <_fpadd_parts+0x28c>
    26fa:	eb 01       	movw	r28, r22
    26fc:	88 81       	ld	r24, Y
    26fe:	82 30       	cpi	r24, 0x02	; 2
    2700:	08 f4       	brcc	.+2      	; 0x2704 <_fpadd_parts+0x24>
    2702:	33 c1       	rjmp	.+614    	; 0x296a <_fpadd_parts+0x28a>
    2704:	94 30       	cpi	r25, 0x04	; 4
    2706:	69 f4       	brne	.+26     	; 0x2722 <_fpadd_parts+0x42>
    2708:	84 30       	cpi	r24, 0x04	; 4
    270a:	09 f0       	breq	.+2      	; 0x270e <_fpadd_parts+0x2e>
    270c:	2f c1       	rjmp	.+606    	; 0x296c <_fpadd_parts+0x28c>
    270e:	11 96       	adiw	r26, 0x01	; 1
    2710:	9c 91       	ld	r25, X
    2712:	11 97       	sbiw	r26, 0x01	; 1
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	98 17       	cp	r25, r24
    2718:	09 f4       	brne	.+2      	; 0x271c <_fpadd_parts+0x3c>
    271a:	28 c1       	rjmp	.+592    	; 0x296c <_fpadd_parts+0x28c>
    271c:	ac e6       	ldi	r26, 0x6C	; 108
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	25 c1       	rjmp	.+586    	; 0x296c <_fpadd_parts+0x28c>
    2722:	84 30       	cpi	r24, 0x04	; 4
    2724:	09 f4       	brne	.+2      	; 0x2728 <_fpadd_parts+0x48>
    2726:	21 c1       	rjmp	.+578    	; 0x296a <_fpadd_parts+0x28a>
    2728:	82 30       	cpi	r24, 0x02	; 2
    272a:	a9 f4       	brne	.+42     	; 0x2756 <_fpadd_parts+0x76>
    272c:	92 30       	cpi	r25, 0x02	; 2
    272e:	09 f0       	breq	.+2      	; 0x2732 <_fpadd_parts+0x52>
    2730:	1d c1       	rjmp	.+570    	; 0x296c <_fpadd_parts+0x28c>
    2732:	9a 01       	movw	r18, r20
    2734:	ad 01       	movw	r20, r26
    2736:	88 e0       	ldi	r24, 0x08	; 8
    2738:	ea 01       	movw	r28, r20
    273a:	09 90       	ld	r0, Y+
    273c:	ae 01       	movw	r20, r28
    273e:	e9 01       	movw	r28, r18
    2740:	09 92       	st	Y+, r0
    2742:	9e 01       	movw	r18, r28
    2744:	81 50       	subi	r24, 0x01	; 1
    2746:	c1 f7       	brne	.-16     	; 0x2738 <_fpadd_parts+0x58>
    2748:	e2 01       	movw	r28, r4
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	11 96       	adiw	r26, 0x01	; 1
    274e:	9c 91       	ld	r25, X
    2750:	89 23       	and	r24, r25
    2752:	81 83       	std	Z+1, r24	; 0x01
    2754:	08 c1       	rjmp	.+528    	; 0x2966 <_fpadd_parts+0x286>
    2756:	92 30       	cpi	r25, 0x02	; 2
    2758:	09 f4       	brne	.+2      	; 0x275c <_fpadd_parts+0x7c>
    275a:	07 c1       	rjmp	.+526    	; 0x296a <_fpadd_parts+0x28a>
    275c:	12 96       	adiw	r26, 0x02	; 2
    275e:	2d 90       	ld	r2, X+
    2760:	3c 90       	ld	r3, X
    2762:	13 97       	sbiw	r26, 0x03	; 3
    2764:	eb 01       	movw	r28, r22
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	9b 81       	ldd	r25, Y+3	; 0x03
    276a:	14 96       	adiw	r26, 0x04	; 4
    276c:	ad 90       	ld	r10, X+
    276e:	bd 90       	ld	r11, X+
    2770:	cd 90       	ld	r12, X+
    2772:	dc 90       	ld	r13, X
    2774:	17 97       	sbiw	r26, 0x07	; 7
    2776:	ec 80       	ldd	r14, Y+4	; 0x04
    2778:	fd 80       	ldd	r15, Y+5	; 0x05
    277a:	0e 81       	ldd	r16, Y+6	; 0x06
    277c:	1f 81       	ldd	r17, Y+7	; 0x07
    277e:	91 01       	movw	r18, r2
    2780:	28 1b       	sub	r18, r24
    2782:	39 0b       	sbc	r19, r25
    2784:	b9 01       	movw	r22, r18
    2786:	37 ff       	sbrs	r19, 7
    2788:	04 c0       	rjmp	.+8      	; 0x2792 <_fpadd_parts+0xb2>
    278a:	66 27       	eor	r22, r22
    278c:	77 27       	eor	r23, r23
    278e:	62 1b       	sub	r22, r18
    2790:	73 0b       	sbc	r23, r19
    2792:	60 32       	cpi	r22, 0x20	; 32
    2794:	71 05       	cpc	r23, r1
    2796:	0c f0       	brlt	.+2      	; 0x279a <_fpadd_parts+0xba>
    2798:	61 c0       	rjmp	.+194    	; 0x285c <_fpadd_parts+0x17c>
    279a:	12 16       	cp	r1, r18
    279c:	13 06       	cpc	r1, r19
    279e:	6c f5       	brge	.+90     	; 0x27fa <_fpadd_parts+0x11a>
    27a0:	37 01       	movw	r6, r14
    27a2:	48 01       	movw	r8, r16
    27a4:	06 2e       	mov	r0, r22
    27a6:	04 c0       	rjmp	.+8      	; 0x27b0 <_fpadd_parts+0xd0>
    27a8:	96 94       	lsr	r9
    27aa:	87 94       	ror	r8
    27ac:	77 94       	ror	r7
    27ae:	67 94       	ror	r6
    27b0:	0a 94       	dec	r0
    27b2:	d2 f7       	brpl	.-12     	; 0x27a8 <_fpadd_parts+0xc8>
    27b4:	21 e0       	ldi	r18, 0x01	; 1
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e0       	ldi	r20, 0x00	; 0
    27ba:	50 e0       	ldi	r21, 0x00	; 0
    27bc:	04 c0       	rjmp	.+8      	; 0x27c6 <_fpadd_parts+0xe6>
    27be:	22 0f       	add	r18, r18
    27c0:	33 1f       	adc	r19, r19
    27c2:	44 1f       	adc	r20, r20
    27c4:	55 1f       	adc	r21, r21
    27c6:	6a 95       	dec	r22
    27c8:	d2 f7       	brpl	.-12     	; 0x27be <_fpadd_parts+0xde>
    27ca:	21 50       	subi	r18, 0x01	; 1
    27cc:	30 40       	sbci	r19, 0x00	; 0
    27ce:	40 40       	sbci	r20, 0x00	; 0
    27d0:	50 40       	sbci	r21, 0x00	; 0
    27d2:	2e 21       	and	r18, r14
    27d4:	3f 21       	and	r19, r15
    27d6:	40 23       	and	r20, r16
    27d8:	51 23       	and	r21, r17
    27da:	21 15       	cp	r18, r1
    27dc:	31 05       	cpc	r19, r1
    27de:	41 05       	cpc	r20, r1
    27e0:	51 05       	cpc	r21, r1
    27e2:	21 f0       	breq	.+8      	; 0x27ec <_fpadd_parts+0x10c>
    27e4:	21 e0       	ldi	r18, 0x01	; 1
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e0       	ldi	r20, 0x00	; 0
    27ea:	50 e0       	ldi	r21, 0x00	; 0
    27ec:	79 01       	movw	r14, r18
    27ee:	8a 01       	movw	r16, r20
    27f0:	e6 28       	or	r14, r6
    27f2:	f7 28       	or	r15, r7
    27f4:	08 29       	or	r16, r8
    27f6:	19 29       	or	r17, r9
    27f8:	3c c0       	rjmp	.+120    	; 0x2872 <_fpadd_parts+0x192>
    27fa:	23 2b       	or	r18, r19
    27fc:	d1 f1       	breq	.+116    	; 0x2872 <_fpadd_parts+0x192>
    27fe:	26 0e       	add	r2, r22
    2800:	37 1e       	adc	r3, r23
    2802:	35 01       	movw	r6, r10
    2804:	46 01       	movw	r8, r12
    2806:	06 2e       	mov	r0, r22
    2808:	04 c0       	rjmp	.+8      	; 0x2812 <_fpadd_parts+0x132>
    280a:	96 94       	lsr	r9
    280c:	87 94       	ror	r8
    280e:	77 94       	ror	r7
    2810:	67 94       	ror	r6
    2812:	0a 94       	dec	r0
    2814:	d2 f7       	brpl	.-12     	; 0x280a <_fpadd_parts+0x12a>
    2816:	21 e0       	ldi	r18, 0x01	; 1
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	50 e0       	ldi	r21, 0x00	; 0
    281e:	04 c0       	rjmp	.+8      	; 0x2828 <_fpadd_parts+0x148>
    2820:	22 0f       	add	r18, r18
    2822:	33 1f       	adc	r19, r19
    2824:	44 1f       	adc	r20, r20
    2826:	55 1f       	adc	r21, r21
    2828:	6a 95       	dec	r22
    282a:	d2 f7       	brpl	.-12     	; 0x2820 <_fpadd_parts+0x140>
    282c:	21 50       	subi	r18, 0x01	; 1
    282e:	30 40       	sbci	r19, 0x00	; 0
    2830:	40 40       	sbci	r20, 0x00	; 0
    2832:	50 40       	sbci	r21, 0x00	; 0
    2834:	2a 21       	and	r18, r10
    2836:	3b 21       	and	r19, r11
    2838:	4c 21       	and	r20, r12
    283a:	5d 21       	and	r21, r13
    283c:	21 15       	cp	r18, r1
    283e:	31 05       	cpc	r19, r1
    2840:	41 05       	cpc	r20, r1
    2842:	51 05       	cpc	r21, r1
    2844:	21 f0       	breq	.+8      	; 0x284e <_fpadd_parts+0x16e>
    2846:	21 e0       	ldi	r18, 0x01	; 1
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	59 01       	movw	r10, r18
    2850:	6a 01       	movw	r12, r20
    2852:	a6 28       	or	r10, r6
    2854:	b7 28       	or	r11, r7
    2856:	c8 28       	or	r12, r8
    2858:	d9 28       	or	r13, r9
    285a:	0b c0       	rjmp	.+22     	; 0x2872 <_fpadd_parts+0x192>
    285c:	82 15       	cp	r24, r2
    285e:	93 05       	cpc	r25, r3
    2860:	2c f0       	brlt	.+10     	; 0x286c <_fpadd_parts+0x18c>
    2862:	1c 01       	movw	r2, r24
    2864:	aa 24       	eor	r10, r10
    2866:	bb 24       	eor	r11, r11
    2868:	65 01       	movw	r12, r10
    286a:	03 c0       	rjmp	.+6      	; 0x2872 <_fpadd_parts+0x192>
    286c:	ee 24       	eor	r14, r14
    286e:	ff 24       	eor	r15, r15
    2870:	87 01       	movw	r16, r14
    2872:	11 96       	adiw	r26, 0x01	; 1
    2874:	9c 91       	ld	r25, X
    2876:	d2 01       	movw	r26, r4
    2878:	11 96       	adiw	r26, 0x01	; 1
    287a:	8c 91       	ld	r24, X
    287c:	98 17       	cp	r25, r24
    287e:	09 f4       	brne	.+2      	; 0x2882 <_fpadd_parts+0x1a2>
    2880:	45 c0       	rjmp	.+138    	; 0x290c <_fpadd_parts+0x22c>
    2882:	99 23       	and	r25, r25
    2884:	39 f0       	breq	.+14     	; 0x2894 <_fpadd_parts+0x1b4>
    2886:	a8 01       	movw	r20, r16
    2888:	97 01       	movw	r18, r14
    288a:	2a 19       	sub	r18, r10
    288c:	3b 09       	sbc	r19, r11
    288e:	4c 09       	sbc	r20, r12
    2890:	5d 09       	sbc	r21, r13
    2892:	06 c0       	rjmp	.+12     	; 0x28a0 <_fpadd_parts+0x1c0>
    2894:	a6 01       	movw	r20, r12
    2896:	95 01       	movw	r18, r10
    2898:	2e 19       	sub	r18, r14
    289a:	3f 09       	sbc	r19, r15
    289c:	40 0b       	sbc	r20, r16
    289e:	51 0b       	sbc	r21, r17
    28a0:	57 fd       	sbrc	r21, 7
    28a2:	08 c0       	rjmp	.+16     	; 0x28b4 <_fpadd_parts+0x1d4>
    28a4:	11 82       	std	Z+1, r1	; 0x01
    28a6:	33 82       	std	Z+3, r3	; 0x03
    28a8:	22 82       	std	Z+2, r2	; 0x02
    28aa:	24 83       	std	Z+4, r18	; 0x04
    28ac:	35 83       	std	Z+5, r19	; 0x05
    28ae:	46 83       	std	Z+6, r20	; 0x06
    28b0:	57 83       	std	Z+7, r21	; 0x07
    28b2:	1d c0       	rjmp	.+58     	; 0x28ee <_fpadd_parts+0x20e>
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	81 83       	std	Z+1, r24	; 0x01
    28b8:	33 82       	std	Z+3, r3	; 0x03
    28ba:	22 82       	std	Z+2, r2	; 0x02
    28bc:	88 27       	eor	r24, r24
    28be:	99 27       	eor	r25, r25
    28c0:	dc 01       	movw	r26, r24
    28c2:	82 1b       	sub	r24, r18
    28c4:	93 0b       	sbc	r25, r19
    28c6:	a4 0b       	sbc	r26, r20
    28c8:	b5 0b       	sbc	r27, r21
    28ca:	84 83       	std	Z+4, r24	; 0x04
    28cc:	95 83       	std	Z+5, r25	; 0x05
    28ce:	a6 83       	std	Z+6, r26	; 0x06
    28d0:	b7 83       	std	Z+7, r27	; 0x07
    28d2:	0d c0       	rjmp	.+26     	; 0x28ee <_fpadd_parts+0x20e>
    28d4:	22 0f       	add	r18, r18
    28d6:	33 1f       	adc	r19, r19
    28d8:	44 1f       	adc	r20, r20
    28da:	55 1f       	adc	r21, r21
    28dc:	24 83       	std	Z+4, r18	; 0x04
    28de:	35 83       	std	Z+5, r19	; 0x05
    28e0:	46 83       	std	Z+6, r20	; 0x06
    28e2:	57 83       	std	Z+7, r21	; 0x07
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	93 83       	std	Z+3, r25	; 0x03
    28ec:	82 83       	std	Z+2, r24	; 0x02
    28ee:	24 81       	ldd	r18, Z+4	; 0x04
    28f0:	35 81       	ldd	r19, Z+5	; 0x05
    28f2:	46 81       	ldd	r20, Z+6	; 0x06
    28f4:	57 81       	ldd	r21, Z+7	; 0x07
    28f6:	da 01       	movw	r26, r20
    28f8:	c9 01       	movw	r24, r18
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	a1 09       	sbc	r26, r1
    28fe:	b1 09       	sbc	r27, r1
    2900:	8f 5f       	subi	r24, 0xFF	; 255
    2902:	9f 4f       	sbci	r25, 0xFF	; 255
    2904:	af 4f       	sbci	r26, 0xFF	; 255
    2906:	bf 43       	sbci	r27, 0x3F	; 63
    2908:	28 f3       	brcs	.-54     	; 0x28d4 <_fpadd_parts+0x1f4>
    290a:	0b c0       	rjmp	.+22     	; 0x2922 <_fpadd_parts+0x242>
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	33 82       	std	Z+3, r3	; 0x03
    2910:	22 82       	std	Z+2, r2	; 0x02
    2912:	ea 0c       	add	r14, r10
    2914:	fb 1c       	adc	r15, r11
    2916:	0c 1d       	adc	r16, r12
    2918:	1d 1d       	adc	r17, r13
    291a:	e4 82       	std	Z+4, r14	; 0x04
    291c:	f5 82       	std	Z+5, r15	; 0x05
    291e:	06 83       	std	Z+6, r16	; 0x06
    2920:	17 83       	std	Z+7, r17	; 0x07
    2922:	83 e0       	ldi	r24, 0x03	; 3
    2924:	80 83       	st	Z, r24
    2926:	24 81       	ldd	r18, Z+4	; 0x04
    2928:	35 81       	ldd	r19, Z+5	; 0x05
    292a:	46 81       	ldd	r20, Z+6	; 0x06
    292c:	57 81       	ldd	r21, Z+7	; 0x07
    292e:	57 ff       	sbrs	r21, 7
    2930:	1a c0       	rjmp	.+52     	; 0x2966 <_fpadd_parts+0x286>
    2932:	c9 01       	movw	r24, r18
    2934:	aa 27       	eor	r26, r26
    2936:	97 fd       	sbrc	r25, 7
    2938:	a0 95       	com	r26
    293a:	ba 2f       	mov	r27, r26
    293c:	81 70       	andi	r24, 0x01	; 1
    293e:	90 70       	andi	r25, 0x00	; 0
    2940:	a0 70       	andi	r26, 0x00	; 0
    2942:	b0 70       	andi	r27, 0x00	; 0
    2944:	56 95       	lsr	r21
    2946:	47 95       	ror	r20
    2948:	37 95       	ror	r19
    294a:	27 95       	ror	r18
    294c:	82 2b       	or	r24, r18
    294e:	93 2b       	or	r25, r19
    2950:	a4 2b       	or	r26, r20
    2952:	b5 2b       	or	r27, r21
    2954:	84 83       	std	Z+4, r24	; 0x04
    2956:	95 83       	std	Z+5, r25	; 0x05
    2958:	a6 83       	std	Z+6, r26	; 0x06
    295a:	b7 83       	std	Z+7, r27	; 0x07
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	93 81       	ldd	r25, Z+3	; 0x03
    2960:	01 96       	adiw	r24, 0x01	; 1
    2962:	93 83       	std	Z+3, r25	; 0x03
    2964:	82 83       	std	Z+2, r24	; 0x02
    2966:	df 01       	movw	r26, r30
    2968:	01 c0       	rjmp	.+2      	; 0x296c <_fpadd_parts+0x28c>
    296a:	d2 01       	movw	r26, r4
    296c:	cd 01       	movw	r24, r26
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	e2 e1       	ldi	r30, 0x12	; 18
    2974:	0c 94 71 3e 	jmp	0x7ce2	; 0x7ce2 <__epilogue_restores__>

00002978 <__subsf3>:
    2978:	a0 e2       	ldi	r26, 0x20	; 32
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e2 ec       	ldi	r30, 0xC2	; 194
    297e:	f4 e1       	ldi	r31, 0x14	; 20
    2980:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <__prologue_saves__+0x18>
    2984:	69 83       	std	Y+1, r22	; 0x01
    2986:	7a 83       	std	Y+2, r23	; 0x02
    2988:	8b 83       	std	Y+3, r24	; 0x03
    298a:	9c 83       	std	Y+4, r25	; 0x04
    298c:	2d 83       	std	Y+5, r18	; 0x05
    298e:	3e 83       	std	Y+6, r19	; 0x06
    2990:	4f 83       	std	Y+7, r20	; 0x07
    2992:	58 87       	std	Y+8, r21	; 0x08
    2994:	e9 e0       	ldi	r30, 0x09	; 9
    2996:	ee 2e       	mov	r14, r30
    2998:	f1 2c       	mov	r15, r1
    299a:	ec 0e       	add	r14, r28
    299c:	fd 1e       	adc	r15, r29
    299e:	ce 01       	movw	r24, r28
    29a0:	01 96       	adiw	r24, 0x01	; 1
    29a2:	b7 01       	movw	r22, r14
    29a4:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    29a8:	8e 01       	movw	r16, r28
    29aa:	0f 5e       	subi	r16, 0xEF	; 239
    29ac:	1f 4f       	sbci	r17, 0xFF	; 255
    29ae:	ce 01       	movw	r24, r28
    29b0:	05 96       	adiw	r24, 0x05	; 5
    29b2:	b8 01       	movw	r22, r16
    29b4:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    29b8:	8a 89       	ldd	r24, Y+18	; 0x12
    29ba:	91 e0       	ldi	r25, 0x01	; 1
    29bc:	89 27       	eor	r24, r25
    29be:	8a 8b       	std	Y+18, r24	; 0x12
    29c0:	c7 01       	movw	r24, r14
    29c2:	b8 01       	movw	r22, r16
    29c4:	ae 01       	movw	r20, r28
    29c6:	47 5e       	subi	r20, 0xE7	; 231
    29c8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ca:	0e 94 70 13 	call	0x26e0	; 0x26e0 <_fpadd_parts>
    29ce:	0e 94 af 19 	call	0x335e	; 0x335e <__pack_f>
    29d2:	a0 96       	adiw	r28, 0x20	; 32
    29d4:	e6 e0       	ldi	r30, 0x06	; 6
    29d6:	0c 94 7d 3e 	jmp	0x7cfa	; 0x7cfa <__epilogue_restores__+0x18>

000029da <__addsf3>:
    29da:	a0 e2       	ldi	r26, 0x20	; 32
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	e3 ef       	ldi	r30, 0xF3	; 243
    29e0:	f4 e1       	ldi	r31, 0x14	; 20
    29e2:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <__prologue_saves__+0x18>
    29e6:	69 83       	std	Y+1, r22	; 0x01
    29e8:	7a 83       	std	Y+2, r23	; 0x02
    29ea:	8b 83       	std	Y+3, r24	; 0x03
    29ec:	9c 83       	std	Y+4, r25	; 0x04
    29ee:	2d 83       	std	Y+5, r18	; 0x05
    29f0:	3e 83       	std	Y+6, r19	; 0x06
    29f2:	4f 83       	std	Y+7, r20	; 0x07
    29f4:	58 87       	std	Y+8, r21	; 0x08
    29f6:	f9 e0       	ldi	r31, 0x09	; 9
    29f8:	ef 2e       	mov	r14, r31
    29fa:	f1 2c       	mov	r15, r1
    29fc:	ec 0e       	add	r14, r28
    29fe:	fd 1e       	adc	r15, r29
    2a00:	ce 01       	movw	r24, r28
    2a02:	01 96       	adiw	r24, 0x01	; 1
    2a04:	b7 01       	movw	r22, r14
    2a06:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2a0a:	8e 01       	movw	r16, r28
    2a0c:	0f 5e       	subi	r16, 0xEF	; 239
    2a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a10:	ce 01       	movw	r24, r28
    2a12:	05 96       	adiw	r24, 0x05	; 5
    2a14:	b8 01       	movw	r22, r16
    2a16:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2a1a:	c7 01       	movw	r24, r14
    2a1c:	b8 01       	movw	r22, r16
    2a1e:	ae 01       	movw	r20, r28
    2a20:	47 5e       	subi	r20, 0xE7	; 231
    2a22:	5f 4f       	sbci	r21, 0xFF	; 255
    2a24:	0e 94 70 13 	call	0x26e0	; 0x26e0 <_fpadd_parts>
    2a28:	0e 94 af 19 	call	0x335e	; 0x335e <__pack_f>
    2a2c:	a0 96       	adiw	r28, 0x20	; 32
    2a2e:	e6 e0       	ldi	r30, 0x06	; 6
    2a30:	0c 94 7d 3e 	jmp	0x7cfa	; 0x7cfa <__epilogue_restores__+0x18>

00002a34 <__mulsf3>:
    2a34:	a0 e2       	ldi	r26, 0x20	; 32
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e0 e2       	ldi	r30, 0x20	; 32
    2a3a:	f5 e1       	ldi	r31, 0x15	; 21
    2a3c:	0c 94 55 3e 	jmp	0x7caa	; 0x7caa <__prologue_saves__>
    2a40:	69 83       	std	Y+1, r22	; 0x01
    2a42:	7a 83       	std	Y+2, r23	; 0x02
    2a44:	8b 83       	std	Y+3, r24	; 0x03
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	2d 83       	std	Y+5, r18	; 0x05
    2a4a:	3e 83       	std	Y+6, r19	; 0x06
    2a4c:	4f 83       	std	Y+7, r20	; 0x07
    2a4e:	58 87       	std	Y+8, r21	; 0x08
    2a50:	ce 01       	movw	r24, r28
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	be 01       	movw	r22, r28
    2a56:	67 5f       	subi	r22, 0xF7	; 247
    2a58:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5a:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2a5e:	ce 01       	movw	r24, r28
    2a60:	05 96       	adiw	r24, 0x05	; 5
    2a62:	be 01       	movw	r22, r28
    2a64:	6f 5e       	subi	r22, 0xEF	; 239
    2a66:	7f 4f       	sbci	r23, 0xFF	; 255
    2a68:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2a6c:	99 85       	ldd	r25, Y+9	; 0x09
    2a6e:	92 30       	cpi	r25, 0x02	; 2
    2a70:	88 f0       	brcs	.+34     	; 0x2a94 <__mulsf3+0x60>
    2a72:	89 89       	ldd	r24, Y+17	; 0x11
    2a74:	82 30       	cpi	r24, 0x02	; 2
    2a76:	c8 f0       	brcs	.+50     	; 0x2aaa <__mulsf3+0x76>
    2a78:	94 30       	cpi	r25, 0x04	; 4
    2a7a:	19 f4       	brne	.+6      	; 0x2a82 <__mulsf3+0x4e>
    2a7c:	82 30       	cpi	r24, 0x02	; 2
    2a7e:	51 f4       	brne	.+20     	; 0x2a94 <__mulsf3+0x60>
    2a80:	04 c0       	rjmp	.+8      	; 0x2a8a <__mulsf3+0x56>
    2a82:	84 30       	cpi	r24, 0x04	; 4
    2a84:	29 f4       	brne	.+10     	; 0x2a90 <__mulsf3+0x5c>
    2a86:	92 30       	cpi	r25, 0x02	; 2
    2a88:	81 f4       	brne	.+32     	; 0x2aaa <__mulsf3+0x76>
    2a8a:	8c e6       	ldi	r24, 0x6C	; 108
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	c6 c0       	rjmp	.+396    	; 0x2c1c <__mulsf3+0x1e8>
    2a90:	92 30       	cpi	r25, 0x02	; 2
    2a92:	49 f4       	brne	.+18     	; 0x2aa6 <__mulsf3+0x72>
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a98:	8a 89       	ldd	r24, Y+18	; 0x12
    2a9a:	98 13       	cpse	r25, r24
    2a9c:	21 e0       	ldi	r18, 0x01	; 1
    2a9e:	2a 87       	std	Y+10, r18	; 0x0a
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	09 96       	adiw	r24, 0x09	; 9
    2aa4:	bb c0       	rjmp	.+374    	; 0x2c1c <__mulsf3+0x1e8>
    2aa6:	82 30       	cpi	r24, 0x02	; 2
    2aa8:	49 f4       	brne	.+18     	; 0x2abc <__mulsf3+0x88>
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aae:	8a 89       	ldd	r24, Y+18	; 0x12
    2ab0:	98 13       	cpse	r25, r24
    2ab2:	21 e0       	ldi	r18, 0x01	; 1
    2ab4:	2a 8b       	std	Y+18, r18	; 0x12
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	41 96       	adiw	r24, 0x11	; 17
    2aba:	b0 c0       	rjmp	.+352    	; 0x2c1c <__mulsf3+0x1e8>
    2abc:	2d 84       	ldd	r2, Y+13	; 0x0d
    2abe:	3e 84       	ldd	r3, Y+14	; 0x0e
    2ac0:	4f 84       	ldd	r4, Y+15	; 0x0f
    2ac2:	58 88       	ldd	r5, Y+16	; 0x10
    2ac4:	6d 88       	ldd	r6, Y+21	; 0x15
    2ac6:	7e 88       	ldd	r7, Y+22	; 0x16
    2ac8:	8f 88       	ldd	r8, Y+23	; 0x17
    2aca:	98 8c       	ldd	r9, Y+24	; 0x18
    2acc:	ee 24       	eor	r14, r14
    2ace:	ff 24       	eor	r15, r15
    2ad0:	87 01       	movw	r16, r14
    2ad2:	aa 24       	eor	r10, r10
    2ad4:	bb 24       	eor	r11, r11
    2ad6:	65 01       	movw	r12, r10
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	50 e0       	ldi	r21, 0x00	; 0
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	e0 e0       	ldi	r30, 0x00	; 0
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	c1 01       	movw	r24, r2
    2ae6:	81 70       	andi	r24, 0x01	; 1
    2ae8:	90 70       	andi	r25, 0x00	; 0
    2aea:	89 2b       	or	r24, r25
    2aec:	e9 f0       	breq	.+58     	; 0x2b28 <__mulsf3+0xf4>
    2aee:	e6 0c       	add	r14, r6
    2af0:	f7 1c       	adc	r15, r7
    2af2:	08 1d       	adc	r16, r8
    2af4:	19 1d       	adc	r17, r9
    2af6:	9a 01       	movw	r18, r20
    2af8:	ab 01       	movw	r20, r22
    2afa:	2a 0d       	add	r18, r10
    2afc:	3b 1d       	adc	r19, r11
    2afe:	4c 1d       	adc	r20, r12
    2b00:	5d 1d       	adc	r21, r13
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	a0 e0       	ldi	r26, 0x00	; 0
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	e6 14       	cp	r14, r6
    2b0c:	f7 04       	cpc	r15, r7
    2b0e:	08 05       	cpc	r16, r8
    2b10:	19 05       	cpc	r17, r9
    2b12:	20 f4       	brcc	.+8      	; 0x2b1c <__mulsf3+0xe8>
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	a0 e0       	ldi	r26, 0x00	; 0
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	ba 01       	movw	r22, r20
    2b1e:	a9 01       	movw	r20, r18
    2b20:	48 0f       	add	r20, r24
    2b22:	59 1f       	adc	r21, r25
    2b24:	6a 1f       	adc	r22, r26
    2b26:	7b 1f       	adc	r23, r27
    2b28:	aa 0c       	add	r10, r10
    2b2a:	bb 1c       	adc	r11, r11
    2b2c:	cc 1c       	adc	r12, r12
    2b2e:	dd 1c       	adc	r13, r13
    2b30:	97 fe       	sbrs	r9, 7
    2b32:	08 c0       	rjmp	.+16     	; 0x2b44 <__mulsf3+0x110>
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	a0 e0       	ldi	r26, 0x00	; 0
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	a8 2a       	or	r10, r24
    2b3e:	b9 2a       	or	r11, r25
    2b40:	ca 2a       	or	r12, r26
    2b42:	db 2a       	or	r13, r27
    2b44:	31 96       	adiw	r30, 0x01	; 1
    2b46:	e0 32       	cpi	r30, 0x20	; 32
    2b48:	f1 05       	cpc	r31, r1
    2b4a:	49 f0       	breq	.+18     	; 0x2b5e <__mulsf3+0x12a>
    2b4c:	66 0c       	add	r6, r6
    2b4e:	77 1c       	adc	r7, r7
    2b50:	88 1c       	adc	r8, r8
    2b52:	99 1c       	adc	r9, r9
    2b54:	56 94       	lsr	r5
    2b56:	47 94       	ror	r4
    2b58:	37 94       	ror	r3
    2b5a:	27 94       	ror	r2
    2b5c:	c3 cf       	rjmp	.-122    	; 0x2ae4 <__mulsf3+0xb0>
    2b5e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b60:	ea 89       	ldd	r30, Y+18	; 0x12
    2b62:	2b 89       	ldd	r18, Y+19	; 0x13
    2b64:	3c 89       	ldd	r19, Y+20	; 0x14
    2b66:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b68:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b6a:	28 0f       	add	r18, r24
    2b6c:	39 1f       	adc	r19, r25
    2b6e:	2e 5f       	subi	r18, 0xFE	; 254
    2b70:	3f 4f       	sbci	r19, 0xFF	; 255
    2b72:	17 c0       	rjmp	.+46     	; 0x2ba2 <__mulsf3+0x16e>
    2b74:	ca 01       	movw	r24, r20
    2b76:	81 70       	andi	r24, 0x01	; 1
    2b78:	90 70       	andi	r25, 0x00	; 0
    2b7a:	89 2b       	or	r24, r25
    2b7c:	61 f0       	breq	.+24     	; 0x2b96 <__mulsf3+0x162>
    2b7e:	16 95       	lsr	r17
    2b80:	07 95       	ror	r16
    2b82:	f7 94       	ror	r15
    2b84:	e7 94       	ror	r14
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	a0 e0       	ldi	r26, 0x00	; 0
    2b8c:	b0 e8       	ldi	r27, 0x80	; 128
    2b8e:	e8 2a       	or	r14, r24
    2b90:	f9 2a       	or	r15, r25
    2b92:	0a 2b       	or	r16, r26
    2b94:	1b 2b       	or	r17, r27
    2b96:	76 95       	lsr	r23
    2b98:	67 95       	ror	r22
    2b9a:	57 95       	ror	r21
    2b9c:	47 95       	ror	r20
    2b9e:	2f 5f       	subi	r18, 0xFF	; 255
    2ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba2:	77 fd       	sbrc	r23, 7
    2ba4:	e7 cf       	rjmp	.-50     	; 0x2b74 <__mulsf3+0x140>
    2ba6:	0c c0       	rjmp	.+24     	; 0x2bc0 <__mulsf3+0x18c>
    2ba8:	44 0f       	add	r20, r20
    2baa:	55 1f       	adc	r21, r21
    2bac:	66 1f       	adc	r22, r22
    2bae:	77 1f       	adc	r23, r23
    2bb0:	17 fd       	sbrc	r17, 7
    2bb2:	41 60       	ori	r20, 0x01	; 1
    2bb4:	ee 0c       	add	r14, r14
    2bb6:	ff 1c       	adc	r15, r15
    2bb8:	00 1f       	adc	r16, r16
    2bba:	11 1f       	adc	r17, r17
    2bbc:	21 50       	subi	r18, 0x01	; 1
    2bbe:	30 40       	sbci	r19, 0x00	; 0
    2bc0:	40 30       	cpi	r20, 0x00	; 0
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	59 07       	cpc	r21, r25
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	69 07       	cpc	r22, r25
    2bca:	90 e4       	ldi	r25, 0x40	; 64
    2bcc:	79 07       	cpc	r23, r25
    2bce:	60 f3       	brcs	.-40     	; 0x2ba8 <__mulsf3+0x174>
    2bd0:	2b 8f       	std	Y+27, r18	; 0x1b
    2bd2:	3c 8f       	std	Y+28, r19	; 0x1c
    2bd4:	db 01       	movw	r26, r22
    2bd6:	ca 01       	movw	r24, r20
    2bd8:	8f 77       	andi	r24, 0x7F	; 127
    2bda:	90 70       	andi	r25, 0x00	; 0
    2bdc:	a0 70       	andi	r26, 0x00	; 0
    2bde:	b0 70       	andi	r27, 0x00	; 0
    2be0:	80 34       	cpi	r24, 0x40	; 64
    2be2:	91 05       	cpc	r25, r1
    2be4:	a1 05       	cpc	r26, r1
    2be6:	b1 05       	cpc	r27, r1
    2be8:	61 f4       	brne	.+24     	; 0x2c02 <__mulsf3+0x1ce>
    2bea:	47 fd       	sbrc	r20, 7
    2bec:	0a c0       	rjmp	.+20     	; 0x2c02 <__mulsf3+0x1ce>
    2bee:	e1 14       	cp	r14, r1
    2bf0:	f1 04       	cpc	r15, r1
    2bf2:	01 05       	cpc	r16, r1
    2bf4:	11 05       	cpc	r17, r1
    2bf6:	29 f0       	breq	.+10     	; 0x2c02 <__mulsf3+0x1ce>
    2bf8:	40 5c       	subi	r20, 0xC0	; 192
    2bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    2bfc:	6f 4f       	sbci	r22, 0xFF	; 255
    2bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2c00:	40 78       	andi	r20, 0x80	; 128
    2c02:	1a 8e       	std	Y+26, r1	; 0x1a
    2c04:	fe 17       	cp	r31, r30
    2c06:	11 f0       	breq	.+4      	; 0x2c0c <__mulsf3+0x1d8>
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	8a 8f       	std	Y+26, r24	; 0x1a
    2c0c:	4d 8f       	std	Y+29, r20	; 0x1d
    2c0e:	5e 8f       	std	Y+30, r21	; 0x1e
    2c10:	6f 8f       	std	Y+31, r22	; 0x1f
    2c12:	78 a3       	std	Y+32, r23	; 0x20
    2c14:	83 e0       	ldi	r24, 0x03	; 3
    2c16:	89 8f       	std	Y+25, r24	; 0x19
    2c18:	ce 01       	movw	r24, r28
    2c1a:	49 96       	adiw	r24, 0x19	; 25
    2c1c:	0e 94 af 19 	call	0x335e	; 0x335e <__pack_f>
    2c20:	a0 96       	adiw	r28, 0x20	; 32
    2c22:	e2 e1       	ldi	r30, 0x12	; 18
    2c24:	0c 94 71 3e 	jmp	0x7ce2	; 0x7ce2 <__epilogue_restores__>

00002c28 <__divsf3>:
    2c28:	a8 e1       	ldi	r26, 0x18	; 24
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	ea e1       	ldi	r30, 0x1A	; 26
    2c2e:	f6 e1       	ldi	r31, 0x16	; 22
    2c30:	0c 94 5d 3e 	jmp	0x7cba	; 0x7cba <__prologue_saves__+0x10>
    2c34:	69 83       	std	Y+1, r22	; 0x01
    2c36:	7a 83       	std	Y+2, r23	; 0x02
    2c38:	8b 83       	std	Y+3, r24	; 0x03
    2c3a:	9c 83       	std	Y+4, r25	; 0x04
    2c3c:	2d 83       	std	Y+5, r18	; 0x05
    2c3e:	3e 83       	std	Y+6, r19	; 0x06
    2c40:	4f 83       	std	Y+7, r20	; 0x07
    2c42:	58 87       	std	Y+8, r21	; 0x08
    2c44:	b9 e0       	ldi	r27, 0x09	; 9
    2c46:	eb 2e       	mov	r14, r27
    2c48:	f1 2c       	mov	r15, r1
    2c4a:	ec 0e       	add	r14, r28
    2c4c:	fd 1e       	adc	r15, r29
    2c4e:	ce 01       	movw	r24, r28
    2c50:	01 96       	adiw	r24, 0x01	; 1
    2c52:	b7 01       	movw	r22, r14
    2c54:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2c58:	8e 01       	movw	r16, r28
    2c5a:	0f 5e       	subi	r16, 0xEF	; 239
    2c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5e:	ce 01       	movw	r24, r28
    2c60:	05 96       	adiw	r24, 0x05	; 5
    2c62:	b8 01       	movw	r22, r16
    2c64:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2c68:	29 85       	ldd	r18, Y+9	; 0x09
    2c6a:	22 30       	cpi	r18, 0x02	; 2
    2c6c:	08 f4       	brcc	.+2      	; 0x2c70 <__divsf3+0x48>
    2c6e:	7e c0       	rjmp	.+252    	; 0x2d6c <__divsf3+0x144>
    2c70:	39 89       	ldd	r19, Y+17	; 0x11
    2c72:	32 30       	cpi	r19, 0x02	; 2
    2c74:	10 f4       	brcc	.+4      	; 0x2c7a <__divsf3+0x52>
    2c76:	b8 01       	movw	r22, r16
    2c78:	7c c0       	rjmp	.+248    	; 0x2d72 <__divsf3+0x14a>
    2c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c7e:	89 27       	eor	r24, r25
    2c80:	8a 87       	std	Y+10, r24	; 0x0a
    2c82:	24 30       	cpi	r18, 0x04	; 4
    2c84:	11 f0       	breq	.+4      	; 0x2c8a <__divsf3+0x62>
    2c86:	22 30       	cpi	r18, 0x02	; 2
    2c88:	31 f4       	brne	.+12     	; 0x2c96 <__divsf3+0x6e>
    2c8a:	23 17       	cp	r18, r19
    2c8c:	09 f0       	breq	.+2      	; 0x2c90 <__divsf3+0x68>
    2c8e:	6e c0       	rjmp	.+220    	; 0x2d6c <__divsf3+0x144>
    2c90:	6c e6       	ldi	r22, 0x6C	; 108
    2c92:	70 e0       	ldi	r23, 0x00	; 0
    2c94:	6e c0       	rjmp	.+220    	; 0x2d72 <__divsf3+0x14a>
    2c96:	34 30       	cpi	r19, 0x04	; 4
    2c98:	39 f4       	brne	.+14     	; 0x2ca8 <__divsf3+0x80>
    2c9a:	1d 86       	std	Y+13, r1	; 0x0d
    2c9c:	1e 86       	std	Y+14, r1	; 0x0e
    2c9e:	1f 86       	std	Y+15, r1	; 0x0f
    2ca0:	18 8a       	std	Y+16, r1	; 0x10
    2ca2:	1c 86       	std	Y+12, r1	; 0x0c
    2ca4:	1b 86       	std	Y+11, r1	; 0x0b
    2ca6:	04 c0       	rjmp	.+8      	; 0x2cb0 <__divsf3+0x88>
    2ca8:	32 30       	cpi	r19, 0x02	; 2
    2caa:	21 f4       	brne	.+8      	; 0x2cb4 <__divsf3+0x8c>
    2cac:	84 e0       	ldi	r24, 0x04	; 4
    2cae:	89 87       	std	Y+9, r24	; 0x09
    2cb0:	b7 01       	movw	r22, r14
    2cb2:	5f c0       	rjmp	.+190    	; 0x2d72 <__divsf3+0x14a>
    2cb4:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cb6:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cba:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbc:	28 1b       	sub	r18, r24
    2cbe:	39 0b       	sbc	r19, r25
    2cc0:	3c 87       	std	Y+12, r19	; 0x0c
    2cc2:	2b 87       	std	Y+11, r18	; 0x0b
    2cc4:	ed 84       	ldd	r14, Y+13	; 0x0d
    2cc6:	fe 84       	ldd	r15, Y+14	; 0x0e
    2cc8:	0f 85       	ldd	r16, Y+15	; 0x0f
    2cca:	18 89       	ldd	r17, Y+16	; 0x10
    2ccc:	ad 88       	ldd	r10, Y+21	; 0x15
    2cce:	be 88       	ldd	r11, Y+22	; 0x16
    2cd0:	cf 88       	ldd	r12, Y+23	; 0x17
    2cd2:	d8 8c       	ldd	r13, Y+24	; 0x18
    2cd4:	ea 14       	cp	r14, r10
    2cd6:	fb 04       	cpc	r15, r11
    2cd8:	0c 05       	cpc	r16, r12
    2cda:	1d 05       	cpc	r17, r13
    2cdc:	40 f4       	brcc	.+16     	; 0x2cee <__divsf3+0xc6>
    2cde:	ee 0c       	add	r14, r14
    2ce0:	ff 1c       	adc	r15, r15
    2ce2:	00 1f       	adc	r16, r16
    2ce4:	11 1f       	adc	r17, r17
    2ce6:	21 50       	subi	r18, 0x01	; 1
    2ce8:	30 40       	sbci	r19, 0x00	; 0
    2cea:	3c 87       	std	Y+12, r19	; 0x0c
    2cec:	2b 87       	std	Y+11, r18	; 0x0b
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e0       	ldi	r20, 0x00	; 0
    2cf4:	50 e0       	ldi	r21, 0x00	; 0
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a0 e0       	ldi	r26, 0x00	; 0
    2cfc:	b0 e4       	ldi	r27, 0x40	; 64
    2cfe:	60 e0       	ldi	r22, 0x00	; 0
    2d00:	70 e0       	ldi	r23, 0x00	; 0
    2d02:	ea 14       	cp	r14, r10
    2d04:	fb 04       	cpc	r15, r11
    2d06:	0c 05       	cpc	r16, r12
    2d08:	1d 05       	cpc	r17, r13
    2d0a:	40 f0       	brcs	.+16     	; 0x2d1c <__divsf3+0xf4>
    2d0c:	28 2b       	or	r18, r24
    2d0e:	39 2b       	or	r19, r25
    2d10:	4a 2b       	or	r20, r26
    2d12:	5b 2b       	or	r21, r27
    2d14:	ea 18       	sub	r14, r10
    2d16:	fb 08       	sbc	r15, r11
    2d18:	0c 09       	sbc	r16, r12
    2d1a:	1d 09       	sbc	r17, r13
    2d1c:	b6 95       	lsr	r27
    2d1e:	a7 95       	ror	r26
    2d20:	97 95       	ror	r25
    2d22:	87 95       	ror	r24
    2d24:	ee 0c       	add	r14, r14
    2d26:	ff 1c       	adc	r15, r15
    2d28:	00 1f       	adc	r16, r16
    2d2a:	11 1f       	adc	r17, r17
    2d2c:	6f 5f       	subi	r22, 0xFF	; 255
    2d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d30:	6f 31       	cpi	r22, 0x1F	; 31
    2d32:	71 05       	cpc	r23, r1
    2d34:	31 f7       	brne	.-52     	; 0x2d02 <__divsf3+0xda>
    2d36:	da 01       	movw	r26, r20
    2d38:	c9 01       	movw	r24, r18
    2d3a:	8f 77       	andi	r24, 0x7F	; 127
    2d3c:	90 70       	andi	r25, 0x00	; 0
    2d3e:	a0 70       	andi	r26, 0x00	; 0
    2d40:	b0 70       	andi	r27, 0x00	; 0
    2d42:	80 34       	cpi	r24, 0x40	; 64
    2d44:	91 05       	cpc	r25, r1
    2d46:	a1 05       	cpc	r26, r1
    2d48:	b1 05       	cpc	r27, r1
    2d4a:	61 f4       	brne	.+24     	; 0x2d64 <__divsf3+0x13c>
    2d4c:	27 fd       	sbrc	r18, 7
    2d4e:	0a c0       	rjmp	.+20     	; 0x2d64 <__divsf3+0x13c>
    2d50:	e1 14       	cp	r14, r1
    2d52:	f1 04       	cpc	r15, r1
    2d54:	01 05       	cpc	r16, r1
    2d56:	11 05       	cpc	r17, r1
    2d58:	29 f0       	breq	.+10     	; 0x2d64 <__divsf3+0x13c>
    2d5a:	20 5c       	subi	r18, 0xC0	; 192
    2d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5e:	4f 4f       	sbci	r20, 0xFF	; 255
    2d60:	5f 4f       	sbci	r21, 0xFF	; 255
    2d62:	20 78       	andi	r18, 0x80	; 128
    2d64:	2d 87       	std	Y+13, r18	; 0x0d
    2d66:	3e 87       	std	Y+14, r19	; 0x0e
    2d68:	4f 87       	std	Y+15, r20	; 0x0f
    2d6a:	58 8b       	std	Y+16, r21	; 0x10
    2d6c:	be 01       	movw	r22, r28
    2d6e:	67 5f       	subi	r22, 0xF7	; 247
    2d70:	7f 4f       	sbci	r23, 0xFF	; 255
    2d72:	cb 01       	movw	r24, r22
    2d74:	0e 94 af 19 	call	0x335e	; 0x335e <__pack_f>
    2d78:	68 96       	adiw	r28, 0x18	; 24
    2d7a:	ea e0       	ldi	r30, 0x0A	; 10
    2d7c:	0c 94 79 3e 	jmp	0x7cf2	; 0x7cf2 <__epilogue_restores__+0x10>

00002d80 <__eqsf2>:
    2d80:	a8 e1       	ldi	r26, 0x18	; 24
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	e6 ec       	ldi	r30, 0xC6	; 198
    2d86:	f6 e1       	ldi	r31, 0x16	; 22
    2d88:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <__prologue_saves__+0x18>
    2d8c:	69 83       	std	Y+1, r22	; 0x01
    2d8e:	7a 83       	std	Y+2, r23	; 0x02
    2d90:	8b 83       	std	Y+3, r24	; 0x03
    2d92:	9c 83       	std	Y+4, r25	; 0x04
    2d94:	2d 83       	std	Y+5, r18	; 0x05
    2d96:	3e 83       	std	Y+6, r19	; 0x06
    2d98:	4f 83       	std	Y+7, r20	; 0x07
    2d9a:	58 87       	std	Y+8, r21	; 0x08
    2d9c:	89 e0       	ldi	r24, 0x09	; 9
    2d9e:	e8 2e       	mov	r14, r24
    2da0:	f1 2c       	mov	r15, r1
    2da2:	ec 0e       	add	r14, r28
    2da4:	fd 1e       	adc	r15, r29
    2da6:	ce 01       	movw	r24, r28
    2da8:	01 96       	adiw	r24, 0x01	; 1
    2daa:	b7 01       	movw	r22, r14
    2dac:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2db0:	8e 01       	movw	r16, r28
    2db2:	0f 5e       	subi	r16, 0xEF	; 239
    2db4:	1f 4f       	sbci	r17, 0xFF	; 255
    2db6:	ce 01       	movw	r24, r28
    2db8:	05 96       	adiw	r24, 0x05	; 5
    2dba:	b8 01       	movw	r22, r16
    2dbc:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2dc0:	89 85       	ldd	r24, Y+9	; 0x09
    2dc2:	82 30       	cpi	r24, 0x02	; 2
    2dc4:	40 f0       	brcs	.+16     	; 0x2dd6 <__eqsf2+0x56>
    2dc6:	89 89       	ldd	r24, Y+17	; 0x11
    2dc8:	82 30       	cpi	r24, 0x02	; 2
    2dca:	28 f0       	brcs	.+10     	; 0x2dd6 <__eqsf2+0x56>
    2dcc:	c7 01       	movw	r24, r14
    2dce:	b8 01       	movw	r22, r16
    2dd0:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fpcmp_parts_f>
    2dd4:	01 c0       	rjmp	.+2      	; 0x2dd8 <__eqsf2+0x58>
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	68 96       	adiw	r28, 0x18	; 24
    2dda:	e6 e0       	ldi	r30, 0x06	; 6
    2ddc:	0c 94 7d 3e 	jmp	0x7cfa	; 0x7cfa <__epilogue_restores__+0x18>

00002de0 <__nesf2>:
    2de0:	a8 e1       	ldi	r26, 0x18	; 24
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e6 ef       	ldi	r30, 0xF6	; 246
    2de6:	f6 e1       	ldi	r31, 0x16	; 22
    2de8:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <__prologue_saves__+0x18>
    2dec:	69 83       	std	Y+1, r22	; 0x01
    2dee:	7a 83       	std	Y+2, r23	; 0x02
    2df0:	8b 83       	std	Y+3, r24	; 0x03
    2df2:	9c 83       	std	Y+4, r25	; 0x04
    2df4:	2d 83       	std	Y+5, r18	; 0x05
    2df6:	3e 83       	std	Y+6, r19	; 0x06
    2df8:	4f 83       	std	Y+7, r20	; 0x07
    2dfa:	58 87       	std	Y+8, r21	; 0x08
    2dfc:	89 e0       	ldi	r24, 0x09	; 9
    2dfe:	e8 2e       	mov	r14, r24
    2e00:	f1 2c       	mov	r15, r1
    2e02:	ec 0e       	add	r14, r28
    2e04:	fd 1e       	adc	r15, r29
    2e06:	ce 01       	movw	r24, r28
    2e08:	01 96       	adiw	r24, 0x01	; 1
    2e0a:	b7 01       	movw	r22, r14
    2e0c:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2e10:	8e 01       	movw	r16, r28
    2e12:	0f 5e       	subi	r16, 0xEF	; 239
    2e14:	1f 4f       	sbci	r17, 0xFF	; 255
    2e16:	ce 01       	movw	r24, r28
    2e18:	05 96       	adiw	r24, 0x05	; 5
    2e1a:	b8 01       	movw	r22, r16
    2e1c:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2e20:	89 85       	ldd	r24, Y+9	; 0x09
    2e22:	82 30       	cpi	r24, 0x02	; 2
    2e24:	40 f0       	brcs	.+16     	; 0x2e36 <__nesf2+0x56>
    2e26:	89 89       	ldd	r24, Y+17	; 0x11
    2e28:	82 30       	cpi	r24, 0x02	; 2
    2e2a:	28 f0       	brcs	.+10     	; 0x2e36 <__nesf2+0x56>
    2e2c:	c7 01       	movw	r24, r14
    2e2e:	b8 01       	movw	r22, r16
    2e30:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fpcmp_parts_f>
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <__nesf2+0x58>
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	68 96       	adiw	r28, 0x18	; 24
    2e3a:	e6 e0       	ldi	r30, 0x06	; 6
    2e3c:	0c 94 7d 3e 	jmp	0x7cfa	; 0x7cfa <__epilogue_restores__+0x18>

00002e40 <__gtsf2>:
    2e40:	a8 e1       	ldi	r26, 0x18	; 24
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	e6 e2       	ldi	r30, 0x26	; 38
    2e46:	f7 e1       	ldi	r31, 0x17	; 23
    2e48:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <__prologue_saves__+0x18>
    2e4c:	69 83       	std	Y+1, r22	; 0x01
    2e4e:	7a 83       	std	Y+2, r23	; 0x02
    2e50:	8b 83       	std	Y+3, r24	; 0x03
    2e52:	9c 83       	std	Y+4, r25	; 0x04
    2e54:	2d 83       	std	Y+5, r18	; 0x05
    2e56:	3e 83       	std	Y+6, r19	; 0x06
    2e58:	4f 83       	std	Y+7, r20	; 0x07
    2e5a:	58 87       	std	Y+8, r21	; 0x08
    2e5c:	89 e0       	ldi	r24, 0x09	; 9
    2e5e:	e8 2e       	mov	r14, r24
    2e60:	f1 2c       	mov	r15, r1
    2e62:	ec 0e       	add	r14, r28
    2e64:	fd 1e       	adc	r15, r29
    2e66:	ce 01       	movw	r24, r28
    2e68:	01 96       	adiw	r24, 0x01	; 1
    2e6a:	b7 01       	movw	r22, r14
    2e6c:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2e70:	8e 01       	movw	r16, r28
    2e72:	0f 5e       	subi	r16, 0xEF	; 239
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
    2e76:	ce 01       	movw	r24, r28
    2e78:	05 96       	adiw	r24, 0x05	; 5
    2e7a:	b8 01       	movw	r22, r16
    2e7c:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2e80:	89 85       	ldd	r24, Y+9	; 0x09
    2e82:	82 30       	cpi	r24, 0x02	; 2
    2e84:	40 f0       	brcs	.+16     	; 0x2e96 <__gtsf2+0x56>
    2e86:	89 89       	ldd	r24, Y+17	; 0x11
    2e88:	82 30       	cpi	r24, 0x02	; 2
    2e8a:	28 f0       	brcs	.+10     	; 0x2e96 <__gtsf2+0x56>
    2e8c:	c7 01       	movw	r24, r14
    2e8e:	b8 01       	movw	r22, r16
    2e90:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fpcmp_parts_f>
    2e94:	01 c0       	rjmp	.+2      	; 0x2e98 <__gtsf2+0x58>
    2e96:	8f ef       	ldi	r24, 0xFF	; 255
    2e98:	68 96       	adiw	r28, 0x18	; 24
    2e9a:	e6 e0       	ldi	r30, 0x06	; 6
    2e9c:	0c 94 7d 3e 	jmp	0x7cfa	; 0x7cfa <__epilogue_restores__+0x18>

00002ea0 <__gesf2>:
    2ea0:	a8 e1       	ldi	r26, 0x18	; 24
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	e6 e5       	ldi	r30, 0x56	; 86
    2ea6:	f7 e1       	ldi	r31, 0x17	; 23
    2ea8:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <__prologue_saves__+0x18>
    2eac:	69 83       	std	Y+1, r22	; 0x01
    2eae:	7a 83       	std	Y+2, r23	; 0x02
    2eb0:	8b 83       	std	Y+3, r24	; 0x03
    2eb2:	9c 83       	std	Y+4, r25	; 0x04
    2eb4:	2d 83       	std	Y+5, r18	; 0x05
    2eb6:	3e 83       	std	Y+6, r19	; 0x06
    2eb8:	4f 83       	std	Y+7, r20	; 0x07
    2eba:	58 87       	std	Y+8, r21	; 0x08
    2ebc:	89 e0       	ldi	r24, 0x09	; 9
    2ebe:	e8 2e       	mov	r14, r24
    2ec0:	f1 2c       	mov	r15, r1
    2ec2:	ec 0e       	add	r14, r28
    2ec4:	fd 1e       	adc	r15, r29
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	01 96       	adiw	r24, 0x01	; 1
    2eca:	b7 01       	movw	r22, r14
    2ecc:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2ed0:	8e 01       	movw	r16, r28
    2ed2:	0f 5e       	subi	r16, 0xEF	; 239
    2ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	05 96       	adiw	r24, 0x05	; 5
    2eda:	b8 01       	movw	r22, r16
    2edc:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2ee0:	89 85       	ldd	r24, Y+9	; 0x09
    2ee2:	82 30       	cpi	r24, 0x02	; 2
    2ee4:	40 f0       	brcs	.+16     	; 0x2ef6 <__gesf2+0x56>
    2ee6:	89 89       	ldd	r24, Y+17	; 0x11
    2ee8:	82 30       	cpi	r24, 0x02	; 2
    2eea:	28 f0       	brcs	.+10     	; 0x2ef6 <__gesf2+0x56>
    2eec:	c7 01       	movw	r24, r14
    2eee:	b8 01       	movw	r22, r16
    2ef0:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fpcmp_parts_f>
    2ef4:	01 c0       	rjmp	.+2      	; 0x2ef8 <__gesf2+0x58>
    2ef6:	8f ef       	ldi	r24, 0xFF	; 255
    2ef8:	68 96       	adiw	r28, 0x18	; 24
    2efa:	e6 e0       	ldi	r30, 0x06	; 6
    2efc:	0c 94 7d 3e 	jmp	0x7cfa	; 0x7cfa <__epilogue_restores__+0x18>

00002f00 <__ltsf2>:
    2f00:	a8 e1       	ldi	r26, 0x18	; 24
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e6 e8       	ldi	r30, 0x86	; 134
    2f06:	f7 e1       	ldi	r31, 0x17	; 23
    2f08:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <__prologue_saves__+0x18>
    2f0c:	69 83       	std	Y+1, r22	; 0x01
    2f0e:	7a 83       	std	Y+2, r23	; 0x02
    2f10:	8b 83       	std	Y+3, r24	; 0x03
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	2d 83       	std	Y+5, r18	; 0x05
    2f16:	3e 83       	std	Y+6, r19	; 0x06
    2f18:	4f 83       	std	Y+7, r20	; 0x07
    2f1a:	58 87       	std	Y+8, r21	; 0x08
    2f1c:	89 e0       	ldi	r24, 0x09	; 9
    2f1e:	e8 2e       	mov	r14, r24
    2f20:	f1 2c       	mov	r15, r1
    2f22:	ec 0e       	add	r14, r28
    2f24:	fd 1e       	adc	r15, r29
    2f26:	ce 01       	movw	r24, r28
    2f28:	01 96       	adiw	r24, 0x01	; 1
    2f2a:	b7 01       	movw	r22, r14
    2f2c:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2f30:	8e 01       	movw	r16, r28
    2f32:	0f 5e       	subi	r16, 0xEF	; 239
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	ce 01       	movw	r24, r28
    2f38:	05 96       	adiw	r24, 0x05	; 5
    2f3a:	b8 01       	movw	r22, r16
    2f3c:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    2f40:	89 85       	ldd	r24, Y+9	; 0x09
    2f42:	82 30       	cpi	r24, 0x02	; 2
    2f44:	40 f0       	brcs	.+16     	; 0x2f56 <__ltsf2+0x56>
    2f46:	89 89       	ldd	r24, Y+17	; 0x11
    2f48:	82 30       	cpi	r24, 0x02	; 2
    2f4a:	28 f0       	brcs	.+10     	; 0x2f56 <__ltsf2+0x56>
    2f4c:	c7 01       	movw	r24, r14
    2f4e:	b8 01       	movw	r22, r16
    2f50:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fpcmp_parts_f>
    2f54:	01 c0       	rjmp	.+2      	; 0x2f58 <__ltsf2+0x58>
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	68 96       	adiw	r28, 0x18	; 24
    2f5a:	e6 e0       	ldi	r30, 0x06	; 6
    2f5c:	0c 94 7d 3e 	jmp	0x7cfa	; 0x7cfa <__epilogue_restores__+0x18>

00002f60 <__floatsisf>:
    2f60:	a8 e0       	ldi	r26, 0x08	; 8
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	e6 eb       	ldi	r30, 0xB6	; 182
    2f66:	f7 e1       	ldi	r31, 0x17	; 23
    2f68:	0c 94 5e 3e 	jmp	0x7cbc	; 0x7cbc <__prologue_saves__+0x12>
    2f6c:	9b 01       	movw	r18, r22
    2f6e:	ac 01       	movw	r20, r24
    2f70:	83 e0       	ldi	r24, 0x03	; 3
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	da 01       	movw	r26, r20
    2f76:	c9 01       	movw	r24, r18
    2f78:	88 27       	eor	r24, r24
    2f7a:	b7 fd       	sbrc	r27, 7
    2f7c:	83 95       	inc	r24
    2f7e:	99 27       	eor	r25, r25
    2f80:	aa 27       	eor	r26, r26
    2f82:	bb 27       	eor	r27, r27
    2f84:	b8 2e       	mov	r11, r24
    2f86:	21 15       	cp	r18, r1
    2f88:	31 05       	cpc	r19, r1
    2f8a:	41 05       	cpc	r20, r1
    2f8c:	51 05       	cpc	r21, r1
    2f8e:	19 f4       	brne	.+6      	; 0x2f96 <__floatsisf+0x36>
    2f90:	82 e0       	ldi	r24, 0x02	; 2
    2f92:	89 83       	std	Y+1, r24	; 0x01
    2f94:	3a c0       	rjmp	.+116    	; 0x300a <__floatsisf+0xaa>
    2f96:	88 23       	and	r24, r24
    2f98:	a9 f0       	breq	.+42     	; 0x2fc4 <__floatsisf+0x64>
    2f9a:	20 30       	cpi	r18, 0x00	; 0
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	38 07       	cpc	r19, r24
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	48 07       	cpc	r20, r24
    2fa4:	80 e8       	ldi	r24, 0x80	; 128
    2fa6:	58 07       	cpc	r21, r24
    2fa8:	29 f4       	brne	.+10     	; 0x2fb4 <__floatsisf+0x54>
    2faa:	60 e0       	ldi	r22, 0x00	; 0
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	9f ec       	ldi	r25, 0xCF	; 207
    2fb2:	30 c0       	rjmp	.+96     	; 0x3014 <__floatsisf+0xb4>
    2fb4:	ee 24       	eor	r14, r14
    2fb6:	ff 24       	eor	r15, r15
    2fb8:	87 01       	movw	r16, r14
    2fba:	e2 1a       	sub	r14, r18
    2fbc:	f3 0a       	sbc	r15, r19
    2fbe:	04 0b       	sbc	r16, r20
    2fc0:	15 0b       	sbc	r17, r21
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <__floatsisf+0x68>
    2fc4:	79 01       	movw	r14, r18
    2fc6:	8a 01       	movw	r16, r20
    2fc8:	8e e1       	ldi	r24, 0x1E	; 30
    2fca:	c8 2e       	mov	r12, r24
    2fcc:	d1 2c       	mov	r13, r1
    2fce:	dc 82       	std	Y+4, r13	; 0x04
    2fd0:	cb 82       	std	Y+3, r12	; 0x03
    2fd2:	ed 82       	std	Y+5, r14	; 0x05
    2fd4:	fe 82       	std	Y+6, r15	; 0x06
    2fd6:	0f 83       	std	Y+7, r16	; 0x07
    2fd8:	18 87       	std	Y+8, r17	; 0x08
    2fda:	c8 01       	movw	r24, r16
    2fdc:	b7 01       	movw	r22, r14
    2fde:	0e 94 60 19 	call	0x32c0	; 0x32c0 <__clzsi2>
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	18 16       	cp	r1, r24
    2fe6:	19 06       	cpc	r1, r25
    2fe8:	84 f4       	brge	.+32     	; 0x300a <__floatsisf+0xaa>
    2fea:	08 2e       	mov	r0, r24
    2fec:	04 c0       	rjmp	.+8      	; 0x2ff6 <__floatsisf+0x96>
    2fee:	ee 0c       	add	r14, r14
    2ff0:	ff 1c       	adc	r15, r15
    2ff2:	00 1f       	adc	r16, r16
    2ff4:	11 1f       	adc	r17, r17
    2ff6:	0a 94       	dec	r0
    2ff8:	d2 f7       	brpl	.-12     	; 0x2fee <__floatsisf+0x8e>
    2ffa:	ed 82       	std	Y+5, r14	; 0x05
    2ffc:	fe 82       	std	Y+6, r15	; 0x06
    2ffe:	0f 83       	std	Y+7, r16	; 0x07
    3000:	18 87       	std	Y+8, r17	; 0x08
    3002:	c8 1a       	sub	r12, r24
    3004:	d9 0a       	sbc	r13, r25
    3006:	dc 82       	std	Y+4, r13	; 0x04
    3008:	cb 82       	std	Y+3, r12	; 0x03
    300a:	ba 82       	std	Y+2, r11	; 0x02
    300c:	ce 01       	movw	r24, r28
    300e:	01 96       	adiw	r24, 0x01	; 1
    3010:	0e 94 af 19 	call	0x335e	; 0x335e <__pack_f>
    3014:	28 96       	adiw	r28, 0x08	; 8
    3016:	e9 e0       	ldi	r30, 0x09	; 9
    3018:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <__epilogue_restores__+0x12>

0000301c <__fixsfsi>:
    301c:	ac e0       	ldi	r26, 0x0C	; 12
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	e4 e1       	ldi	r30, 0x14	; 20
    3022:	f8 e1       	ldi	r31, 0x18	; 24
    3024:	0c 94 65 3e 	jmp	0x7cca	; 0x7cca <__prologue_saves__+0x20>
    3028:	69 83       	std	Y+1, r22	; 0x01
    302a:	7a 83       	std	Y+2, r23	; 0x02
    302c:	8b 83       	std	Y+3, r24	; 0x03
    302e:	9c 83       	std	Y+4, r25	; 0x04
    3030:	ce 01       	movw	r24, r28
    3032:	01 96       	adiw	r24, 0x01	; 1
    3034:	be 01       	movw	r22, r28
    3036:	6b 5f       	subi	r22, 0xFB	; 251
    3038:	7f 4f       	sbci	r23, 0xFF	; 255
    303a:	0e 94 84 1a 	call	0x3508	; 0x3508 <__unpack_f>
    303e:	8d 81       	ldd	r24, Y+5	; 0x05
    3040:	82 30       	cpi	r24, 0x02	; 2
    3042:	61 f1       	breq	.+88     	; 0x309c <__fixsfsi+0x80>
    3044:	82 30       	cpi	r24, 0x02	; 2
    3046:	50 f1       	brcs	.+84     	; 0x309c <__fixsfsi+0x80>
    3048:	84 30       	cpi	r24, 0x04	; 4
    304a:	21 f4       	brne	.+8      	; 0x3054 <__fixsfsi+0x38>
    304c:	8e 81       	ldd	r24, Y+6	; 0x06
    304e:	88 23       	and	r24, r24
    3050:	51 f1       	breq	.+84     	; 0x30a6 <__fixsfsi+0x8a>
    3052:	2e c0       	rjmp	.+92     	; 0x30b0 <__fixsfsi+0x94>
    3054:	2f 81       	ldd	r18, Y+7	; 0x07
    3056:	38 85       	ldd	r19, Y+8	; 0x08
    3058:	37 fd       	sbrc	r19, 7
    305a:	20 c0       	rjmp	.+64     	; 0x309c <__fixsfsi+0x80>
    305c:	6e 81       	ldd	r22, Y+6	; 0x06
    305e:	2f 31       	cpi	r18, 0x1F	; 31
    3060:	31 05       	cpc	r19, r1
    3062:	1c f0       	brlt	.+6      	; 0x306a <__fixsfsi+0x4e>
    3064:	66 23       	and	r22, r22
    3066:	f9 f0       	breq	.+62     	; 0x30a6 <__fixsfsi+0x8a>
    3068:	23 c0       	rjmp	.+70     	; 0x30b0 <__fixsfsi+0x94>
    306a:	8e e1       	ldi	r24, 0x1E	; 30
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	82 1b       	sub	r24, r18
    3070:	93 0b       	sbc	r25, r19
    3072:	29 85       	ldd	r18, Y+9	; 0x09
    3074:	3a 85       	ldd	r19, Y+10	; 0x0a
    3076:	4b 85       	ldd	r20, Y+11	; 0x0b
    3078:	5c 85       	ldd	r21, Y+12	; 0x0c
    307a:	04 c0       	rjmp	.+8      	; 0x3084 <__fixsfsi+0x68>
    307c:	56 95       	lsr	r21
    307e:	47 95       	ror	r20
    3080:	37 95       	ror	r19
    3082:	27 95       	ror	r18
    3084:	8a 95       	dec	r24
    3086:	d2 f7       	brpl	.-12     	; 0x307c <__fixsfsi+0x60>
    3088:	66 23       	and	r22, r22
    308a:	b1 f0       	breq	.+44     	; 0x30b8 <__fixsfsi+0x9c>
    308c:	50 95       	com	r21
    308e:	40 95       	com	r20
    3090:	30 95       	com	r19
    3092:	21 95       	neg	r18
    3094:	3f 4f       	sbci	r19, 0xFF	; 255
    3096:	4f 4f       	sbci	r20, 0xFF	; 255
    3098:	5f 4f       	sbci	r21, 0xFF	; 255
    309a:	0e c0       	rjmp	.+28     	; 0x30b8 <__fixsfsi+0x9c>
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e0       	ldi	r20, 0x00	; 0
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	09 c0       	rjmp	.+18     	; 0x30b8 <__fixsfsi+0x9c>
    30a6:	2f ef       	ldi	r18, 0xFF	; 255
    30a8:	3f ef       	ldi	r19, 0xFF	; 255
    30aa:	4f ef       	ldi	r20, 0xFF	; 255
    30ac:	5f e7       	ldi	r21, 0x7F	; 127
    30ae:	04 c0       	rjmp	.+8      	; 0x30b8 <__fixsfsi+0x9c>
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e0       	ldi	r20, 0x00	; 0
    30b6:	50 e8       	ldi	r21, 0x80	; 128
    30b8:	b9 01       	movw	r22, r18
    30ba:	ca 01       	movw	r24, r20
    30bc:	2c 96       	adiw	r28, 0x0c	; 12
    30be:	e2 e0       	ldi	r30, 0x02	; 2
    30c0:	0c 94 81 3e 	jmp	0x7d02	; 0x7d02 <__epilogue_restores__+0x20>

000030c4 <__floatunsisf>:
    30c4:	a8 e0       	ldi	r26, 0x08	; 8
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	e8 e6       	ldi	r30, 0x68	; 104
    30ca:	f8 e1       	ldi	r31, 0x18	; 24
    30cc:	0c 94 5d 3e 	jmp	0x7cba	; 0x7cba <__prologue_saves__+0x10>
    30d0:	7b 01       	movw	r14, r22
    30d2:	8c 01       	movw	r16, r24
    30d4:	61 15       	cp	r22, r1
    30d6:	71 05       	cpc	r23, r1
    30d8:	81 05       	cpc	r24, r1
    30da:	91 05       	cpc	r25, r1
    30dc:	19 f4       	brne	.+6      	; 0x30e4 <__floatunsisf+0x20>
    30de:	82 e0       	ldi	r24, 0x02	; 2
    30e0:	89 83       	std	Y+1, r24	; 0x01
    30e2:	60 c0       	rjmp	.+192    	; 0x31a4 <__floatunsisf+0xe0>
    30e4:	83 e0       	ldi	r24, 0x03	; 3
    30e6:	89 83       	std	Y+1, r24	; 0x01
    30e8:	8e e1       	ldi	r24, 0x1E	; 30
    30ea:	c8 2e       	mov	r12, r24
    30ec:	d1 2c       	mov	r13, r1
    30ee:	dc 82       	std	Y+4, r13	; 0x04
    30f0:	cb 82       	std	Y+3, r12	; 0x03
    30f2:	ed 82       	std	Y+5, r14	; 0x05
    30f4:	fe 82       	std	Y+6, r15	; 0x06
    30f6:	0f 83       	std	Y+7, r16	; 0x07
    30f8:	18 87       	std	Y+8, r17	; 0x08
    30fa:	c8 01       	movw	r24, r16
    30fc:	b7 01       	movw	r22, r14
    30fe:	0e 94 60 19 	call	0x32c0	; 0x32c0 <__clzsi2>
    3102:	fc 01       	movw	r30, r24
    3104:	31 97       	sbiw	r30, 0x01	; 1
    3106:	f7 ff       	sbrs	r31, 7
    3108:	3b c0       	rjmp	.+118    	; 0x3180 <__floatunsisf+0xbc>
    310a:	22 27       	eor	r18, r18
    310c:	33 27       	eor	r19, r19
    310e:	2e 1b       	sub	r18, r30
    3110:	3f 0b       	sbc	r19, r31
    3112:	57 01       	movw	r10, r14
    3114:	68 01       	movw	r12, r16
    3116:	02 2e       	mov	r0, r18
    3118:	04 c0       	rjmp	.+8      	; 0x3122 <__floatunsisf+0x5e>
    311a:	d6 94       	lsr	r13
    311c:	c7 94       	ror	r12
    311e:	b7 94       	ror	r11
    3120:	a7 94       	ror	r10
    3122:	0a 94       	dec	r0
    3124:	d2 f7       	brpl	.-12     	; 0x311a <__floatunsisf+0x56>
    3126:	40 e0       	ldi	r20, 0x00	; 0
    3128:	50 e0       	ldi	r21, 0x00	; 0
    312a:	60 e0       	ldi	r22, 0x00	; 0
    312c:	70 e0       	ldi	r23, 0x00	; 0
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	a0 e0       	ldi	r26, 0x00	; 0
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	04 c0       	rjmp	.+8      	; 0x3140 <__floatunsisf+0x7c>
    3138:	88 0f       	add	r24, r24
    313a:	99 1f       	adc	r25, r25
    313c:	aa 1f       	adc	r26, r26
    313e:	bb 1f       	adc	r27, r27
    3140:	2a 95       	dec	r18
    3142:	d2 f7       	brpl	.-12     	; 0x3138 <__floatunsisf+0x74>
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	a1 09       	sbc	r26, r1
    3148:	b1 09       	sbc	r27, r1
    314a:	8e 21       	and	r24, r14
    314c:	9f 21       	and	r25, r15
    314e:	a0 23       	and	r26, r16
    3150:	b1 23       	and	r27, r17
    3152:	00 97       	sbiw	r24, 0x00	; 0
    3154:	a1 05       	cpc	r26, r1
    3156:	b1 05       	cpc	r27, r1
    3158:	21 f0       	breq	.+8      	; 0x3162 <__floatunsisf+0x9e>
    315a:	41 e0       	ldi	r20, 0x01	; 1
    315c:	50 e0       	ldi	r21, 0x00	; 0
    315e:	60 e0       	ldi	r22, 0x00	; 0
    3160:	70 e0       	ldi	r23, 0x00	; 0
    3162:	4a 29       	or	r20, r10
    3164:	5b 29       	or	r21, r11
    3166:	6c 29       	or	r22, r12
    3168:	7d 29       	or	r23, r13
    316a:	4d 83       	std	Y+5, r20	; 0x05
    316c:	5e 83       	std	Y+6, r21	; 0x06
    316e:	6f 83       	std	Y+7, r22	; 0x07
    3170:	78 87       	std	Y+8, r23	; 0x08
    3172:	8e e1       	ldi	r24, 0x1E	; 30
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	8e 1b       	sub	r24, r30
    3178:	9f 0b       	sbc	r25, r31
    317a:	9c 83       	std	Y+4, r25	; 0x04
    317c:	8b 83       	std	Y+3, r24	; 0x03
    317e:	12 c0       	rjmp	.+36     	; 0x31a4 <__floatunsisf+0xe0>
    3180:	30 97       	sbiw	r30, 0x00	; 0
    3182:	81 f0       	breq	.+32     	; 0x31a4 <__floatunsisf+0xe0>
    3184:	0e 2e       	mov	r0, r30
    3186:	04 c0       	rjmp	.+8      	; 0x3190 <__floatunsisf+0xcc>
    3188:	ee 0c       	add	r14, r14
    318a:	ff 1c       	adc	r15, r15
    318c:	00 1f       	adc	r16, r16
    318e:	11 1f       	adc	r17, r17
    3190:	0a 94       	dec	r0
    3192:	d2 f7       	brpl	.-12     	; 0x3188 <__floatunsisf+0xc4>
    3194:	ed 82       	std	Y+5, r14	; 0x05
    3196:	fe 82       	std	Y+6, r15	; 0x06
    3198:	0f 83       	std	Y+7, r16	; 0x07
    319a:	18 87       	std	Y+8, r17	; 0x08
    319c:	ce 1a       	sub	r12, r30
    319e:	df 0a       	sbc	r13, r31
    31a0:	dc 82       	std	Y+4, r13	; 0x04
    31a2:	cb 82       	std	Y+3, r12	; 0x03
    31a4:	1a 82       	std	Y+2, r1	; 0x02
    31a6:	ce 01       	movw	r24, r28
    31a8:	01 96       	adiw	r24, 0x01	; 1
    31aa:	0e 94 af 19 	call	0x335e	; 0x335e <__pack_f>
    31ae:	28 96       	adiw	r28, 0x08	; 8
    31b0:	ea e0       	ldi	r30, 0x0A	; 10
    31b2:	0c 94 79 3e 	jmp	0x7cf2	; 0x7cf2 <__epilogue_restores__+0x10>

000031b6 <__ashrdi3>:
    31b6:	ef 92       	push	r14
    31b8:	ff 92       	push	r15
    31ba:	0f 93       	push	r16
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	60 97       	sbiw	r28, 0x10	; 16
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	a8 2f       	mov	r26, r24
    31d2:	00 23       	and	r16, r16
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <__ashrdi3+0x22>
    31d6:	67 c0       	rjmp	.+206    	; 0x32a6 <__ashrdi3+0xf0>
    31d8:	7e 01       	movw	r14, r28
    31da:	08 94       	sec
    31dc:	e1 1c       	adc	r14, r1
    31de:	f1 1c       	adc	r15, r1
    31e0:	88 e0       	ldi	r24, 0x08	; 8
    31e2:	f7 01       	movw	r30, r14
    31e4:	11 92       	st	Z+, r1
    31e6:	8a 95       	dec	r24
    31e8:	e9 f7       	brne	.-6      	; 0x31e4 <__ashrdi3+0x2e>
    31ea:	29 83       	std	Y+1, r18	; 0x01
    31ec:	3a 83       	std	Y+2, r19	; 0x02
    31ee:	4b 83       	std	Y+3, r20	; 0x03
    31f0:	5c 83       	std	Y+4, r21	; 0x04
    31f2:	6d 83       	std	Y+5, r22	; 0x05
    31f4:	7e 83       	std	Y+6, r23	; 0x06
    31f6:	af 83       	std	Y+7, r26	; 0x07
    31f8:	98 87       	std	Y+8, r25	; 0x08
    31fa:	80 e2       	ldi	r24, 0x20	; 32
    31fc:	80 1b       	sub	r24, r16
    31fe:	4d 81       	ldd	r20, Y+5	; 0x05
    3200:	5e 81       	ldd	r21, Y+6	; 0x06
    3202:	6f 81       	ldd	r22, Y+7	; 0x07
    3204:	78 85       	ldd	r23, Y+8	; 0x08
    3206:	e8 2f       	mov	r30, r24
    3208:	ff 27       	eor	r31, r31
    320a:	e7 fd       	sbrc	r30, 7
    320c:	f0 95       	com	r31
    320e:	18 16       	cp	r1, r24
    3210:	b4 f0       	brlt	.+44     	; 0x323e <__ashrdi3+0x88>
    3212:	db 01       	movw	r26, r22
    3214:	ca 01       	movw	r24, r20
    3216:	bb 0f       	add	r27, r27
    3218:	88 0b       	sbc	r24, r24
    321a:	98 2f       	mov	r25, r24
    321c:	dc 01       	movw	r26, r24
    321e:	8d 87       	std	Y+13, r24	; 0x0d
    3220:	9e 87       	std	Y+14, r25	; 0x0e
    3222:	af 87       	std	Y+15, r26	; 0x0f
    3224:	b8 8b       	std	Y+16, r27	; 0x10
    3226:	88 27       	eor	r24, r24
    3228:	99 27       	eor	r25, r25
    322a:	8e 1b       	sub	r24, r30
    322c:	9f 0b       	sbc	r25, r31
    322e:	04 c0       	rjmp	.+8      	; 0x3238 <__ashrdi3+0x82>
    3230:	75 95       	asr	r23
    3232:	67 95       	ror	r22
    3234:	57 95       	ror	r21
    3236:	47 95       	ror	r20
    3238:	8a 95       	dec	r24
    323a:	d2 f7       	brpl	.-12     	; 0x3230 <__ashrdi3+0x7a>
    323c:	28 c0       	rjmp	.+80     	; 0x328e <__ashrdi3+0xd8>
    323e:	20 2f       	mov	r18, r16
    3240:	33 27       	eor	r19, r19
    3242:	27 fd       	sbrc	r18, 7
    3244:	30 95       	com	r19
    3246:	db 01       	movw	r26, r22
    3248:	ca 01       	movw	r24, r20
    324a:	02 2e       	mov	r0, r18
    324c:	04 c0       	rjmp	.+8      	; 0x3256 <__ashrdi3+0xa0>
    324e:	b5 95       	asr	r27
    3250:	a7 95       	ror	r26
    3252:	97 95       	ror	r25
    3254:	87 95       	ror	r24
    3256:	0a 94       	dec	r0
    3258:	d2 f7       	brpl	.-12     	; 0x324e <__ashrdi3+0x98>
    325a:	8d 87       	std	Y+13, r24	; 0x0d
    325c:	9e 87       	std	Y+14, r25	; 0x0e
    325e:	af 87       	std	Y+15, r26	; 0x0f
    3260:	b8 8b       	std	Y+16, r27	; 0x10
    3262:	04 c0       	rjmp	.+8      	; 0x326c <__ashrdi3+0xb6>
    3264:	44 0f       	add	r20, r20
    3266:	55 1f       	adc	r21, r21
    3268:	66 1f       	adc	r22, r22
    326a:	77 1f       	adc	r23, r23
    326c:	ea 95       	dec	r30
    326e:	d2 f7       	brpl	.-12     	; 0x3264 <__ashrdi3+0xae>
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	9a 81       	ldd	r25, Y+2	; 0x02
    3274:	ab 81       	ldd	r26, Y+3	; 0x03
    3276:	bc 81       	ldd	r27, Y+4	; 0x04
    3278:	04 c0       	rjmp	.+8      	; 0x3282 <__ashrdi3+0xcc>
    327a:	b6 95       	lsr	r27
    327c:	a7 95       	ror	r26
    327e:	97 95       	ror	r25
    3280:	87 95       	ror	r24
    3282:	2a 95       	dec	r18
    3284:	d2 f7       	brpl	.-12     	; 0x327a <__ashrdi3+0xc4>
    3286:	48 2b       	or	r20, r24
    3288:	59 2b       	or	r21, r25
    328a:	6a 2b       	or	r22, r26
    328c:	7b 2b       	or	r23, r27
    328e:	49 87       	std	Y+9, r20	; 0x09
    3290:	5a 87       	std	Y+10, r21	; 0x0a
    3292:	6b 87       	std	Y+11, r22	; 0x0b
    3294:	7c 87       	std	Y+12, r23	; 0x0c
    3296:	29 85       	ldd	r18, Y+9	; 0x09
    3298:	3a 85       	ldd	r19, Y+10	; 0x0a
    329a:	4b 85       	ldd	r20, Y+11	; 0x0b
    329c:	5c 85       	ldd	r21, Y+12	; 0x0c
    329e:	6d 85       	ldd	r22, Y+13	; 0x0d
    32a0:	7e 85       	ldd	r23, Y+14	; 0x0e
    32a2:	af 85       	ldd	r26, Y+15	; 0x0f
    32a4:	98 89       	ldd	r25, Y+16	; 0x10
    32a6:	8a 2f       	mov	r24, r26
    32a8:	60 96       	adiw	r28, 0x10	; 16
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	f8 94       	cli
    32ae:	de bf       	out	0x3e, r29	; 62
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	cd bf       	out	0x3d, r28	; 61
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	0f 91       	pop	r16
    32ba:	ff 90       	pop	r15
    32bc:	ef 90       	pop	r14
    32be:	08 95       	ret

000032c0 <__clzsi2>:
    32c0:	ef 92       	push	r14
    32c2:	ff 92       	push	r15
    32c4:	0f 93       	push	r16
    32c6:	1f 93       	push	r17
    32c8:	7b 01       	movw	r14, r22
    32ca:	8c 01       	movw	r16, r24
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	e8 16       	cp	r14, r24
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	f8 06       	cpc	r15, r24
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	08 07       	cpc	r16, r24
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	18 07       	cpc	r17, r24
    32dc:	88 f4       	brcc	.+34     	; 0x3300 <__clzsi2+0x40>
    32de:	8f ef       	ldi	r24, 0xFF	; 255
    32e0:	e8 16       	cp	r14, r24
    32e2:	f1 04       	cpc	r15, r1
    32e4:	01 05       	cpc	r16, r1
    32e6:	11 05       	cpc	r17, r1
    32e8:	31 f0       	breq	.+12     	; 0x32f6 <__clzsi2+0x36>
    32ea:	28 f0       	brcs	.+10     	; 0x32f6 <__clzsi2+0x36>
    32ec:	88 e0       	ldi	r24, 0x08	; 8
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	a0 e0       	ldi	r26, 0x00	; 0
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	17 c0       	rjmp	.+46     	; 0x3324 <__clzsi2+0x64>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	a0 e0       	ldi	r26, 0x00	; 0
    32fc:	b0 e0       	ldi	r27, 0x00	; 0
    32fe:	12 c0       	rjmp	.+36     	; 0x3324 <__clzsi2+0x64>
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	e8 16       	cp	r14, r24
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	f8 06       	cpc	r15, r24
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	08 07       	cpc	r16, r24
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	18 07       	cpc	r17, r24
    3310:	28 f0       	brcs	.+10     	; 0x331c <__clzsi2+0x5c>
    3312:	88 e1       	ldi	r24, 0x18	; 24
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	a0 e0       	ldi	r26, 0x00	; 0
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	04 c0       	rjmp	.+8      	; 0x3324 <__clzsi2+0x64>
    331c:	80 e1       	ldi	r24, 0x10	; 16
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	a0 e0       	ldi	r26, 0x00	; 0
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	20 e2       	ldi	r18, 0x20	; 32
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e0       	ldi	r20, 0x00	; 0
    332a:	50 e0       	ldi	r21, 0x00	; 0
    332c:	28 1b       	sub	r18, r24
    332e:	39 0b       	sbc	r19, r25
    3330:	4a 0b       	sbc	r20, r26
    3332:	5b 0b       	sbc	r21, r27
    3334:	04 c0       	rjmp	.+8      	; 0x333e <__clzsi2+0x7e>
    3336:	16 95       	lsr	r17
    3338:	07 95       	ror	r16
    333a:	f7 94       	ror	r15
    333c:	e7 94       	ror	r14
    333e:	8a 95       	dec	r24
    3340:	d2 f7       	brpl	.-12     	; 0x3336 <__clzsi2+0x76>
    3342:	f7 01       	movw	r30, r14
    3344:	ec 58       	subi	r30, 0x8C	; 140
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	80 81       	ld	r24, Z
    334a:	28 1b       	sub	r18, r24
    334c:	31 09       	sbc	r19, r1
    334e:	41 09       	sbc	r20, r1
    3350:	51 09       	sbc	r21, r1
    3352:	c9 01       	movw	r24, r18
    3354:	1f 91       	pop	r17
    3356:	0f 91       	pop	r16
    3358:	ff 90       	pop	r15
    335a:	ef 90       	pop	r14
    335c:	08 95       	ret

0000335e <__pack_f>:
    335e:	df 92       	push	r13
    3360:	ef 92       	push	r14
    3362:	ff 92       	push	r15
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
    3368:	fc 01       	movw	r30, r24
    336a:	e4 80       	ldd	r14, Z+4	; 0x04
    336c:	f5 80       	ldd	r15, Z+5	; 0x05
    336e:	06 81       	ldd	r16, Z+6	; 0x06
    3370:	17 81       	ldd	r17, Z+7	; 0x07
    3372:	d1 80       	ldd	r13, Z+1	; 0x01
    3374:	80 81       	ld	r24, Z
    3376:	82 30       	cpi	r24, 0x02	; 2
    3378:	48 f4       	brcc	.+18     	; 0x338c <__pack_f+0x2e>
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	a0 e1       	ldi	r26, 0x10	; 16
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	e8 2a       	or	r14, r24
    3384:	f9 2a       	or	r15, r25
    3386:	0a 2b       	or	r16, r26
    3388:	1b 2b       	or	r17, r27
    338a:	a5 c0       	rjmp	.+330    	; 0x34d6 <__pack_f+0x178>
    338c:	84 30       	cpi	r24, 0x04	; 4
    338e:	09 f4       	brne	.+2      	; 0x3392 <__pack_f+0x34>
    3390:	9f c0       	rjmp	.+318    	; 0x34d0 <__pack_f+0x172>
    3392:	82 30       	cpi	r24, 0x02	; 2
    3394:	21 f4       	brne	.+8      	; 0x339e <__pack_f+0x40>
    3396:	ee 24       	eor	r14, r14
    3398:	ff 24       	eor	r15, r15
    339a:	87 01       	movw	r16, r14
    339c:	05 c0       	rjmp	.+10     	; 0x33a8 <__pack_f+0x4a>
    339e:	e1 14       	cp	r14, r1
    33a0:	f1 04       	cpc	r15, r1
    33a2:	01 05       	cpc	r16, r1
    33a4:	11 05       	cpc	r17, r1
    33a6:	19 f4       	brne	.+6      	; 0x33ae <__pack_f+0x50>
    33a8:	e0 e0       	ldi	r30, 0x00	; 0
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	96 c0       	rjmp	.+300    	; 0x34da <__pack_f+0x17c>
    33ae:	62 81       	ldd	r22, Z+2	; 0x02
    33b0:	73 81       	ldd	r23, Z+3	; 0x03
    33b2:	9f ef       	ldi	r25, 0xFF	; 255
    33b4:	62 38       	cpi	r22, 0x82	; 130
    33b6:	79 07       	cpc	r23, r25
    33b8:	0c f0       	brlt	.+2      	; 0x33bc <__pack_f+0x5e>
    33ba:	5b c0       	rjmp	.+182    	; 0x3472 <__pack_f+0x114>
    33bc:	22 e8       	ldi	r18, 0x82	; 130
    33be:	3f ef       	ldi	r19, 0xFF	; 255
    33c0:	26 1b       	sub	r18, r22
    33c2:	37 0b       	sbc	r19, r23
    33c4:	2a 31       	cpi	r18, 0x1A	; 26
    33c6:	31 05       	cpc	r19, r1
    33c8:	2c f0       	brlt	.+10     	; 0x33d4 <__pack_f+0x76>
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	2a c0       	rjmp	.+84     	; 0x3428 <__pack_f+0xca>
    33d4:	b8 01       	movw	r22, r16
    33d6:	a7 01       	movw	r20, r14
    33d8:	02 2e       	mov	r0, r18
    33da:	04 c0       	rjmp	.+8      	; 0x33e4 <__pack_f+0x86>
    33dc:	76 95       	lsr	r23
    33de:	67 95       	ror	r22
    33e0:	57 95       	ror	r21
    33e2:	47 95       	ror	r20
    33e4:	0a 94       	dec	r0
    33e6:	d2 f7       	brpl	.-12     	; 0x33dc <__pack_f+0x7e>
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	a0 e0       	ldi	r26, 0x00	; 0
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	04 c0       	rjmp	.+8      	; 0x33fa <__pack_f+0x9c>
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	aa 1f       	adc	r26, r26
    33f8:	bb 1f       	adc	r27, r27
    33fa:	2a 95       	dec	r18
    33fc:	d2 f7       	brpl	.-12     	; 0x33f2 <__pack_f+0x94>
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	a1 09       	sbc	r26, r1
    3402:	b1 09       	sbc	r27, r1
    3404:	8e 21       	and	r24, r14
    3406:	9f 21       	and	r25, r15
    3408:	a0 23       	and	r26, r16
    340a:	b1 23       	and	r27, r17
    340c:	00 97       	sbiw	r24, 0x00	; 0
    340e:	a1 05       	cpc	r26, r1
    3410:	b1 05       	cpc	r27, r1
    3412:	21 f0       	breq	.+8      	; 0x341c <__pack_f+0xbe>
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	a0 e0       	ldi	r26, 0x00	; 0
    341a:	b0 e0       	ldi	r27, 0x00	; 0
    341c:	9a 01       	movw	r18, r20
    341e:	ab 01       	movw	r20, r22
    3420:	28 2b       	or	r18, r24
    3422:	39 2b       	or	r19, r25
    3424:	4a 2b       	or	r20, r26
    3426:	5b 2b       	or	r21, r27
    3428:	da 01       	movw	r26, r20
    342a:	c9 01       	movw	r24, r18
    342c:	8f 77       	andi	r24, 0x7F	; 127
    342e:	90 70       	andi	r25, 0x00	; 0
    3430:	a0 70       	andi	r26, 0x00	; 0
    3432:	b0 70       	andi	r27, 0x00	; 0
    3434:	80 34       	cpi	r24, 0x40	; 64
    3436:	91 05       	cpc	r25, r1
    3438:	a1 05       	cpc	r26, r1
    343a:	b1 05       	cpc	r27, r1
    343c:	39 f4       	brne	.+14     	; 0x344c <__pack_f+0xee>
    343e:	27 ff       	sbrs	r18, 7
    3440:	09 c0       	rjmp	.+18     	; 0x3454 <__pack_f+0xf6>
    3442:	20 5c       	subi	r18, 0xC0	; 192
    3444:	3f 4f       	sbci	r19, 0xFF	; 255
    3446:	4f 4f       	sbci	r20, 0xFF	; 255
    3448:	5f 4f       	sbci	r21, 0xFF	; 255
    344a:	04 c0       	rjmp	.+8      	; 0x3454 <__pack_f+0xf6>
    344c:	21 5c       	subi	r18, 0xC1	; 193
    344e:	3f 4f       	sbci	r19, 0xFF	; 255
    3450:	4f 4f       	sbci	r20, 0xFF	; 255
    3452:	5f 4f       	sbci	r21, 0xFF	; 255
    3454:	e0 e0       	ldi	r30, 0x00	; 0
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	20 30       	cpi	r18, 0x00	; 0
    345a:	a0 e0       	ldi	r26, 0x00	; 0
    345c:	3a 07       	cpc	r19, r26
    345e:	a0 e0       	ldi	r26, 0x00	; 0
    3460:	4a 07       	cpc	r20, r26
    3462:	a0 e4       	ldi	r26, 0x40	; 64
    3464:	5a 07       	cpc	r21, r26
    3466:	10 f0       	brcs	.+4      	; 0x346c <__pack_f+0x10e>
    3468:	e1 e0       	ldi	r30, 0x01	; 1
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	79 01       	movw	r14, r18
    346e:	8a 01       	movw	r16, r20
    3470:	27 c0       	rjmp	.+78     	; 0x34c0 <__pack_f+0x162>
    3472:	60 38       	cpi	r22, 0x80	; 128
    3474:	71 05       	cpc	r23, r1
    3476:	64 f5       	brge	.+88     	; 0x34d0 <__pack_f+0x172>
    3478:	fb 01       	movw	r30, r22
    347a:	e1 58       	subi	r30, 0x81	; 129
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	d8 01       	movw	r26, r16
    3480:	c7 01       	movw	r24, r14
    3482:	8f 77       	andi	r24, 0x7F	; 127
    3484:	90 70       	andi	r25, 0x00	; 0
    3486:	a0 70       	andi	r26, 0x00	; 0
    3488:	b0 70       	andi	r27, 0x00	; 0
    348a:	80 34       	cpi	r24, 0x40	; 64
    348c:	91 05       	cpc	r25, r1
    348e:	a1 05       	cpc	r26, r1
    3490:	b1 05       	cpc	r27, r1
    3492:	39 f4       	brne	.+14     	; 0x34a2 <__pack_f+0x144>
    3494:	e7 fe       	sbrs	r14, 7
    3496:	0d c0       	rjmp	.+26     	; 0x34b2 <__pack_f+0x154>
    3498:	80 e4       	ldi	r24, 0x40	; 64
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	a0 e0       	ldi	r26, 0x00	; 0
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	04 c0       	rjmp	.+8      	; 0x34aa <__pack_f+0x14c>
    34a2:	8f e3       	ldi	r24, 0x3F	; 63
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	a0 e0       	ldi	r26, 0x00	; 0
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	e8 0e       	add	r14, r24
    34ac:	f9 1e       	adc	r15, r25
    34ae:	0a 1f       	adc	r16, r26
    34b0:	1b 1f       	adc	r17, r27
    34b2:	17 ff       	sbrs	r17, 7
    34b4:	05 c0       	rjmp	.+10     	; 0x34c0 <__pack_f+0x162>
    34b6:	16 95       	lsr	r17
    34b8:	07 95       	ror	r16
    34ba:	f7 94       	ror	r15
    34bc:	e7 94       	ror	r14
    34be:	31 96       	adiw	r30, 0x01	; 1
    34c0:	87 e0       	ldi	r24, 0x07	; 7
    34c2:	16 95       	lsr	r17
    34c4:	07 95       	ror	r16
    34c6:	f7 94       	ror	r15
    34c8:	e7 94       	ror	r14
    34ca:	8a 95       	dec	r24
    34cc:	d1 f7       	brne	.-12     	; 0x34c2 <__pack_f+0x164>
    34ce:	05 c0       	rjmp	.+10     	; 0x34da <__pack_f+0x17c>
    34d0:	ee 24       	eor	r14, r14
    34d2:	ff 24       	eor	r15, r15
    34d4:	87 01       	movw	r16, r14
    34d6:	ef ef       	ldi	r30, 0xFF	; 255
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	6e 2f       	mov	r22, r30
    34dc:	67 95       	ror	r22
    34de:	66 27       	eor	r22, r22
    34e0:	67 95       	ror	r22
    34e2:	90 2f       	mov	r25, r16
    34e4:	9f 77       	andi	r25, 0x7F	; 127
    34e6:	d7 94       	ror	r13
    34e8:	dd 24       	eor	r13, r13
    34ea:	d7 94       	ror	r13
    34ec:	8e 2f       	mov	r24, r30
    34ee:	86 95       	lsr	r24
    34f0:	49 2f       	mov	r20, r25
    34f2:	46 2b       	or	r20, r22
    34f4:	58 2f       	mov	r21, r24
    34f6:	5d 29       	or	r21, r13
    34f8:	b7 01       	movw	r22, r14
    34fa:	ca 01       	movw	r24, r20
    34fc:	1f 91       	pop	r17
    34fe:	0f 91       	pop	r16
    3500:	ff 90       	pop	r15
    3502:	ef 90       	pop	r14
    3504:	df 90       	pop	r13
    3506:	08 95       	ret

00003508 <__unpack_f>:
    3508:	fc 01       	movw	r30, r24
    350a:	db 01       	movw	r26, r22
    350c:	40 81       	ld	r20, Z
    350e:	51 81       	ldd	r21, Z+1	; 0x01
    3510:	22 81       	ldd	r18, Z+2	; 0x02
    3512:	62 2f       	mov	r22, r18
    3514:	6f 77       	andi	r22, 0x7F	; 127
    3516:	70 e0       	ldi	r23, 0x00	; 0
    3518:	22 1f       	adc	r18, r18
    351a:	22 27       	eor	r18, r18
    351c:	22 1f       	adc	r18, r18
    351e:	93 81       	ldd	r25, Z+3	; 0x03
    3520:	89 2f       	mov	r24, r25
    3522:	88 0f       	add	r24, r24
    3524:	82 2b       	or	r24, r18
    3526:	28 2f       	mov	r18, r24
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	99 1f       	adc	r25, r25
    352c:	99 27       	eor	r25, r25
    352e:	99 1f       	adc	r25, r25
    3530:	11 96       	adiw	r26, 0x01	; 1
    3532:	9c 93       	st	X, r25
    3534:	11 97       	sbiw	r26, 0x01	; 1
    3536:	21 15       	cp	r18, r1
    3538:	31 05       	cpc	r19, r1
    353a:	a9 f5       	brne	.+106    	; 0x35a6 <__unpack_f+0x9e>
    353c:	41 15       	cp	r20, r1
    353e:	51 05       	cpc	r21, r1
    3540:	61 05       	cpc	r22, r1
    3542:	71 05       	cpc	r23, r1
    3544:	11 f4       	brne	.+4      	; 0x354a <__unpack_f+0x42>
    3546:	82 e0       	ldi	r24, 0x02	; 2
    3548:	37 c0       	rjmp	.+110    	; 0x35b8 <__unpack_f+0xb0>
    354a:	82 e8       	ldi	r24, 0x82	; 130
    354c:	9f ef       	ldi	r25, 0xFF	; 255
    354e:	13 96       	adiw	r26, 0x03	; 3
    3550:	9c 93       	st	X, r25
    3552:	8e 93       	st	-X, r24
    3554:	12 97       	sbiw	r26, 0x02	; 2
    3556:	9a 01       	movw	r18, r20
    3558:	ab 01       	movw	r20, r22
    355a:	67 e0       	ldi	r22, 0x07	; 7
    355c:	22 0f       	add	r18, r18
    355e:	33 1f       	adc	r19, r19
    3560:	44 1f       	adc	r20, r20
    3562:	55 1f       	adc	r21, r21
    3564:	6a 95       	dec	r22
    3566:	d1 f7       	brne	.-12     	; 0x355c <__unpack_f+0x54>
    3568:	83 e0       	ldi	r24, 0x03	; 3
    356a:	8c 93       	st	X, r24
    356c:	0d c0       	rjmp	.+26     	; 0x3588 <__unpack_f+0x80>
    356e:	22 0f       	add	r18, r18
    3570:	33 1f       	adc	r19, r19
    3572:	44 1f       	adc	r20, r20
    3574:	55 1f       	adc	r21, r21
    3576:	12 96       	adiw	r26, 0x02	; 2
    3578:	8d 91       	ld	r24, X+
    357a:	9c 91       	ld	r25, X
    357c:	13 97       	sbiw	r26, 0x03	; 3
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	13 96       	adiw	r26, 0x03	; 3
    3582:	9c 93       	st	X, r25
    3584:	8e 93       	st	-X, r24
    3586:	12 97       	sbiw	r26, 0x02	; 2
    3588:	20 30       	cpi	r18, 0x00	; 0
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	38 07       	cpc	r19, r24
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	48 07       	cpc	r20, r24
    3592:	80 e4       	ldi	r24, 0x40	; 64
    3594:	58 07       	cpc	r21, r24
    3596:	58 f3       	brcs	.-42     	; 0x356e <__unpack_f+0x66>
    3598:	14 96       	adiw	r26, 0x04	; 4
    359a:	2d 93       	st	X+, r18
    359c:	3d 93       	st	X+, r19
    359e:	4d 93       	st	X+, r20
    35a0:	5c 93       	st	X, r21
    35a2:	17 97       	sbiw	r26, 0x07	; 7
    35a4:	08 95       	ret
    35a6:	2f 3f       	cpi	r18, 0xFF	; 255
    35a8:	31 05       	cpc	r19, r1
    35aa:	79 f4       	brne	.+30     	; 0x35ca <__unpack_f+0xc2>
    35ac:	41 15       	cp	r20, r1
    35ae:	51 05       	cpc	r21, r1
    35b0:	61 05       	cpc	r22, r1
    35b2:	71 05       	cpc	r23, r1
    35b4:	19 f4       	brne	.+6      	; 0x35bc <__unpack_f+0xb4>
    35b6:	84 e0       	ldi	r24, 0x04	; 4
    35b8:	8c 93       	st	X, r24
    35ba:	08 95       	ret
    35bc:	64 ff       	sbrs	r22, 4
    35be:	03 c0       	rjmp	.+6      	; 0x35c6 <__unpack_f+0xbe>
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	8c 93       	st	X, r24
    35c4:	12 c0       	rjmp	.+36     	; 0x35ea <__unpack_f+0xe2>
    35c6:	1c 92       	st	X, r1
    35c8:	10 c0       	rjmp	.+32     	; 0x35ea <__unpack_f+0xe2>
    35ca:	2f 57       	subi	r18, 0x7F	; 127
    35cc:	30 40       	sbci	r19, 0x00	; 0
    35ce:	13 96       	adiw	r26, 0x03	; 3
    35d0:	3c 93       	st	X, r19
    35d2:	2e 93       	st	-X, r18
    35d4:	12 97       	sbiw	r26, 0x02	; 2
    35d6:	83 e0       	ldi	r24, 0x03	; 3
    35d8:	8c 93       	st	X, r24
    35da:	87 e0       	ldi	r24, 0x07	; 7
    35dc:	44 0f       	add	r20, r20
    35de:	55 1f       	adc	r21, r21
    35e0:	66 1f       	adc	r22, r22
    35e2:	77 1f       	adc	r23, r23
    35e4:	8a 95       	dec	r24
    35e6:	d1 f7       	brne	.-12     	; 0x35dc <__unpack_f+0xd4>
    35e8:	70 64       	ori	r23, 0x40	; 64
    35ea:	14 96       	adiw	r26, 0x04	; 4
    35ec:	4d 93       	st	X+, r20
    35ee:	5d 93       	st	X+, r21
    35f0:	6d 93       	st	X+, r22
    35f2:	7c 93       	st	X, r23
    35f4:	17 97       	sbiw	r26, 0x07	; 7
    35f6:	08 95       	ret

000035f8 <__fpcmp_parts_f>:
    35f8:	1f 93       	push	r17
    35fa:	dc 01       	movw	r26, r24
    35fc:	fb 01       	movw	r30, r22
    35fe:	9c 91       	ld	r25, X
    3600:	92 30       	cpi	r25, 0x02	; 2
    3602:	08 f4       	brcc	.+2      	; 0x3606 <__fpcmp_parts_f+0xe>
    3604:	47 c0       	rjmp	.+142    	; 0x3694 <__fpcmp_parts_f+0x9c>
    3606:	80 81       	ld	r24, Z
    3608:	82 30       	cpi	r24, 0x02	; 2
    360a:	08 f4       	brcc	.+2      	; 0x360e <__fpcmp_parts_f+0x16>
    360c:	43 c0       	rjmp	.+134    	; 0x3694 <__fpcmp_parts_f+0x9c>
    360e:	94 30       	cpi	r25, 0x04	; 4
    3610:	51 f4       	brne	.+20     	; 0x3626 <__fpcmp_parts_f+0x2e>
    3612:	11 96       	adiw	r26, 0x01	; 1
    3614:	1c 91       	ld	r17, X
    3616:	84 30       	cpi	r24, 0x04	; 4
    3618:	99 f5       	brne	.+102    	; 0x3680 <__fpcmp_parts_f+0x88>
    361a:	81 81       	ldd	r24, Z+1	; 0x01
    361c:	68 2f       	mov	r22, r24
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	61 1b       	sub	r22, r17
    3622:	71 09       	sbc	r23, r1
    3624:	3f c0       	rjmp	.+126    	; 0x36a4 <__fpcmp_parts_f+0xac>
    3626:	84 30       	cpi	r24, 0x04	; 4
    3628:	21 f0       	breq	.+8      	; 0x3632 <__fpcmp_parts_f+0x3a>
    362a:	92 30       	cpi	r25, 0x02	; 2
    362c:	31 f4       	brne	.+12     	; 0x363a <__fpcmp_parts_f+0x42>
    362e:	82 30       	cpi	r24, 0x02	; 2
    3630:	b9 f1       	breq	.+110    	; 0x36a0 <__fpcmp_parts_f+0xa8>
    3632:	81 81       	ldd	r24, Z+1	; 0x01
    3634:	88 23       	and	r24, r24
    3636:	89 f1       	breq	.+98     	; 0x369a <__fpcmp_parts_f+0xa2>
    3638:	2d c0       	rjmp	.+90     	; 0x3694 <__fpcmp_parts_f+0x9c>
    363a:	11 96       	adiw	r26, 0x01	; 1
    363c:	1c 91       	ld	r17, X
    363e:	11 97       	sbiw	r26, 0x01	; 1
    3640:	82 30       	cpi	r24, 0x02	; 2
    3642:	f1 f0       	breq	.+60     	; 0x3680 <__fpcmp_parts_f+0x88>
    3644:	81 81       	ldd	r24, Z+1	; 0x01
    3646:	18 17       	cp	r17, r24
    3648:	d9 f4       	brne	.+54     	; 0x3680 <__fpcmp_parts_f+0x88>
    364a:	12 96       	adiw	r26, 0x02	; 2
    364c:	2d 91       	ld	r18, X+
    364e:	3c 91       	ld	r19, X
    3650:	13 97       	sbiw	r26, 0x03	; 3
    3652:	82 81       	ldd	r24, Z+2	; 0x02
    3654:	93 81       	ldd	r25, Z+3	; 0x03
    3656:	82 17       	cp	r24, r18
    3658:	93 07       	cpc	r25, r19
    365a:	94 f0       	brlt	.+36     	; 0x3680 <__fpcmp_parts_f+0x88>
    365c:	28 17       	cp	r18, r24
    365e:	39 07       	cpc	r19, r25
    3660:	bc f0       	brlt	.+46     	; 0x3690 <__fpcmp_parts_f+0x98>
    3662:	14 96       	adiw	r26, 0x04	; 4
    3664:	8d 91       	ld	r24, X+
    3666:	9d 91       	ld	r25, X+
    3668:	0d 90       	ld	r0, X+
    366a:	bc 91       	ld	r27, X
    366c:	a0 2d       	mov	r26, r0
    366e:	24 81       	ldd	r18, Z+4	; 0x04
    3670:	35 81       	ldd	r19, Z+5	; 0x05
    3672:	46 81       	ldd	r20, Z+6	; 0x06
    3674:	57 81       	ldd	r21, Z+7	; 0x07
    3676:	28 17       	cp	r18, r24
    3678:	39 07       	cpc	r19, r25
    367a:	4a 07       	cpc	r20, r26
    367c:	5b 07       	cpc	r21, r27
    367e:	18 f4       	brcc	.+6      	; 0x3686 <__fpcmp_parts_f+0x8e>
    3680:	11 23       	and	r17, r17
    3682:	41 f0       	breq	.+16     	; 0x3694 <__fpcmp_parts_f+0x9c>
    3684:	0a c0       	rjmp	.+20     	; 0x369a <__fpcmp_parts_f+0xa2>
    3686:	82 17       	cp	r24, r18
    3688:	93 07       	cpc	r25, r19
    368a:	a4 07       	cpc	r26, r20
    368c:	b5 07       	cpc	r27, r21
    368e:	40 f4       	brcc	.+16     	; 0x36a0 <__fpcmp_parts_f+0xa8>
    3690:	11 23       	and	r17, r17
    3692:	19 f0       	breq	.+6      	; 0x369a <__fpcmp_parts_f+0xa2>
    3694:	61 e0       	ldi	r22, 0x01	; 1
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	05 c0       	rjmp	.+10     	; 0x36a4 <__fpcmp_parts_f+0xac>
    369a:	6f ef       	ldi	r22, 0xFF	; 255
    369c:	7f ef       	ldi	r23, 0xFF	; 255
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <__fpcmp_parts_f+0xac>
    36a0:	60 e0       	ldi	r22, 0x00	; 0
    36a2:	70 e0       	ldi	r23, 0x00	; 0
    36a4:	cb 01       	movw	r24, r22
    36a6:	1f 91       	pop	r17
    36a8:	08 95       	ret

000036aa <USART_voidInit>:

static void (*USART_pfReceivedNotification)(void) = NULL;

static void (*USART_pfSendNotification)(void) = NULL;

void USART_voidInit(void) {
    36aa:	df 93       	push	r29
    36ac:	cf 93       	push	r28
    36ae:	00 d0       	rcall	.+0      	; 0x36b0 <USART_voidInit+0x6>
    36b0:	0f 92       	push	r0
    36b2:	cd b7       	in	r28, 0x3d	; 61
    36b4:	de b7       	in	r29, 0x3e	; 62

	/* remember we can't modify UCSRC easly */
	u8 Local_u8UCSRC = 0;
    36b6:	1b 82       	std	Y+3, r1	; 0x03
#else
#error "Wrong USAUSART_CLOCK_PARITY config"
#endif

#elif USART_MODE == ASYNCHRONOUS
	SET_BIT(UCSRC, UCSRC_UMSEL);
    36b8:	a0 e4       	ldi	r26, 0x40	; 64
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
    36bc:	e0 e4       	ldi	r30, 0x40	; 64
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	80 64       	ori	r24, 0x40	; 64
    36c4:	8c 93       	st	X, r24
#error "Wrong USART_MODE config"
#endif

	/* parity mode */
#if USART_PARITY_MODE == DISABLED
	CLR_BIT(Local_u8UCSRC, UCSRC_UPM0);
    36c6:	8b 81       	ldd	r24, Y+3	; 0x03
    36c8:	8f 7e       	andi	r24, 0xEF	; 239
    36ca:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRC, UCSRC_UPM1);
    36cc:	8b 81       	ldd	r24, Y+3	; 0x03
    36ce:	8f 7d       	andi	r24, 0xDF	; 223
    36d0:	8b 83       	std	Y+3, r24	; 0x03
#error "Wrong USART_PARITY_MODE config"
#endif

	/* stop bits */
#if USART_STOP_BITS == STOP_BIT_1
	CLR_BIT(Local_u8UCSRC, UCSRC_USBS);
    36d2:	8b 81       	ldd	r24, Y+3	; 0x03
    36d4:	87 7f       	andi	r24, 0xF7	; 247
    36d6:	8b 83       	std	Y+3, r24	; 0x03
#elif USART_DATA_SIZE == DATA_SIZE_7_BIT
	CLR_BIT(Local_u8UCSRC , UCSRC_UCSZ0);
	SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1);
	CLR_BIT(UCSRB , UCSRC_UCSZ2);
#elif USART_DATA_SIZE == DATA_SIZE_8_BIT
	CLR_BIT(Local_u8UCSRC, UCSRC_UCSZ0);
    36d8:	8b 81       	ldd	r24, Y+3	; 0x03
    36da:	8d 7f       	andi	r24, 0xFD	; 253
    36dc:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
    36de:	8b 81       	ldd	r24, Y+3	; 0x03
    36e0:	84 60       	ori	r24, 0x04	; 4
    36e2:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRB, UCSRB_UCSZ2);
    36e4:	aa e2       	ldi	r26, 0x2A	; 42
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	ea e2       	ldi	r30, 0x2A	; 42
    36ea:	f0 e0       	ldi	r31, 0x00	; 0
    36ec:	80 81       	ld	r24, Z
    36ee:	84 60       	ori	r24, 0x04	; 4
    36f0:	8c 93       	st	X, r24
#else
#error "Wrong USART_DATA_SIZE config"
#endif

	/* to access the UCSRC */
	SET_BIT(Local_u8UCSRC, UCSRC_URSEL);
    36f2:	8b 81       	ldd	r24, Y+3	; 0x03
    36f4:	80 68       	ori	r24, 0x80	; 128
    36f6:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRC;
    36f8:	e0 e4       	ldi	r30, 0x40	; 64
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	8b 81       	ldd	r24, Y+3	; 0x03
    36fe:	80 83       	st	Z, r24

	/* Calculating UBRR value */
	u16 Local_u16UBRR = (u16) (USART_SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)
			- 1);
    3700:	83 e3       	ldi	r24, 0x33	; 51
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	9a 83       	std	Y+2, r25	; 0x02
    3706:	89 83       	std	Y+1, r24	; 0x01

	/* UBRRH contains the four most significant bits */
	UBRRH = (u8) (Local_u16UBRR << 8);
    3708:	e0 e4       	ldi	r30, 0x40	; 64
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	10 82       	st	Z, r1
	UBRRL = (u8) Local_u16UBRR;
    370e:	e9 e2       	ldi	r30, 0x29	; 41
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	80 83       	st	Z, r24

	SET_BIT(UCSRB, UCSRB_RXEN); /* Receive enable  */
    3716:	aa e2       	ldi	r26, 0x2A	; 42
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	ea e2       	ldi	r30, 0x2A	; 42
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	80 81       	ld	r24, Z
    3720:	80 61       	ori	r24, 0x10	; 16
    3722:	8c 93       	st	X, r24
	SET_BIT(UCSRB, UCSRB_TXEN); /* Transmitter enable  */
    3724:	aa e2       	ldi	r26, 0x2A	; 42
    3726:	b0 e0       	ldi	r27, 0x00	; 0
    3728:	ea e2       	ldi	r30, 0x2A	; 42
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	80 81       	ld	r24, Z
    372e:	88 60       	ori	r24, 0x08	; 8
    3730:	8c 93       	st	X, r24
}
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	08 95       	ret

0000373e <USART_u8ReceiveData>:

//-------------------------------------------------------------

/* Receiving Data sync */
u8 USART_u8ReceiveData(u8 *Copy_u8ReceivedData) {
    373e:	df 93       	push	r29
    3740:	cf 93       	push	r28
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	28 97       	sbiw	r28, 0x08	; 8
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	f8 94       	cli
    374c:	de bf       	out	0x3e, r29	; 62
    374e:	0f be       	out	0x3f, r0	; 63
    3750:	cd bf       	out	0x3d, r28	; 61
    3752:	9e 83       	std	Y+6, r25	; 0x06
    3754:	8d 83       	std	Y+5, r24	; 0x05

	if (Copy_u8ReceivedData == NULL)
    3756:	8d 81       	ldd	r24, Y+5	; 0x05
    3758:	9e 81       	ldd	r25, Y+6	; 0x06
    375a:	00 97       	sbiw	r24, 0x00	; 0
    375c:	19 f4       	brne	.+6      	; 0x3764 <USART_u8ReceiveData+0x26>
		return NULL_POINTER;
    375e:	82 e0       	ldi	r24, 0x02	; 2
    3760:	88 87       	std	Y+8, r24	; 0x08
    3762:	44 c0       	rjmp	.+136    	; 0x37ec <USART_u8ReceiveData+0xae>
	if (USART_u8State == BUSY)
    3764:	80 91 86 01 	lds	r24, 0x0186
    3768:	81 30       	cpi	r24, 0x01	; 1
    376a:	19 f4       	brne	.+6      	; 0x3772 <USART_u8ReceiveData+0x34>
		return BUSY_STATE;
    376c:	83 e0       	ldi	r24, 0x03	; 3
    376e:	88 87       	std	Y+8, r24	; 0x08
    3770:	3d c0       	rjmp	.+122    	; 0x37ec <USART_u8ReceiveData+0xae>

	USART_u8State = BUSY;
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	80 93 86 01 	sts	0x0186, r24

	u32 Local_u32TimeOutCounter = USART_u32TIMEOUT;
    3778:	80 e1       	ldi	r24, 0x10	; 16
    377a:	97 e2       	ldi	r25, 0x27	; 39
    377c:	a0 e0       	ldi	r26, 0x00	; 0
    377e:	b0 e0       	ldi	r27, 0x00	; 0
    3780:	89 83       	std	Y+1, r24	; 0x01
    3782:	9a 83       	std	Y+2, r25	; 0x02
    3784:	ab 83       	std	Y+3, r26	; 0x03
    3786:	bc 83       	std	Y+4, r27	; 0x04
	while (!GET_BIT(UCSRA, UCSRA_RXC) && Local_u32TimeOutCounter--)
    3788:	eb e2       	ldi	r30, 0x2B	; 43
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	88 23       	and	r24, r24
    3790:	cc f0       	brlt	.+50     	; 0x37c4 <USART_u8ReceiveData+0x86>
    3792:	1f 82       	std	Y+7, r1	; 0x07
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	9a 81       	ldd	r25, Y+2	; 0x02
    3798:	ab 81       	ldd	r26, Y+3	; 0x03
    379a:	bc 81       	ldd	r27, Y+4	; 0x04
    379c:	00 97       	sbiw	r24, 0x00	; 0
    379e:	a1 05       	cpc	r26, r1
    37a0:	b1 05       	cpc	r27, r1
    37a2:	11 f0       	breq	.+4      	; 0x37a8 <USART_u8ReceiveData+0x6a>
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	8f 83       	std	Y+7, r24	; 0x07
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	9a 81       	ldd	r25, Y+2	; 0x02
    37ac:	ab 81       	ldd	r26, Y+3	; 0x03
    37ae:	bc 81       	ldd	r27, Y+4	; 0x04
    37b0:	01 97       	sbiw	r24, 0x01	; 1
    37b2:	a1 09       	sbc	r26, r1
    37b4:	b1 09       	sbc	r27, r1
    37b6:	89 83       	std	Y+1, r24	; 0x01
    37b8:	9a 83       	std	Y+2, r25	; 0x02
    37ba:	ab 83       	std	Y+3, r26	; 0x03
    37bc:	bc 83       	std	Y+4, r27	; 0x04
    37be:	8f 81       	ldd	r24, Y+7	; 0x07
    37c0:	88 23       	and	r24, r24
    37c2:	11 f7       	brne	.-60     	; 0x3788 <USART_u8ReceiveData+0x4a>
		; /* Polling  */
	if (!Local_u32TimeOutCounter)
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	9a 81       	ldd	r25, Y+2	; 0x02
    37c8:	ab 81       	ldd	r26, Y+3	; 0x03
    37ca:	bc 81       	ldd	r27, Y+4	; 0x04
    37cc:	00 97       	sbiw	r24, 0x00	; 0
    37ce:	a1 05       	cpc	r26, r1
    37d0:	b1 05       	cpc	r27, r1
    37d2:	19 f4       	brne	.+6      	; 0x37da <USART_u8ReceiveData+0x9c>
		return TIMEOUT_STATE;
    37d4:	84 e0       	ldi	r24, 0x04	; 4
    37d6:	88 87       	std	Y+8, r24	; 0x08
    37d8:	09 c0       	rjmp	.+18     	; 0x37ec <USART_u8ReceiveData+0xae>

	*Copy_u8ReceivedData = UDR;
    37da:	ec e2       	ldi	r30, 0x2C	; 44
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	ed 81       	ldd	r30, Y+5	; 0x05
    37e2:	fe 81       	ldd	r31, Y+6	; 0x06
    37e4:	80 83       	st	Z, r24

	USART_u8State = IDLE;
    37e6:	10 92 86 01 	sts	0x0186, r1
	return OK;
    37ea:	18 86       	std	Y+8, r1	; 0x08
    37ec:	88 85       	ldd	r24, Y+8	; 0x08
}
    37ee:	28 96       	adiw	r28, 0x08	; 8
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	cf 91       	pop	r28
    37fc:	df 91       	pop	r29
    37fe:	08 95       	ret

00003800 <USART_u8SendData>:

/* Sending Data sync */
u8 USART_u8SendData(u8 Copy_u8Data) {
    3800:	df 93       	push	r29
    3802:	cf 93       	push	r28
    3804:	cd b7       	in	r28, 0x3d	; 61
    3806:	de b7       	in	r29, 0x3e	; 62
    3808:	27 97       	sbiw	r28, 0x07	; 7
    380a:	0f b6       	in	r0, 0x3f	; 63
    380c:	f8 94       	cli
    380e:	de bf       	out	0x3e, r29	; 62
    3810:	0f be       	out	0x3f, r0	; 63
    3812:	cd bf       	out	0x3d, r28	; 61
    3814:	8d 83       	std	Y+5, r24	; 0x05
	if (USART_u8State == BUSY)
    3816:	80 91 86 01 	lds	r24, 0x0186
    381a:	81 30       	cpi	r24, 0x01	; 1
    381c:	19 f4       	brne	.+6      	; 0x3824 <USART_u8SendData+0x24>
		return BUSY_STATE;
    381e:	83 e0       	ldi	r24, 0x03	; 3
    3820:	8f 83       	std	Y+7, r24	; 0x07
    3822:	42 c0       	rjmp	.+132    	; 0x38a8 <USART_u8SendData+0xa8>

	USART_u8State = BUSY;
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	80 93 86 01 	sts	0x0186, r24

	u32 Local_u32TimeOutCounter = USART_u32TIMEOUT;
    382a:	80 e1       	ldi	r24, 0x10	; 16
    382c:	97 e2       	ldi	r25, 0x27	; 39
    382e:	a0 e0       	ldi	r26, 0x00	; 0
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	89 83       	std	Y+1, r24	; 0x01
    3834:	9a 83       	std	Y+2, r25	; 0x02
    3836:	ab 83       	std	Y+3, r26	; 0x03
    3838:	bc 83       	std	Y+4, r27	; 0x04
	while (!GET_BIT(UCSRA, UCSRA_UDRE) && Local_u32TimeOutCounter--)
    383a:	eb e2       	ldi	r30, 0x2B	; 43
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	82 95       	swap	r24
    3842:	86 95       	lsr	r24
    3844:	87 70       	andi	r24, 0x07	; 7
    3846:	88 2f       	mov	r24, r24
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	81 70       	andi	r24, 0x01	; 1
    384c:	90 70       	andi	r25, 0x00	; 0
    384e:	00 97       	sbiw	r24, 0x00	; 0
    3850:	c9 f4       	brne	.+50     	; 0x3884 <USART_u8SendData+0x84>
    3852:	1e 82       	std	Y+6, r1	; 0x06
    3854:	89 81       	ldd	r24, Y+1	; 0x01
    3856:	9a 81       	ldd	r25, Y+2	; 0x02
    3858:	ab 81       	ldd	r26, Y+3	; 0x03
    385a:	bc 81       	ldd	r27, Y+4	; 0x04
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	a1 05       	cpc	r26, r1
    3860:	b1 05       	cpc	r27, r1
    3862:	11 f0       	breq	.+4      	; 0x3868 <USART_u8SendData+0x68>
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	8e 83       	std	Y+6, r24	; 0x06
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	9a 81       	ldd	r25, Y+2	; 0x02
    386c:	ab 81       	ldd	r26, Y+3	; 0x03
    386e:	bc 81       	ldd	r27, Y+4	; 0x04
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	a1 09       	sbc	r26, r1
    3874:	b1 09       	sbc	r27, r1
    3876:	89 83       	std	Y+1, r24	; 0x01
    3878:	9a 83       	std	Y+2, r25	; 0x02
    387a:	ab 83       	std	Y+3, r26	; 0x03
    387c:	bc 83       	std	Y+4, r27	; 0x04
    387e:	8e 81       	ldd	r24, Y+6	; 0x06
    3880:	88 23       	and	r24, r24
    3882:	d9 f6       	brne	.-74     	; 0x383a <USART_u8SendData+0x3a>
		; /* Polling  */
	if (!Local_u32TimeOutCounter)
    3884:	89 81       	ldd	r24, Y+1	; 0x01
    3886:	9a 81       	ldd	r25, Y+2	; 0x02
    3888:	ab 81       	ldd	r26, Y+3	; 0x03
    388a:	bc 81       	ldd	r27, Y+4	; 0x04
    388c:	00 97       	sbiw	r24, 0x00	; 0
    388e:	a1 05       	cpc	r26, r1
    3890:	b1 05       	cpc	r27, r1
    3892:	19 f4       	brne	.+6      	; 0x389a <USART_u8SendData+0x9a>
		return TIMEOUT_STATE;
    3894:	84 e0       	ldi	r24, 0x04	; 4
    3896:	8f 83       	std	Y+7, r24	; 0x07
    3898:	07 c0       	rjmp	.+14     	; 0x38a8 <USART_u8SendData+0xa8>

	UDR = Copy_u8Data;
    389a:	ec e2       	ldi	r30, 0x2C	; 44
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	8d 81       	ldd	r24, Y+5	; 0x05
    38a0:	80 83       	st	Z, r24

	USART_u8State = IDLE;
    38a2:	10 92 86 01 	sts	0x0186, r1
	return OK;
    38a6:	1f 82       	std	Y+7, r1	; 0x07
    38a8:	8f 81       	ldd	r24, Y+7	; 0x07
}
    38aa:	27 96       	adiw	r28, 0x07	; 7
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	f8 94       	cli
    38b0:	de bf       	out	0x3e, r29	; 62
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	cd bf       	out	0x3d, r28	; 61
    38b6:	cf 91       	pop	r28
    38b8:	df 91       	pop	r29
    38ba:	08 95       	ret

000038bc <USART_u8ReceiveDataAsync>:

//----------------------------------------------------------------------------

u8 USART_u8ReceiveDataAsync(u8 *Copy_u8ReceivedData,
		void (*Copy_pfNotification)(void)) {
    38bc:	df 93       	push	r29
    38be:	cf 93       	push	r28
    38c0:	00 d0       	rcall	.+0      	; 0x38c2 <USART_u8ReceiveDataAsync+0x6>
    38c2:	00 d0       	rcall	.+0      	; 0x38c4 <USART_u8ReceiveDataAsync+0x8>
    38c4:	0f 92       	push	r0
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
    38ca:	9a 83       	std	Y+2, r25	; 0x02
    38cc:	89 83       	std	Y+1, r24	; 0x01
    38ce:	7c 83       	std	Y+4, r23	; 0x04
    38d0:	6b 83       	std	Y+3, r22	; 0x03

	if (Copy_pfNotification == NULL && !USART_u8ReceivingStringFlag)
    38d2:	8b 81       	ldd	r24, Y+3	; 0x03
    38d4:	9c 81       	ldd	r25, Y+4	; 0x04
    38d6:	00 97       	sbiw	r24, 0x00	; 0
    38d8:	39 f4       	brne	.+14     	; 0x38e8 <USART_u8ReceiveDataAsync+0x2c>
    38da:	80 91 8d 01 	lds	r24, 0x018D
    38de:	88 23       	and	r24, r24
    38e0:	19 f4       	brne	.+6      	; 0x38e8 <USART_u8ReceiveDataAsync+0x2c>
		return NULL_POINTER;
    38e2:	82 e0       	ldi	r24, 0x02	; 2
    38e4:	8d 83       	std	Y+5, r24	; 0x05
    38e6:	29 c0       	rjmp	.+82     	; 0x393a <USART_u8ReceiveDataAsync+0x7e>
	if (Copy_u8ReceivedData == NULL)
    38e8:	89 81       	ldd	r24, Y+1	; 0x01
    38ea:	9a 81       	ldd	r25, Y+2	; 0x02
    38ec:	00 97       	sbiw	r24, 0x00	; 0
    38ee:	19 f4       	brne	.+6      	; 0x38f6 <USART_u8ReceiveDataAsync+0x3a>
		return NULL_POINTER;
    38f0:	82 e0       	ldi	r24, 0x02	; 2
    38f2:	8d 83       	std	Y+5, r24	; 0x05
    38f4:	22 c0       	rjmp	.+68     	; 0x393a <USART_u8ReceiveDataAsync+0x7e>
	if (USART_u8State == BUSY)
    38f6:	80 91 86 01 	lds	r24, 0x0186
    38fa:	81 30       	cpi	r24, 0x01	; 1
    38fc:	19 f4       	brne	.+6      	; 0x3904 <USART_u8ReceiveDataAsync+0x48>
		return BUSY_STATE;
    38fe:	83 e0       	ldi	r24, 0x03	; 3
    3900:	8d 83       	std	Y+5, r24	; 0x05
    3902:	1b c0       	rjmp	.+54     	; 0x393a <USART_u8ReceiveDataAsync+0x7e>

	USART_u8State = BUSY;
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	80 93 86 01 	sts	0x0186, r24

	USART_pu8ReceivedData = Copy_u8ReceivedData;
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	9a 81       	ldd	r25, Y+2	; 0x02
    390e:	90 93 88 01 	sts	0x0188, r25
    3912:	80 93 87 01 	sts	0x0187, r24

	if (Copy_pfNotification != NULL)
    3916:	8b 81       	ldd	r24, Y+3	; 0x03
    3918:	9c 81       	ldd	r25, Y+4	; 0x04
    391a:	00 97       	sbiw	r24, 0x00	; 0
    391c:	31 f0       	breq	.+12     	; 0x392a <USART_u8ReceiveDataAsync+0x6e>
		USART_pfReceivedNotification = Copy_pfNotification;
    391e:	8b 81       	ldd	r24, Y+3	; 0x03
    3920:	9c 81       	ldd	r25, Y+4	; 0x04
    3922:	90 93 90 01 	sts	0x0190, r25
    3926:	80 93 8f 01 	sts	0x018F, r24

	/* enable complete receiving Interrupt */
	SET_BIT(UCSRB, UCSRB_RXCIE);
    392a:	aa e2       	ldi	r26, 0x2A	; 42
    392c:	b0 e0       	ldi	r27, 0x00	; 0
    392e:	ea e2       	ldi	r30, 0x2A	; 42
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	80 81       	ld	r24, Z
    3934:	80 68       	ori	r24, 0x80	; 128
    3936:	8c 93       	st	X, r24
	return OK;
    3938:	1d 82       	std	Y+5, r1	; 0x05
    393a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	cf 91       	pop	r28
    3948:	df 91       	pop	r29
    394a:	08 95       	ret

0000394c <USART_u8SendDataAsync>:

u8 USART_u8SendDataAsync(u8 Copy_u8Data) {
    394c:	df 93       	push	r29
    394e:	cf 93       	push	r28
    3950:	00 d0       	rcall	.+0      	; 0x3952 <USART_u8SendDataAsync+0x6>
    3952:	cd b7       	in	r28, 0x3d	; 61
    3954:	de b7       	in	r29, 0x3e	; 62
    3956:	89 83       	std	Y+1, r24	; 0x01
    if (USART_u8State == BUSY)
    3958:	80 91 86 01 	lds	r24, 0x0186
    395c:	81 30       	cpi	r24, 0x01	; 1
    395e:	19 f4       	brne	.+6      	; 0x3966 <USART_u8SendDataAsync+0x1a>
        return BUSY_STATE;
    3960:	83 e0       	ldi	r24, 0x03	; 3
    3962:	8a 83       	std	Y+2, r24	; 0x02
    3964:	0e c0       	rjmp	.+28     	; 0x3982 <USART_u8SendDataAsync+0x36>

    USART_u8State = BUSY;
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	80 93 86 01 	sts	0x0186, r24
    USART_pu8SendData = Copy_u8Data;
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	80 93 89 01 	sts	0x0189, r24
    /* Enable Data Register Empty Interrupt */
    SET_BIT(UCSRB, UCSRB_UDRIE);
    3972:	aa e2       	ldi	r26, 0x2A	; 42
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	ea e2       	ldi	r30, 0x2A	; 42
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	80 62       	ori	r24, 0x20	; 32
    397e:	8c 93       	st	X, r24
    return OK;
    3980:	1a 82       	std	Y+2, r1	; 0x02
    3982:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3984:	0f 90       	pop	r0
    3986:	0f 90       	pop	r0
    3988:	cf 91       	pop	r28
    398a:	df 91       	pop	r29
    398c:	08 95       	ret

0000398e <USART_u8ReceiveStringAsync>:

//----------------------------------------------------------------------------

u8 USART_u8ReceiveStringAsync(u8 *Copy_u8ReceivedData, u8 Copy_u8StringLength,
		void (*Copy_pfNotification)(void)) {
    398e:	df 93       	push	r29
    3990:	cf 93       	push	r28
    3992:	00 d0       	rcall	.+0      	; 0x3994 <USART_u8ReceiveStringAsync+0x6>
    3994:	00 d0       	rcall	.+0      	; 0x3996 <USART_u8ReceiveStringAsync+0x8>
    3996:	00 d0       	rcall	.+0      	; 0x3998 <USART_u8ReceiveStringAsync+0xa>
    3998:	cd b7       	in	r28, 0x3d	; 61
    399a:	de b7       	in	r29, 0x3e	; 62
    399c:	9a 83       	std	Y+2, r25	; 0x02
    399e:	89 83       	std	Y+1, r24	; 0x01
    39a0:	6b 83       	std	Y+3, r22	; 0x03
    39a2:	5d 83       	std	Y+5, r21	; 0x05
    39a4:	4c 83       	std	Y+4, r20	; 0x04

	if (Copy_u8ReceivedData == NULL || Copy_pfNotification == NULL)
    39a6:	89 81       	ldd	r24, Y+1	; 0x01
    39a8:	9a 81       	ldd	r25, Y+2	; 0x02
    39aa:	00 97       	sbiw	r24, 0x00	; 0
    39ac:	21 f0       	breq	.+8      	; 0x39b6 <USART_u8ReceiveStringAsync+0x28>
    39ae:	8c 81       	ldd	r24, Y+4	; 0x04
    39b0:	9d 81       	ldd	r25, Y+5	; 0x05
    39b2:	00 97       	sbiw	r24, 0x00	; 0
    39b4:	19 f4       	brne	.+6      	; 0x39bc <USART_u8ReceiveStringAsync+0x2e>
		return NULL_POINTER;
    39b6:	82 e0       	ldi	r24, 0x02	; 2
    39b8:	8e 83       	std	Y+6, r24	; 0x06
    39ba:	1c c0       	rjmp	.+56     	; 0x39f4 <USART_u8ReceiveStringAsync+0x66>
	if (USART_u8State == BUSY)
    39bc:	80 91 86 01 	lds	r24, 0x0186
    39c0:	81 30       	cpi	r24, 0x01	; 1
    39c2:	19 f4       	brne	.+6      	; 0x39ca <USART_u8ReceiveStringAsync+0x3c>
		return BUSY_STATE;
    39c4:	83 e0       	ldi	r24, 0x03	; 3
    39c6:	8e 83       	std	Y+6, r24	; 0x06
    39c8:	15 c0       	rjmp	.+42     	; 0x39f4 <USART_u8ReceiveStringAsync+0x66>

	USART_u8index = 0;
    39ca:	10 92 8c 01 	sts	0x018C, r1
	USART_u8ReceivedStringLength = Copy_u8StringLength;
    39ce:	8b 81       	ldd	r24, Y+3	; 0x03
    39d0:	80 93 8e 01 	sts	0x018E, r24
	USART_pfReceivedNotification = Copy_pfNotification;
    39d4:	8c 81       	ldd	r24, Y+4	; 0x04
    39d6:	9d 81       	ldd	r25, Y+5	; 0x05
    39d8:	90 93 90 01 	sts	0x0190, r25
    39dc:	80 93 8f 01 	sts	0x018F, r24
	/* set it to prevent returning null pointer from USART_u8ReceiveDataAsync */
	USART_u8ReceivingStringFlag = 1;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	80 93 8d 01 	sts	0x018D, r24

	USART_u8ReceiveDataAsync(Copy_u8ReceivedData, NULL);
    39e6:	89 81       	ldd	r24, Y+1	; 0x01
    39e8:	9a 81       	ldd	r25, Y+2	; 0x02
    39ea:	60 e0       	ldi	r22, 0x00	; 0
    39ec:	70 e0       	ldi	r23, 0x00	; 0
    39ee:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <USART_u8ReceiveDataAsync>
	return OK;
    39f2:	1e 82       	std	Y+6, r1	; 0x06
    39f4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    39f6:	26 96       	adiw	r28, 0x06	; 6
    39f8:	0f b6       	in	r0, 0x3f	; 63
    39fa:	f8 94       	cli
    39fc:	de bf       	out	0x3e, r29	; 62
    39fe:	0f be       	out	0x3f, r0	; 63
    3a00:	cd bf       	out	0x3d, r28	; 61
    3a02:	cf 91       	pop	r28
    3a04:	df 91       	pop	r29
    3a06:	08 95       	ret

00003a08 <USART_u8SendStringAsync>:

u8 USART_u8SendStringAsync(u8 *Copy_u8StringData,
		void (*Copy_pfNotification)(void)) {
    3a08:	df 93       	push	r29
    3a0a:	cf 93       	push	r28
    3a0c:	00 d0       	rcall	.+0      	; 0x3a0e <USART_u8SendStringAsync+0x6>
    3a0e:	00 d0       	rcall	.+0      	; 0x3a10 <USART_u8SendStringAsync+0x8>
    3a10:	0f 92       	push	r0
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
    3a16:	9a 83       	std	Y+2, r25	; 0x02
    3a18:	89 83       	std	Y+1, r24	; 0x01
    3a1a:	7c 83       	std	Y+4, r23	; 0x04
    3a1c:	6b 83       	std	Y+3, r22	; 0x03
	if (USART_u8State == BUSY)
    3a1e:	80 91 86 01 	lds	r24, 0x0186
    3a22:	81 30       	cpi	r24, 0x01	; 1
    3a24:	19 f4       	brne	.+6      	; 0x3a2c <USART_u8SendStringAsync+0x24>
		return BUSY_STATE;
    3a26:	83 e0       	ldi	r24, 0x03	; 3
    3a28:	8d 83       	std	Y+5, r24	; 0x05
    3a2a:	2d c0       	rjmp	.+90     	; 0x3a86 <USART_u8SendStringAsync+0x7e>
	if (Copy_u8StringData == NULL || Copy_pfNotification == NULL)
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a30:	00 97       	sbiw	r24, 0x00	; 0
    3a32:	21 f0       	breq	.+8      	; 0x3a3c <USART_u8SendStringAsync+0x34>
    3a34:	8b 81       	ldd	r24, Y+3	; 0x03
    3a36:	9c 81       	ldd	r25, Y+4	; 0x04
    3a38:	00 97       	sbiw	r24, 0x00	; 0
    3a3a:	19 f4       	brne	.+6      	; 0x3a42 <USART_u8SendStringAsync+0x3a>
		return NULL_POINTER;
    3a3c:	82 e0       	ldi	r24, 0x02	; 2
    3a3e:	8d 83       	std	Y+5, r24	; 0x05
    3a40:	22 c0       	rjmp	.+68     	; 0x3a86 <USART_u8SendStringAsync+0x7e>

	USART_u8index = 0;
    3a42:	10 92 8c 01 	sts	0x018C, r1
	USART_pu8StringData = Copy_u8StringData;
    3a46:	89 81       	ldd	r24, Y+1	; 0x01
    3a48:	9a 81       	ldd	r25, Y+2	; 0x02
    3a4a:	90 93 8b 01 	sts	0x018B, r25
    3a4e:	80 93 8a 01 	sts	0x018A, r24
	USART_pfSendNotification = Copy_pfNotification;
    3a52:	8b 81       	ldd	r24, Y+3	; 0x03
    3a54:	9c 81       	ldd	r25, Y+4	; 0x04
    3a56:	90 93 92 01 	sts	0x0192, r25
    3a5a:	80 93 91 01 	sts	0x0191, r24

	/* Enable Complete Transmitting Interrupt */
	SET_BIT(UCSRB, UCSRB_TXCIE);
    3a5e:	aa e2       	ldi	r26, 0x2A	; 42
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	ea e2       	ldi	r30, 0x2A	; 42
    3a64:	f0 e0       	ldi	r31, 0x00	; 0
    3a66:	80 81       	ld	r24, Z
    3a68:	80 64       	ori	r24, 0x40	; 64
    3a6a:	8c 93       	st	X, r24

	USART_u8SendDataAsync(Copy_u8StringData[USART_u8index]);
    3a6c:	80 91 8c 01 	lds	r24, 0x018C
    3a70:	28 2f       	mov	r18, r24
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	9a 81       	ldd	r25, Y+2	; 0x02
    3a78:	fc 01       	movw	r30, r24
    3a7a:	e2 0f       	add	r30, r18
    3a7c:	f3 1f       	adc	r31, r19
    3a7e:	80 81       	ld	r24, Z
    3a80:	0e 94 a6 1c 	call	0x394c	; 0x394c <USART_u8SendDataAsync>

	return OK;
    3a84:	1d 82       	std	Y+5, r1	; 0x05
    3a86:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3a88:	0f 90       	pop	r0
    3a8a:	0f 90       	pop	r0
    3a8c:	0f 90       	pop	r0
    3a8e:	0f 90       	pop	r0
    3a90:	0f 90       	pop	r0
    3a92:	cf 91       	pop	r28
    3a94:	df 91       	pop	r29
    3a96:	08 95       	ret

00003a98 <__vector_13>:
//----------------------------------------------------------------------------

/* ISR for Receiving Completed */
void __vector_13(void) __attribute__ ((signal));

void __vector_13(void) {
    3a98:	1f 92       	push	r1
    3a9a:	0f 92       	push	r0
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	0f 92       	push	r0
    3aa0:	11 24       	eor	r1, r1
    3aa2:	2f 93       	push	r18
    3aa4:	3f 93       	push	r19
    3aa6:	4f 93       	push	r20
    3aa8:	5f 93       	push	r21
    3aaa:	6f 93       	push	r22
    3aac:	7f 93       	push	r23
    3aae:	8f 93       	push	r24
    3ab0:	9f 93       	push	r25
    3ab2:	af 93       	push	r26
    3ab4:	bf 93       	push	r27
    3ab6:	ef 93       	push	r30
    3ab8:	ff 93       	push	r31
    3aba:	df 93       	push	r29
    3abc:	cf 93       	push	r28
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62

	USART_u8State = IDLE;
    3ac2:	10 92 86 01 	sts	0x0186, r1

	/* Checking is interrupt from receiving string func or not */
	if (USART_u8ReceivingStringFlag) {
    3ac6:	80 91 8d 01 	lds	r24, 0x018D
    3aca:	88 23       	and	r24, r24
    3acc:	09 f4       	brne	.+2      	; 0x3ad0 <__vector_13+0x38>
    3ace:	45 c0       	rjmp	.+138    	; 0x3b5a <__vector_13+0xc2>

		if (USART_u8index != USART_u8ReceivedStringLength) {
    3ad0:	90 91 8c 01 	lds	r25, 0x018C
    3ad4:	80 91 8e 01 	lds	r24, 0x018E
    3ad8:	98 17       	cp	r25, r24
    3ada:	e1 f0       	breq	.+56     	; 0x3b14 <__vector_13+0x7c>

			USART_u8index++;
    3adc:	80 91 8c 01 	lds	r24, 0x018C
    3ae0:	8f 5f       	subi	r24, 0xFF	; 255
    3ae2:	80 93 8c 01 	sts	0x018C, r24
			/* Copying received data */
			*USART_pu8ReceivedData = UDR;
    3ae6:	a0 91 87 01 	lds	r26, 0x0187
    3aea:	b0 91 88 01 	lds	r27, 0x0188
    3aee:	ec e2       	ldi	r30, 0x2C	; 44
    3af0:	f0 e0       	ldi	r31, 0x00	; 0
    3af2:	80 81       	ld	r24, Z
    3af4:	8c 93       	st	X, r24

			if (USART_u8index != USART_u8ReceivedStringLength)
    3af6:	90 91 8c 01 	lds	r25, 0x018C
    3afa:	80 91 8e 01 	lds	r24, 0x018E
    3afe:	98 17       	cp	r25, r24
    3b00:	49 f0       	breq	.+18     	; 0x3b14 <__vector_13+0x7c>
				USART_u8ReceiveDataAsync(USART_pu8ReceivedData + 1,
    3b02:	80 91 87 01 	lds	r24, 0x0187
    3b06:	90 91 88 01 	lds	r25, 0x0188
    3b0a:	01 96       	adiw	r24, 0x01	; 1
    3b0c:	60 e0       	ldi	r22, 0x00	; 0
    3b0e:	70 e0       	ldi	r23, 0x00	; 0
    3b10:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <USART_u8ReceiveDataAsync>
				NULL);
		}

		if (USART_u8index == USART_u8ReceivedStringLength) {
    3b14:	90 91 8c 01 	lds	r25, 0x018C
    3b18:	80 91 8e 01 	lds	r24, 0x018E
    3b1c:	98 17       	cp	r25, r24
    3b1e:	89 f5       	brne	.+98     	; 0x3b82 <__vector_13+0xea>

			*(++USART_pu8ReceivedData) = '\0';
    3b20:	80 91 87 01 	lds	r24, 0x0187
    3b24:	90 91 88 01 	lds	r25, 0x0188
    3b28:	01 96       	adiw	r24, 0x01	; 1
    3b2a:	90 93 88 01 	sts	0x0188, r25
    3b2e:	80 93 87 01 	sts	0x0187, r24
    3b32:	e0 91 87 01 	lds	r30, 0x0187
    3b36:	f0 91 88 01 	lds	r31, 0x0188
    3b3a:	10 82       	st	Z, r1

			/* clr it to return null pointer from USART_u8ReceiveDataAsync */
			USART_u8ReceivingStringFlag = 0;
    3b3c:	10 92 8d 01 	sts	0x018D, r1

			USART_pfReceivedNotification();
    3b40:	e0 91 8f 01 	lds	r30, 0x018F
    3b44:	f0 91 90 01 	lds	r31, 0x0190
    3b48:	09 95       	icall

			/* Disable complete receiving Interrupt */
			CLR_BIT(UCSRB, UCSRB_RXCIE);
    3b4a:	aa e2       	ldi	r26, 0x2A	; 42
    3b4c:	b0 e0       	ldi	r27, 0x00	; 0
    3b4e:	ea e2       	ldi	r30, 0x2A	; 42
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	80 81       	ld	r24, Z
    3b54:	8f 77       	andi	r24, 0x7F	; 127
    3b56:	8c 93       	st	X, r24
    3b58:	14 c0       	rjmp	.+40     	; 0x3b82 <__vector_13+0xea>

		}
	} else {

		/* Copying received data */
		*USART_pu8ReceivedData = UDR;
    3b5a:	a0 91 87 01 	lds	r26, 0x0187
    3b5e:	b0 91 88 01 	lds	r27, 0x0188
    3b62:	ec e2       	ldi	r30, 0x2C	; 44
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	80 81       	ld	r24, Z
    3b68:	8c 93       	st	X, r24

		USART_pfReceivedNotification();
    3b6a:	e0 91 8f 01 	lds	r30, 0x018F
    3b6e:	f0 91 90 01 	lds	r31, 0x0190
    3b72:	09 95       	icall

		/* Disable complete receiving Interrupt */
		CLR_BIT(UCSRB, UCSRB_RXCIE);
    3b74:	aa e2       	ldi	r26, 0x2A	; 42
    3b76:	b0 e0       	ldi	r27, 0x00	; 0
    3b78:	ea e2       	ldi	r30, 0x2A	; 42
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	80 81       	ld	r24, Z
    3b7e:	8f 77       	andi	r24, 0x7F	; 127
    3b80:	8c 93       	st	X, r24

	}
}
    3b82:	cf 91       	pop	r28
    3b84:	df 91       	pop	r29
    3b86:	ff 91       	pop	r31
    3b88:	ef 91       	pop	r30
    3b8a:	bf 91       	pop	r27
    3b8c:	af 91       	pop	r26
    3b8e:	9f 91       	pop	r25
    3b90:	8f 91       	pop	r24
    3b92:	7f 91       	pop	r23
    3b94:	6f 91       	pop	r22
    3b96:	5f 91       	pop	r21
    3b98:	4f 91       	pop	r20
    3b9a:	3f 91       	pop	r19
    3b9c:	2f 91       	pop	r18
    3b9e:	0f 90       	pop	r0
    3ba0:	0f be       	out	0x3f, r0	; 63
    3ba2:	0f 90       	pop	r0
    3ba4:	1f 90       	pop	r1
    3ba6:	18 95       	reti

00003ba8 <__vector_15>:

/* ISR for Sending Completed */
void __vector_15(void) __attribute__ ((signal));

void __vector_15(void) {
    3ba8:	1f 92       	push	r1
    3baa:	0f 92       	push	r0
    3bac:	0f b6       	in	r0, 0x3f	; 63
    3bae:	0f 92       	push	r0
    3bb0:	11 24       	eor	r1, r1
    3bb2:	2f 93       	push	r18
    3bb4:	3f 93       	push	r19
    3bb6:	4f 93       	push	r20
    3bb8:	5f 93       	push	r21
    3bba:	6f 93       	push	r22
    3bbc:	7f 93       	push	r23
    3bbe:	8f 93       	push	r24
    3bc0:	9f 93       	push	r25
    3bc2:	af 93       	push	r26
    3bc4:	bf 93       	push	r27
    3bc6:	ef 93       	push	r30
    3bc8:	ff 93       	push	r31
    3bca:	df 93       	push	r29
    3bcc:	cf 93       	push	r28
    3bce:	cd b7       	in	r28, 0x3d	; 61
    3bd0:	de b7       	in	r29, 0x3e	; 62

	USART_u8State = IDLE;
    3bd2:	10 92 86 01 	sts	0x0186, r1

	if (USART_pu8StringData[++USART_u8index] == '\0') {
    3bd6:	20 91 8a 01 	lds	r18, 0x018A
    3bda:	30 91 8b 01 	lds	r19, 0x018B
    3bde:	80 91 8c 01 	lds	r24, 0x018C
    3be2:	8f 5f       	subi	r24, 0xFF	; 255
    3be4:	80 93 8c 01 	sts	0x018C, r24
    3be8:	80 91 8c 01 	lds	r24, 0x018C
    3bec:	88 2f       	mov	r24, r24
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	f9 01       	movw	r30, r18
    3bf2:	e8 0f       	add	r30, r24
    3bf4:	f9 1f       	adc	r31, r25
    3bf6:	80 81       	ld	r24, Z
    3bf8:	88 23       	and	r24, r24
    3bfa:	69 f4       	brne	.+26     	; 0x3c16 <__vector_15+0x6e>

		USART_pfSendNotification();
    3bfc:	e0 91 91 01 	lds	r30, 0x0191
    3c00:	f0 91 92 01 	lds	r31, 0x0192
    3c04:	09 95       	icall
		/* Disable Complete Transmitting Interrupt */
		CLR_BIT(UCSRB, UCSRB_TXCIE);
    3c06:	aa e2       	ldi	r26, 0x2A	; 42
    3c08:	b0 e0       	ldi	r27, 0x00	; 0
    3c0a:	ea e2       	ldi	r30, 0x2A	; 42
    3c0c:	f0 e0       	ldi	r31, 0x00	; 0
    3c0e:	80 81       	ld	r24, Z
    3c10:	8f 7b       	andi	r24, 0xBF	; 191
    3c12:	8c 93       	st	X, r24
    3c14:	0e c0       	rjmp	.+28     	; 0x3c32 <__vector_15+0x8a>

	} else {
		USART_u8SendDataAsync(USART_pu8StringData[USART_u8index]);
    3c16:	20 91 8a 01 	lds	r18, 0x018A
    3c1a:	30 91 8b 01 	lds	r19, 0x018B
    3c1e:	80 91 8c 01 	lds	r24, 0x018C
    3c22:	88 2f       	mov	r24, r24
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	f9 01       	movw	r30, r18
    3c28:	e8 0f       	add	r30, r24
    3c2a:	f9 1f       	adc	r31, r25
    3c2c:	80 81       	ld	r24, Z
    3c2e:	0e 94 a6 1c 	call	0x394c	; 0x394c <USART_u8SendDataAsync>
	}
}
    3c32:	cf 91       	pop	r28
    3c34:	df 91       	pop	r29
    3c36:	ff 91       	pop	r31
    3c38:	ef 91       	pop	r30
    3c3a:	bf 91       	pop	r27
    3c3c:	af 91       	pop	r26
    3c3e:	9f 91       	pop	r25
    3c40:	8f 91       	pop	r24
    3c42:	7f 91       	pop	r23
    3c44:	6f 91       	pop	r22
    3c46:	5f 91       	pop	r21
    3c48:	4f 91       	pop	r20
    3c4a:	3f 91       	pop	r19
    3c4c:	2f 91       	pop	r18
    3c4e:	0f 90       	pop	r0
    3c50:	0f be       	out	0x3f, r0	; 63
    3c52:	0f 90       	pop	r0
    3c54:	1f 90       	pop	r1
    3c56:	18 95       	reti

00003c58 <__vector_14>:

/* ISR for Data Register Empty*/
void __vector_14(void) __attribute__ ((signal));
void __vector_14(void) {
    3c58:	1f 92       	push	r1
    3c5a:	0f 92       	push	r0
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	0f 92       	push	r0
    3c60:	11 24       	eor	r1, r1
    3c62:	8f 93       	push	r24
    3c64:	af 93       	push	r26
    3c66:	bf 93       	push	r27
    3c68:	ef 93       	push	r30
    3c6a:	ff 93       	push	r31
    3c6c:	df 93       	push	r29
    3c6e:	cf 93       	push	r28
    3c70:	cd b7       	in	r28, 0x3d	; 61
    3c72:	de b7       	in	r29, 0x3e	; 62

	/* Sending data */
	UDR = USART_pu8SendData;
    3c74:	ec e2       	ldi	r30, 0x2C	; 44
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	80 91 89 01 	lds	r24, 0x0189
    3c7c:	80 83       	st	Z, r24

	/* Disable Data Register Empty Interrupt */
	CLR_BIT(UCSRB, UCSRB_UDRIE);
    3c7e:	aa e2       	ldi	r26, 0x2A	; 42
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	ea e2       	ldi	r30, 0x2A	; 42
    3c84:	f0 e0       	ldi	r31, 0x00	; 0
    3c86:	80 81       	ld	r24, Z
    3c88:	8f 7d       	andi	r24, 0xDF	; 223
    3c8a:	8c 93       	st	X, r24

	USART_u8State = IDLE;
    3c8c:	10 92 86 01 	sts	0x0186, r1
}
    3c90:	cf 91       	pop	r28
    3c92:	df 91       	pop	r29
    3c94:	ff 91       	pop	r31
    3c96:	ef 91       	pop	r30
    3c98:	bf 91       	pop	r27
    3c9a:	af 91       	pop	r26
    3c9c:	8f 91       	pop	r24
    3c9e:	0f 90       	pop	r0
    3ca0:	0f be       	out	0x3f, r0	; 63
    3ca2:	0f 90       	pop	r0
    3ca4:	1f 90       	pop	r1
    3ca6:	18 95       	reti

00003ca8 <chooseCompareMatchOutMode>:
#define TIMERS_T0_COMPARE_OUT_TOGGLE_MODE           1
#define TIMERS_T0_COMPARE_OUT_NON_INVERTING_MODE    2
#define TIMERS_T0_COMPARE_OUT_INVERTING_MODE        3

 */
static void chooseCompareMatchOutMode() {
    3ca8:	df 93       	push	r29
    3caa:	cf 93       	push	r28
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
#if TIMERS_T0_FAST_PWM_COMPARE_OUT_MODE == TIMERS_T0_FAST_PWM_COMPARE_OUT_NORMAL_MODE
    CLR_BIT(TCCR0, TCCR0_COM00);
    CLR_BIT(TCCR0, TCCR0_COM01);

#elif TIMERS_T0_FAST_PWM_COMPARE_OUT_MODE == TIMERS_T0_FAST_PWM_COMPARE_OUT_NON_INVERTING_MODE
    CLR_BIT(TCCR0, TCCR0_COM00);
    3cb0:	a3 e5       	ldi	r26, 0x53	; 83
    3cb2:	b0 e0       	ldi	r27, 0x00	; 0
    3cb4:	e3 e5       	ldi	r30, 0x53	; 83
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	80 81       	ld	r24, Z
    3cba:	8f 7e       	andi	r24, 0xEF	; 239
    3cbc:	8c 93       	st	X, r24
    SET_BIT(TCCR0, TCCR0_COM01);
    3cbe:	a3 e5       	ldi	r26, 0x53	; 83
    3cc0:	b0 e0       	ldi	r27, 0x00	; 0
    3cc2:	e3 e5       	ldi	r30, 0x53	; 83
    3cc4:	f0 e0       	ldi	r31, 0x00	; 0
    3cc6:	80 81       	ld	r24, Z
    3cc8:	80 62       	ori	r24, 0x20	; 32
    3cca:	8c 93       	st	X, r24
#elif TIMERS_T0_NON_PWM_COMPARE_OUT_MODE == TIMERS_T0_NON_PWM_COMPARE_OUT_SET_MODE
    SET_BIT(TCCR0, TCCR0_COM00);
    SET_BIT(TCCR0, TCCR0_COM01);
#endif
#endif
}
    3ccc:	cf 91       	pop	r28
    3cce:	df 91       	pop	r29
    3cd0:	08 95       	ret

00003cd2 <TIMER0_voidInit>:


void TIMER0_voidInit() {
    3cd2:	df 93       	push	r29
    3cd4:	cf 93       	push	r28
    3cd6:	cd b7       	in	r28, 0x3d	; 61
    3cd8:	de b7       	in	r29, 0x3e	; 62

    /* Preload value */
    OCR0 = TIMERS_T0_CTC_COUNT;

#elif TIMERS_T0_MODE == TIMERS_T0_FAST_PWM_MODE
    SET_BIT(TCCR0 , TCCR0_WGM00);
    3cda:	a3 e5       	ldi	r26, 0x53	; 83
    3cdc:	b0 e0       	ldi	r27, 0x00	; 0
    3cde:	e3 e5       	ldi	r30, 0x53	; 83
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	80 81       	ld	r24, Z
    3ce4:	80 64       	ori	r24, 0x40	; 64
    3ce6:	8c 93       	st	X, r24
    SET_BIT(TCCR0 , TCCR0_WGM01);
    3ce8:	a3 e5       	ldi	r26, 0x53	; 83
    3cea:	b0 e0       	ldi	r27, 0x00	; 0
    3cec:	e3 e5       	ldi	r30, 0x53	; 83
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	80 81       	ld	r24, Z
    3cf2:	88 60       	ori	r24, 0x08	; 8
    3cf4:	8c 93       	st	X, r24

    /* Set compare match value */
    OCR0 = TIMERS_T0_COMPARE_MATCH_VALUE;
    3cf6:	ec e5       	ldi	r30, 0x5C	; 92
    3cf8:	f0 e0       	ldi	r31, 0x00	; 0
    3cfa:	80 e4       	ldi	r24, 0x40	; 64
    3cfc:	80 83       	st	Z, r24
#endif

    /* Select hardware action on OC0 pin when compare match */
    chooseCompareMatchOutMode();
    3cfe:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <chooseCompareMatchOutMode>

    /* Prescaler Clock */
    TCCR0 &= 0b11111000;
    3d02:	a3 e5       	ldi	r26, 0x53	; 83
    3d04:	b0 e0       	ldi	r27, 0x00	; 0
    3d06:	e3 e5       	ldi	r30, 0x53	; 83
    3d08:	f0 e0       	ldi	r31, 0x00	; 0
    3d0a:	80 81       	ld	r24, Z
    3d0c:	88 7f       	andi	r24, 0xF8	; 248
    3d0e:	8c 93       	st	X, r24
    TCCR0 |= TIMERS_T0_CLOCK;
    3d10:	a3 e5       	ldi	r26, 0x53	; 83
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	e3 e5       	ldi	r30, 0x53	; 83
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	80 81       	ld	r24, Z
    3d1a:	82 60       	ori	r24, 0x02	; 2
    3d1c:	8c 93       	st	X, r24
}
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	08 95       	ret

00003d24 <TIMERS_u8Timer0SetCallBack>:


u8 TIMERS_u8Timer0SetCallBack(void (*Copy_pf)(void)) {
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	00 d0       	rcall	.+0      	; 0x3d2a <TIMERS_u8Timer0SetCallBack+0x6>
    3d2a:	00 d0       	rcall	.+0      	; 0x3d2c <TIMERS_u8Timer0SetCallBack+0x8>
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	9b 83       	std	Y+3, r25	; 0x03
    3d32:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = OK;
    3d34:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_pf == NULL) {
    3d36:	8a 81       	ldd	r24, Y+2	; 0x02
    3d38:	9b 81       	ldd	r25, Y+3	; 0x03
    3d3a:	00 97       	sbiw	r24, 0x00	; 0
    3d3c:	29 f4       	brne	.+10     	; 0x3d48 <TIMERS_u8Timer0SetCallBack+0x24>
        Local_u8ErrorState = NOT_OK;
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	89 83       	std	Y+1, r24	; 0x01
        return Local_u8ErrorState;
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	8c 83       	std	Y+4, r24	; 0x04
    3d46:	08 c0       	rjmp	.+16     	; 0x3d58 <TIMERS_u8Timer0SetCallBack+0x34>
    }
    TIMERS_pfTimer0Overflow = Copy_pf;
    3d48:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d4c:	90 93 94 01 	sts	0x0194, r25
    3d50:	80 93 93 01 	sts	0x0193, r24
    return Local_u8ErrorState;
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	8c 83       	std	Y+4, r24	; 0x04
    3d58:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	cf 91       	pop	r28
    3d64:	df 91       	pop	r29
    3d66:	08 95       	ret

00003d68 <TIMERS_u8Timer0CTCSetCallBack>:

u8 TIMERS_u8Timer0CTCSetCallBack(void (*Copy_pf)(void)) {
    3d68:	df 93       	push	r29
    3d6a:	cf 93       	push	r28
    3d6c:	00 d0       	rcall	.+0      	; 0x3d6e <TIMERS_u8Timer0CTCSetCallBack+0x6>
    3d6e:	00 d0       	rcall	.+0      	; 0x3d70 <TIMERS_u8Timer0CTCSetCallBack+0x8>
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
    3d74:	9b 83       	std	Y+3, r25	; 0x03
    3d76:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = OK;
    3d78:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_pf == NULL) {
    3d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d7e:	00 97       	sbiw	r24, 0x00	; 0
    3d80:	29 f4       	brne	.+10     	; 0x3d8c <TIMERS_u8Timer0CTCSetCallBack+0x24>
        Local_u8ErrorState = NOT_OK;
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	89 83       	std	Y+1, r24	; 0x01
        return Local_u8ErrorState;
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	8c 83       	std	Y+4, r24	; 0x04
    3d8a:	08 c0       	rjmp	.+16     	; 0x3d9c <TIMERS_u8Timer0CTCSetCallBack+0x34>
    }
    TIMERS_pfTimer0CTC = Copy_pf;
    3d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d90:	90 93 96 01 	sts	0x0196, r25
    3d94:	80 93 95 01 	sts	0x0195, r24
    return Local_u8ErrorState;
    3d98:	89 81       	ldd	r24, Y+1	; 0x01
    3d9a:	8c 83       	std	Y+4, r24	; 0x04
    3d9c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	0f 90       	pop	r0
    3da4:	0f 90       	pop	r0
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	08 95       	ret

00003dac <TIMERS_voidTimer0SetCompareMatchValue>:

void TIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8OCR0Value){
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	0f 92       	push	r0
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = Copy_u8OCR0Value;
    3db8:	ec e5       	ldi	r30, 0x5C	; 92
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	89 81       	ldd	r24, Y+1	; 0x01
    3dbe:	80 83       	st	Z, r24
}
    3dc0:	0f 90       	pop	r0
    3dc2:	cf 91       	pop	r28
    3dc4:	df 91       	pop	r29
    3dc6:	08 95       	ret

00003dc8 <TIMER1_voidInit>:



void TIMER1_voidInit(){
    3dc8:	df 93       	push	r29
    3dca:	cf 93       	push	r28
    3dcc:	cd b7       	in	r28, 0x3d	; 61
    3dce:	de b7       	in	r29, 0x3e	; 62

    /* SET MODE */
    CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3dd0:	af e4       	ldi	r26, 0x4F	; 79
    3dd2:	b0 e0       	ldi	r27, 0x00	; 0
    3dd4:	ef e4       	ldi	r30, 0x4F	; 79
    3dd6:	f0 e0       	ldi	r31, 0x00	; 0
    3dd8:	80 81       	ld	r24, Z
    3dda:	8e 7f       	andi	r24, 0xFE	; 254
    3ddc:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3dde:	af e4       	ldi	r26, 0x4F	; 79
    3de0:	b0 e0       	ldi	r27, 0x00	; 0
    3de2:	ef e4       	ldi	r30, 0x4F	; 79
    3de4:	f0 e0       	ldi	r31, 0x00	; 0
    3de6:	80 81       	ld	r24, Z
    3de8:	8d 7f       	andi	r24, 0xFD	; 253
    3dea:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3dec:	ae e4       	ldi	r26, 0x4E	; 78
    3dee:	b0 e0       	ldi	r27, 0x00	; 0
    3df0:	ee e4       	ldi	r30, 0x4E	; 78
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	80 81       	ld	r24, Z
    3df6:	87 7f       	andi	r24, 0xF7	; 247
    3df8:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3dfa:	ae e4       	ldi	r26, 0x4E	; 78
    3dfc:	b0 e0       	ldi	r27, 0x00	; 0
    3dfe:	ee e4       	ldi	r30, 0x4E	; 78
    3e00:	f0 e0       	ldi	r31, 0x00	; 0
    3e02:	80 81       	ld	r24, Z
    3e04:	8f 7e       	andi	r24, 0xEF	; 239
    3e06:	8c 93       	st	X, r24
//    OCR1A = 999;

    /* SET PRESCALER CLOCK */
//    TCCR1B &= 0b11111000;
//    TCCR1B |= TIMERS_T1_CLOCK;
    CLR_BIT(TCCR1B , TCCR1B_CS10);
    3e08:	ae e4       	ldi	r26, 0x4E	; 78
    3e0a:	b0 e0       	ldi	r27, 0x00	; 0
    3e0c:	ee e4       	ldi	r30, 0x4E	; 78
    3e0e:	f0 e0       	ldi	r31, 0x00	; 0
    3e10:	80 81       	ld	r24, Z
    3e12:	8e 7f       	andi	r24, 0xFE	; 254
    3e14:	8c 93       	st	X, r24
    SET_BIT(TCCR1B , TCCR1B_CS11);
    3e16:	ae e4       	ldi	r26, 0x4E	; 78
    3e18:	b0 e0       	ldi	r27, 0x00	; 0
    3e1a:	ee e4       	ldi	r30, 0x4E	; 78
    3e1c:	f0 e0       	ldi	r31, 0x00	; 0
    3e1e:	80 81       	ld	r24, Z
    3e20:	82 60       	ori	r24, 0x02	; 2
    3e22:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B , TCCR1B_CS12);
    3e24:	ae e4       	ldi	r26, 0x4E	; 78
    3e26:	b0 e0       	ldi	r27, 0x00	; 0
    3e28:	ee e4       	ldi	r30, 0x4E	; 78
    3e2a:	f0 e0       	ldi	r31, 0x00	; 0
    3e2c:	80 81       	ld	r24, Z
    3e2e:	8b 7f       	andi	r24, 0xFB	; 251
    3e30:	8c 93       	st	X, r24
}
    3e32:	cf 91       	pop	r28
    3e34:	df 91       	pop	r29
    3e36:	08 95       	ret

00003e38 <TIMER1_voidSetCompareMatchValueA>:

void TIMER1_voidSetCompareMatchValueA(u16 Copy_u8OCR1AValue){
    3e38:	df 93       	push	r29
    3e3a:	cf 93       	push	r28
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <TIMER1_voidSetCompareMatchValueA+0x6>
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	9a 83       	std	Y+2, r25	; 0x02
    3e44:	89 83       	std	Y+1, r24	; 0x01
//    OCR1A = ((Copy_u8OCR1AValue ) / 0.180) + 999;
    OCR1A = Copy_u8OCR1AValue;
    3e46:	ea e4       	ldi	r30, 0x4A	; 74
    3e48:	f0 e0       	ldi	r31, 0x00	; 0
    3e4a:	89 81       	ldd	r24, Y+1	; 0x01
    3e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4e:	91 83       	std	Z+1, r25	; 0x01
    3e50:	80 83       	st	Z, r24
}
    3e52:	0f 90       	pop	r0
    3e54:	0f 90       	pop	r0
    3e56:	cf 91       	pop	r28
    3e58:	df 91       	pop	r29
    3e5a:	08 95       	ret

00003e5c <TIMER1_voidSetTimerValue>:

void TIMER1_voidSetTimerValue(u16 Copy_u16Value){
    3e5c:	df 93       	push	r29
    3e5e:	cf 93       	push	r28
    3e60:	00 d0       	rcall	.+0      	; 0x3e62 <TIMER1_voidSetTimerValue+0x6>
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
    3e66:	9a 83       	std	Y+2, r25	; 0x02
    3e68:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    3e6a:	ec e4       	ldi	r30, 0x4C	; 76
    3e6c:	f0 e0       	ldi	r31, 0x00	; 0
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	9a 81       	ldd	r25, Y+2	; 0x02
    3e72:	91 83       	std	Z+1, r25	; 0x01
    3e74:	80 83       	st	Z, r24
}
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret

00003e80 <TIMER1_u16ReadTimerValue>:

u16 TIMER1_u16ReadTimerValue(){
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    3e88:	ec e4       	ldi	r30, 0x4C	; 76
    3e8a:	f0 e0       	ldi	r31, 0x00	; 0
    3e8c:	80 81       	ld	r24, Z
    3e8e:	91 81       	ldd	r25, Z+1	; 0x01
}
    3e90:	cf 91       	pop	r28
    3e92:	df 91       	pop	r29
    3e94:	08 95       	ret

00003e96 <__vector_11>:

void __vector_11() __attribute__((signal));

void __vector_11() {
    3e96:	1f 92       	push	r1
    3e98:	0f 92       	push	r0
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	0f 92       	push	r0
    3e9e:	11 24       	eor	r1, r1
    3ea0:	2f 93       	push	r18
    3ea2:	3f 93       	push	r19
    3ea4:	4f 93       	push	r20
    3ea6:	5f 93       	push	r21
    3ea8:	6f 93       	push	r22
    3eaa:	7f 93       	push	r23
    3eac:	8f 93       	push	r24
    3eae:	9f 93       	push	r25
    3eb0:	af 93       	push	r26
    3eb2:	bf 93       	push	r27
    3eb4:	ef 93       	push	r30
    3eb6:	ff 93       	push	r31
    3eb8:	df 93       	push	r29
    3eba:	cf 93       	push	r28
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
    static u16 Local_u16OverflowCounter = 0;
    Local_u16OverflowCounter++;
    3ec0:	80 91 97 01 	lds	r24, 0x0197
    3ec4:	90 91 98 01 	lds	r25, 0x0198
    3ec8:	01 96       	adiw	r24, 0x01	; 1
    3eca:	90 93 98 01 	sts	0x0198, r25
    3ece:	80 93 97 01 	sts	0x0197, r24
    if (Local_u16OverflowCounter == TIMERS_T0_OVERFLOW_COUNT) {
    3ed2:	80 91 97 01 	lds	r24, 0x0197
    3ed6:	90 91 98 01 	lds	r25, 0x0198
    3eda:	27 e2       	ldi	r18, 0x27	; 39
    3edc:	80 31       	cpi	r24, 0x10	; 16
    3ede:	92 07       	cpc	r25, r18
    3ee0:	99 f4       	brne	.+38     	; 0x3f08 <__vector_11+0x72>
        TCNT0 = TIMERS_T0_PRELOAD_VALUE;
    3ee2:	e2 e5       	ldi	r30, 0x52	; 82
    3ee4:	f0 e0       	ldi	r31, 0x00	; 0
    3ee6:	80 ec       	ldi	r24, 0xC0	; 192
    3ee8:	80 83       	st	Z, r24
        Local_u16OverflowCounter = 0;
    3eea:	10 92 98 01 	sts	0x0198, r1
    3eee:	10 92 97 01 	sts	0x0197, r1
        if (TIMERS_pfTimer0Overflow != NULL) {
    3ef2:	80 91 93 01 	lds	r24, 0x0193
    3ef6:	90 91 94 01 	lds	r25, 0x0194
    3efa:	00 97       	sbiw	r24, 0x00	; 0
    3efc:	29 f0       	breq	.+10     	; 0x3f08 <__vector_11+0x72>
            TIMERS_pfTimer0Overflow();
    3efe:	e0 91 93 01 	lds	r30, 0x0193
    3f02:	f0 91 94 01 	lds	r31, 0x0194
    3f06:	09 95       	icall
        }
    }
}
    3f08:	cf 91       	pop	r28
    3f0a:	df 91       	pop	r29
    3f0c:	ff 91       	pop	r31
    3f0e:	ef 91       	pop	r30
    3f10:	bf 91       	pop	r27
    3f12:	af 91       	pop	r26
    3f14:	9f 91       	pop	r25
    3f16:	8f 91       	pop	r24
    3f18:	7f 91       	pop	r23
    3f1a:	6f 91       	pop	r22
    3f1c:	5f 91       	pop	r21
    3f1e:	4f 91       	pop	r20
    3f20:	3f 91       	pop	r19
    3f22:	2f 91       	pop	r18
    3f24:	0f 90       	pop	r0
    3f26:	0f be       	out	0x3f, r0	; 63
    3f28:	0f 90       	pop	r0
    3f2a:	1f 90       	pop	r1
    3f2c:	18 95       	reti

00003f2e <__vector_10>:

void __vector_10() __attribute__((signal));

void __vector_10() {
    3f2e:	1f 92       	push	r1
    3f30:	0f 92       	push	r0
    3f32:	0f b6       	in	r0, 0x3f	; 63
    3f34:	0f 92       	push	r0
    3f36:	11 24       	eor	r1, r1
    3f38:	2f 93       	push	r18
    3f3a:	3f 93       	push	r19
    3f3c:	4f 93       	push	r20
    3f3e:	5f 93       	push	r21
    3f40:	6f 93       	push	r22
    3f42:	7f 93       	push	r23
    3f44:	8f 93       	push	r24
    3f46:	9f 93       	push	r25
    3f48:	af 93       	push	r26
    3f4a:	bf 93       	push	r27
    3f4c:	ef 93       	push	r30
    3f4e:	ff 93       	push	r31
    3f50:	df 93       	push	r29
    3f52:	cf 93       	push	r28
    3f54:	cd b7       	in	r28, 0x3d	; 61
    3f56:	de b7       	in	r29, 0x3e	; 62
    static u16 Local_u16CTCCounter = 0;
    Local_u16CTCCounter++;
    3f58:	80 91 99 01 	lds	r24, 0x0199
    3f5c:	90 91 9a 01 	lds	r25, 0x019A
    3f60:	01 96       	adiw	r24, 0x01	; 1
    3f62:	90 93 9a 01 	sts	0x019A, r25
    3f66:	80 93 99 01 	sts	0x0199, r24
    if (Local_u16CTCCounter == TIMERS_T0_OVERFLOW_COUNT) {
    3f6a:	80 91 99 01 	lds	r24, 0x0199
    3f6e:	90 91 9a 01 	lds	r25, 0x019A
    3f72:	27 e2       	ldi	r18, 0x27	; 39
    3f74:	80 31       	cpi	r24, 0x10	; 16
    3f76:	92 07       	cpc	r25, r18
    3f78:	79 f4       	brne	.+30     	; 0x3f98 <__vector_10+0x6a>
        //        OCR0 = TIMERS_T0_CTC_COUNT;
        Local_u16CTCCounter = 0;
    3f7a:	10 92 9a 01 	sts	0x019A, r1
    3f7e:	10 92 99 01 	sts	0x0199, r1
        if (TIMERS_pfTimer0CTC != NULL) {
    3f82:	80 91 95 01 	lds	r24, 0x0195
    3f86:	90 91 96 01 	lds	r25, 0x0196
    3f8a:	00 97       	sbiw	r24, 0x00	; 0
    3f8c:	29 f0       	breq	.+10     	; 0x3f98 <__vector_10+0x6a>
            TIMERS_pfTimer0CTC();
    3f8e:	e0 91 95 01 	lds	r30, 0x0195
    3f92:	f0 91 96 01 	lds	r31, 0x0196
    3f96:	09 95       	icall
        }
    }
}
    3f98:	cf 91       	pop	r28
    3f9a:	df 91       	pop	r29
    3f9c:	ff 91       	pop	r31
    3f9e:	ef 91       	pop	r30
    3fa0:	bf 91       	pop	r27
    3fa2:	af 91       	pop	r26
    3fa4:	9f 91       	pop	r25
    3fa6:	8f 91       	pop	r24
    3fa8:	7f 91       	pop	r23
    3faa:	6f 91       	pop	r22
    3fac:	5f 91       	pop	r21
    3fae:	4f 91       	pop	r20
    3fb0:	3f 91       	pop	r19
    3fb2:	2f 91       	pop	r18
    3fb4:	0f 90       	pop	r0
    3fb6:	0f be       	out	0x3f, r0	; 63
    3fb8:	0f 90       	pop	r0
    3fba:	1f 90       	pop	r1
    3fbc:	18 95       	reti

00003fbe <SPI_VoidMasterInit>:
static u8 SPI_u8StringLength;
static u8 SPI_u8StringIndex;

static void (*SPI_pfNotification)(void) = NULL;

void SPI_VoidMasterInit(void) {
    3fbe:	df 93       	push	r29
    3fc0:	cf 93       	push	r28
    3fc2:	cd b7       	in	r28, 0x3d	; 61
    3fc4:	de b7       	in	r29, 0x3e	; 62

    /* Data order */
#if SPI_DATA_ORDER == MSB_TRANSMITTED_FIRST
    CLR_BIT(SPCR, SPCR_DORD);
    3fc6:	ad e2       	ldi	r26, 0x2D	; 45
    3fc8:	b0 e0       	ldi	r27, 0x00	; 0
    3fca:	ed e2       	ldi	r30, 0x2D	; 45
    3fcc:	f0 e0       	ldi	r31, 0x00	; 0
    3fce:	80 81       	ld	r24, Z
    3fd0:	8f 7d       	andi	r24, 0xDF	; 223
    3fd2:	8c 93       	st	X, r24
#error "Wrong SPI_DATA_ORDER config"
#endif

    /* Clock polarity */
#if SPI_CLK_POLARITY == POLARITY_RISING_LEADING
    CLR_BIT(SPCR, SPCR_CPOL);
    3fd4:	ad e2       	ldi	r26, 0x2D	; 45
    3fd6:	b0 e0       	ldi	r27, 0x00	; 0
    3fd8:	ed e2       	ldi	r30, 0x2D	; 45
    3fda:	f0 e0       	ldi	r31, 0x00	; 0
    3fdc:	80 81       	ld	r24, Z
    3fde:	87 7f       	andi	r24, 0xF7	; 247
    3fe0:	8c 93       	st	X, r24
#error "Wrong SPI_CLK_POLARITY config"
#endif

    /* Clock phase */
#if SPI_CLK_PHASE == PHASE_SAMPLE_LEADING
    CLR_BIT(SPCR, SPCR_CPHA);
    3fe2:	ad e2       	ldi	r26, 0x2D	; 45
    3fe4:	b0 e0       	ldi	r27, 0x00	; 0
    3fe6:	ed e2       	ldi	r30, 0x2D	; 45
    3fe8:	f0 e0       	ldi	r31, 0x00	; 0
    3fea:	80 81       	ld	r24, Z
    3fec:	8b 7f       	andi	r24, 0xFB	; 251
    3fee:	8c 93       	st	X, r24
#elif SPI_CLK_RATE == FREQUENCY_DIVIDED_BY_8
    SET_BIT(SPCR, SPCR_SPR0);
    CLR_BIT(SPCR, SPCR_SPR1);
    SET_BIT(SPSR, SPCR_SPI2X);
#elif SPI_CLK_RATE == FREQUENCY_DIVIDED_BY_16
    SET_BIT(SPCR, SPCR_SPR0);
    3ff0:	ad e2       	ldi	r26, 0x2D	; 45
    3ff2:	b0 e0       	ldi	r27, 0x00	; 0
    3ff4:	ed e2       	ldi	r30, 0x2D	; 45
    3ff6:	f0 e0       	ldi	r31, 0x00	; 0
    3ff8:	80 81       	ld	r24, Z
    3ffa:	81 60       	ori	r24, 0x01	; 1
    3ffc:	8c 93       	st	X, r24
    CLR_BIT(SPCR, SPCR_SPR1);
    3ffe:	ad e2       	ldi	r26, 0x2D	; 45
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	ed e2       	ldi	r30, 0x2D	; 45
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	80 81       	ld	r24, Z
    4008:	8d 7f       	andi	r24, 0xFD	; 253
    400a:	8c 93       	st	X, r24
    CLR_BIT(SPSR, SPSR_SPI2X);
    400c:	ae e2       	ldi	r26, 0x2E	; 46
    400e:	b0 e0       	ldi	r27, 0x00	; 0
    4010:	ee e2       	ldi	r30, 0x2E	; 46
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	80 81       	ld	r24, Z
    4016:	8e 7f       	andi	r24, 0xFE	; 254
    4018:	8c 93       	st	X, r24
#else
#error "Wrong SPI_CLK_RATE config"
#endif

    /* Config as master */
    SET_BIT(SPCR, SPCR_MSTR);
    401a:	ad e2       	ldi	r26, 0x2D	; 45
    401c:	b0 e0       	ldi	r27, 0x00	; 0
    401e:	ed e2       	ldi	r30, 0x2D	; 45
    4020:	f0 e0       	ldi	r31, 0x00	; 0
    4022:	80 81       	ld	r24, Z
    4024:	80 61       	ori	r24, 0x10	; 16
    4026:	8c 93       	st	X, r24

    /* Enable SPI */
    SET_BIT(SPCR, SPCR_SPE);
    4028:	ad e2       	ldi	r26, 0x2D	; 45
    402a:	b0 e0       	ldi	r27, 0x00	; 0
    402c:	ed e2       	ldi	r30, 0x2D	; 45
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	80 81       	ld	r24, Z
    4032:	80 64       	ori	r24, 0x40	; 64
    4034:	8c 93       	st	X, r24
}
    4036:	cf 91       	pop	r28
    4038:	df 91       	pop	r29
    403a:	08 95       	ret

0000403c <SPI_VoidSlaveInit>:

void SPI_VoidSlaveInit(void) {
    403c:	df 93       	push	r29
    403e:	cf 93       	push	r28
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62

    /* Data order */
#if SPI_DATA_ORDER == MSB_TRANSMITTED_FIRST
    CLR_BIT(SPCR, SPCR_DORD);
    4044:	ad e2       	ldi	r26, 0x2D	; 45
    4046:	b0 e0       	ldi	r27, 0x00	; 0
    4048:	ed e2       	ldi	r30, 0x2D	; 45
    404a:	f0 e0       	ldi	r31, 0x00	; 0
    404c:	80 81       	ld	r24, Z
    404e:	8f 7d       	andi	r24, 0xDF	; 223
    4050:	8c 93       	st	X, r24
#error "Wrong SPI_DATA_ORDER config"
#endif

    /* Clock polarity */
#if SPI_CLK_POLARITY == POLARITY_RISING_LEADING
    CLR_BIT(SPCR, SPCR_CPOL);
    4052:	ad e2       	ldi	r26, 0x2D	; 45
    4054:	b0 e0       	ldi	r27, 0x00	; 0
    4056:	ed e2       	ldi	r30, 0x2D	; 45
    4058:	f0 e0       	ldi	r31, 0x00	; 0
    405a:	80 81       	ld	r24, Z
    405c:	87 7f       	andi	r24, 0xF7	; 247
    405e:	8c 93       	st	X, r24
#error "Wrong SPI_CLK_POLARITY config"
#endif

    /* Clock phase */
#if SPI_CLK_PHASE == PHASE_SAMPLE_LEADING
    CLR_BIT(SPCR, SPCR_CPHA);
    4060:	ad e2       	ldi	r26, 0x2D	; 45
    4062:	b0 e0       	ldi	r27, 0x00	; 0
    4064:	ed e2       	ldi	r30, 0x2D	; 45
    4066:	f0 e0       	ldi	r31, 0x00	; 0
    4068:	80 81       	ld	r24, Z
    406a:	8b 7f       	andi	r24, 0xFB	; 251
    406c:	8c 93       	st	X, r24
#else
#error "Wrong SPI_CLK_PHASE config"
#endif

    /* Config as slave */
    CLR_BIT(SPCR, SPCR_MSTR);
    406e:	ad e2       	ldi	r26, 0x2D	; 45
    4070:	b0 e0       	ldi	r27, 0x00	; 0
    4072:	ed e2       	ldi	r30, 0x2D	; 45
    4074:	f0 e0       	ldi	r31, 0x00	; 0
    4076:	80 81       	ld	r24, Z
    4078:	8f 7e       	andi	r24, 0xEF	; 239
    407a:	8c 93       	st	X, r24

    /* Enable SPI */
    SET_BIT(SPCR, SPCR_SPE);
    407c:	ad e2       	ldi	r26, 0x2D	; 45
    407e:	b0 e0       	ldi	r27, 0x00	; 0
    4080:	ed e2       	ldi	r30, 0x2D	; 45
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	80 81       	ld	r24, Z
    4086:	80 64       	ori	r24, 0x40	; 64
    4088:	8c 93       	st	X, r24
}
    408a:	cf 91       	pop	r28
    408c:	df 91       	pop	r29
    408e:	08 95       	ret

00004090 <SPI_u8TransceiveSync>:

u8 SPI_u8TransceiveSync(u8 Copy_u8Data, u8 *Copy_pu8ReceivedData) {
    4090:	df 93       	push	r29
    4092:	cf 93       	push	r28
    4094:	cd b7       	in	r28, 0x3d	; 61
    4096:	de b7       	in	r29, 0x3e	; 62
    4098:	29 97       	sbiw	r28, 0x09	; 9
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	f8 94       	cli
    409e:	de bf       	out	0x3e, r29	; 62
    40a0:	0f be       	out	0x3f, r0	; 63
    40a2:	cd bf       	out	0x3d, r28	; 61
    40a4:	8d 83       	std	Y+5, r24	; 0x05
    40a6:	7f 83       	std	Y+7, r23	; 0x07
    40a8:	6e 83       	std	Y+6, r22	; 0x06
    if (Copy_pu8ReceivedData == NULL)
    40aa:	8e 81       	ldd	r24, Y+6	; 0x06
    40ac:	9f 81       	ldd	r25, Y+7	; 0x07
    40ae:	00 97       	sbiw	r24, 0x00	; 0
    40b0:	19 f4       	brne	.+6      	; 0x40b8 <SPI_u8TransceiveSync+0x28>
        return NULL_POINTER;
    40b2:	82 e0       	ldi	r24, 0x02	; 2
    40b4:	89 87       	std	Y+9, r24	; 0x09
    40b6:	3c c0       	rjmp	.+120    	; 0x4130 <SPI_u8TransceiveSync+0xa0>

    /* Start transmission */
    SPDR = Copy_u8Data;
    40b8:	ef e2       	ldi	r30, 0x2F	; 47
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	8d 81       	ldd	r24, Y+5	; 0x05
    40be:	80 83       	st	Z, r24

    u32 Local_u32TimeOutCounter = SPI_u32TIMEOUT;
    40c0:	80 e1       	ldi	r24, 0x10	; 16
    40c2:	97 e2       	ldi	r25, 0x27	; 39
    40c4:	a0 e0       	ldi	r26, 0x00	; 0
    40c6:	b0 e0       	ldi	r27, 0x00	; 0
    40c8:	89 83       	std	Y+1, r24	; 0x01
    40ca:	9a 83       	std	Y+2, r25	; 0x02
    40cc:	ab 83       	std	Y+3, r26	; 0x03
    40ce:	bc 83       	std	Y+4, r27	; 0x04

    /* Busy waiting for the data transfer to complete */
    while (!GET_BIT(SPSR, SPSR_SPIF) && Local_u32TimeOutCounter--);
    40d0:	ee e2       	ldi	r30, 0x2E	; 46
    40d2:	f0 e0       	ldi	r31, 0x00	; 0
    40d4:	80 81       	ld	r24, Z
    40d6:	88 23       	and	r24, r24
    40d8:	cc f0       	brlt	.+50     	; 0x410c <SPI_u8TransceiveSync+0x7c>
    40da:	18 86       	std	Y+8, r1	; 0x08
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	9a 81       	ldd	r25, Y+2	; 0x02
    40e0:	ab 81       	ldd	r26, Y+3	; 0x03
    40e2:	bc 81       	ldd	r27, Y+4	; 0x04
    40e4:	00 97       	sbiw	r24, 0x00	; 0
    40e6:	a1 05       	cpc	r26, r1
    40e8:	b1 05       	cpc	r27, r1
    40ea:	11 f0       	breq	.+4      	; 0x40f0 <SPI_u8TransceiveSync+0x60>
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	88 87       	std	Y+8, r24	; 0x08
    40f0:	89 81       	ldd	r24, Y+1	; 0x01
    40f2:	9a 81       	ldd	r25, Y+2	; 0x02
    40f4:	ab 81       	ldd	r26, Y+3	; 0x03
    40f6:	bc 81       	ldd	r27, Y+4	; 0x04
    40f8:	01 97       	sbiw	r24, 0x01	; 1
    40fa:	a1 09       	sbc	r26, r1
    40fc:	b1 09       	sbc	r27, r1
    40fe:	89 83       	std	Y+1, r24	; 0x01
    4100:	9a 83       	std	Y+2, r25	; 0x02
    4102:	ab 83       	std	Y+3, r26	; 0x03
    4104:	bc 83       	std	Y+4, r27	; 0x04
    4106:	88 85       	ldd	r24, Y+8	; 0x08
    4108:	88 23       	and	r24, r24
    410a:	11 f7       	brne	.-60     	; 0x40d0 <SPI_u8TransceiveSync+0x40>

    if (!Local_u32TimeOutCounter)
    410c:	89 81       	ldd	r24, Y+1	; 0x01
    410e:	9a 81       	ldd	r25, Y+2	; 0x02
    4110:	ab 81       	ldd	r26, Y+3	; 0x03
    4112:	bc 81       	ldd	r27, Y+4	; 0x04
    4114:	00 97       	sbiw	r24, 0x00	; 0
    4116:	a1 05       	cpc	r26, r1
    4118:	b1 05       	cpc	r27, r1
    411a:	19 f4       	brne	.+6      	; 0x4122 <SPI_u8TransceiveSync+0x92>
        return TIMEOUT_STATE;
    411c:	84 e0       	ldi	r24, 0x04	; 4
    411e:	89 87       	std	Y+9, r24	; 0x09
    4120:	07 c0       	rjmp	.+14     	; 0x4130 <SPI_u8TransceiveSync+0xa0>

    /* Assign the received data */
    *Copy_pu8ReceivedData = SPDR;
    4122:	ef e2       	ldi	r30, 0x2F	; 47
    4124:	f0 e0       	ldi	r31, 0x00	; 0
    4126:	80 81       	ld	r24, Z
    4128:	ee 81       	ldd	r30, Y+6	; 0x06
    412a:	ff 81       	ldd	r31, Y+7	; 0x07
    412c:	80 83       	st	Z, r24

    return OK;
    412e:	19 86       	std	Y+9, r1	; 0x09
    4130:	89 85       	ldd	r24, Y+9	; 0x09
}
    4132:	29 96       	adiw	r28, 0x09	; 9
    4134:	0f b6       	in	r0, 0x3f	; 63
    4136:	f8 94       	cli
    4138:	de bf       	out	0x3e, r29	; 62
    413a:	0f be       	out	0x3f, r0	; 63
    413c:	cd bf       	out	0x3d, r28	; 61
    413e:	cf 91       	pop	r28
    4140:	df 91       	pop	r29
    4142:	08 95       	ret

00004144 <SPI_u8TransceiveAsync>:

u8 SPI_u8TransceiveAsync(u8 Copy_u8Data, u8 *Copy_pu8ReceivedData,
                         void (*Copy_pfNotification)(void)) {
    4144:	df 93       	push	r29
    4146:	cf 93       	push	r28
    4148:	00 d0       	rcall	.+0      	; 0x414a <SPI_u8TransceiveAsync+0x6>
    414a:	00 d0       	rcall	.+0      	; 0x414c <SPI_u8TransceiveAsync+0x8>
    414c:	00 d0       	rcall	.+0      	; 0x414e <SPI_u8TransceiveAsync+0xa>
    414e:	cd b7       	in	r28, 0x3d	; 61
    4150:	de b7       	in	r29, 0x3e	; 62
    4152:	89 83       	std	Y+1, r24	; 0x01
    4154:	7b 83       	std	Y+3, r23	; 0x03
    4156:	6a 83       	std	Y+2, r22	; 0x02
    4158:	5d 83       	std	Y+5, r21	; 0x05
    415a:	4c 83       	std	Y+4, r20	; 0x04

    if (Copy_pu8ReceivedData == NULL || Copy_pfNotification == NULL)
    415c:	8a 81       	ldd	r24, Y+2	; 0x02
    415e:	9b 81       	ldd	r25, Y+3	; 0x03
    4160:	00 97       	sbiw	r24, 0x00	; 0
    4162:	21 f0       	breq	.+8      	; 0x416c <SPI_u8TransceiveAsync+0x28>
    4164:	8c 81       	ldd	r24, Y+4	; 0x04
    4166:	9d 81       	ldd	r25, Y+5	; 0x05
    4168:	00 97       	sbiw	r24, 0x00	; 0
    416a:	19 f4       	brne	.+6      	; 0x4172 <SPI_u8TransceiveAsync+0x2e>
        return NULL_POINTER;
    416c:	82 e0       	ldi	r24, 0x02	; 2
    416e:	8e 83       	std	Y+6, r24	; 0x06
    4170:	22 c0       	rjmp	.+68     	; 0x41b6 <SPI_u8TransceiveAsync+0x72>
    if (SPI_u8State == BUSY)
    4172:	80 91 9b 01 	lds	r24, 0x019B
    4176:	81 30       	cpi	r24, 0x01	; 1
    4178:	19 f4       	brne	.+6      	; 0x4180 <SPI_u8TransceiveAsync+0x3c>
        return BUSY_STATE;
    417a:	83 e0       	ldi	r24, 0x03	; 3
    417c:	8e 83       	std	Y+6, r24	; 0x06
    417e:	1b c0       	rjmp	.+54     	; 0x41b6 <SPI_u8TransceiveAsync+0x72>

    SPI_u8State = BUSY;
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	80 93 9b 01 	sts	0x019B, r24
    SPI_pfNotification = Copy_pfNotification;
    4186:	8c 81       	ldd	r24, Y+4	; 0x04
    4188:	9d 81       	ldd	r25, Y+5	; 0x05
    418a:	90 93 a1 01 	sts	0x01A1, r25
    418e:	80 93 a0 01 	sts	0x01A0, r24
    SPI_pu8ReceivedData = Copy_pu8ReceivedData;
    4192:	8a 81       	ldd	r24, Y+2	; 0x02
    4194:	9b 81       	ldd	r25, Y+3	; 0x03
    4196:	90 93 9d 01 	sts	0x019D, r25
    419a:	80 93 9c 01 	sts	0x019C, r24

    /* Enable SPI interrupt */
    SET_BIT(SPCR, SPCR_SPIE);
    419e:	ad e2       	ldi	r26, 0x2D	; 45
    41a0:	b0 e0       	ldi	r27, 0x00	; 0
    41a2:	ed e2       	ldi	r30, 0x2D	; 45
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	80 81       	ld	r24, Z
    41a8:	80 68       	ori	r24, 0x80	; 128
    41aa:	8c 93       	st	X, r24

    /* Start transmission */
    SPDR = Copy_u8Data;
    41ac:	ef e2       	ldi	r30, 0x2F	; 47
    41ae:	f0 e0       	ldi	r31, 0x00	; 0
    41b0:	89 81       	ldd	r24, Y+1	; 0x01
    41b2:	80 83       	st	Z, r24

    return OK;
    41b4:	1e 82       	std	Y+6, r1	; 0x06
    41b6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    41b8:	26 96       	adiw	r28, 0x06	; 6
    41ba:	0f b6       	in	r0, 0x3f	; 63
    41bc:	f8 94       	cli
    41be:	de bf       	out	0x3e, r29	; 62
    41c0:	0f be       	out	0x3f, r0	; 63
    41c2:	cd bf       	out	0x3d, r28	; 61
    41c4:	cf 91       	pop	r28
    41c6:	df 91       	pop	r29
    41c8:	08 95       	ret

000041ca <SPI_u8TransceiveStringAsync>:

u8 SPI_u8TransceiveStringAsync(u8 *Copy_u8Data, u8 *Copy_pu8ReceivedData,
                               u8 Copy_u8StringLength, void (*Copy_pfNotification)(void)) {
    41ca:	df 93       	push	r29
    41cc:	cf 93       	push	r28
    41ce:	cd b7       	in	r28, 0x3d	; 61
    41d0:	de b7       	in	r29, 0x3e	; 62
    41d2:	28 97       	sbiw	r28, 0x08	; 8
    41d4:	0f b6       	in	r0, 0x3f	; 63
    41d6:	f8 94       	cli
    41d8:	de bf       	out	0x3e, r29	; 62
    41da:	0f be       	out	0x3f, r0	; 63
    41dc:	cd bf       	out	0x3d, r28	; 61
    41de:	9a 83       	std	Y+2, r25	; 0x02
    41e0:	89 83       	std	Y+1, r24	; 0x01
    41e2:	7c 83       	std	Y+4, r23	; 0x04
    41e4:	6b 83       	std	Y+3, r22	; 0x03
    41e6:	4d 83       	std	Y+5, r20	; 0x05
    41e8:	3f 83       	std	Y+7, r19	; 0x07
    41ea:	2e 83       	std	Y+6, r18	; 0x06

    if (Copy_pu8ReceivedData == NULL || Copy_pfNotification == NULL)
    41ec:	8b 81       	ldd	r24, Y+3	; 0x03
    41ee:	9c 81       	ldd	r25, Y+4	; 0x04
    41f0:	00 97       	sbiw	r24, 0x00	; 0
    41f2:	21 f0       	breq	.+8      	; 0x41fc <SPI_u8TransceiveStringAsync+0x32>
    41f4:	8e 81       	ldd	r24, Y+6	; 0x06
    41f6:	9f 81       	ldd	r25, Y+7	; 0x07
    41f8:	00 97       	sbiw	r24, 0x00	; 0
    41fa:	19 f4       	brne	.+6      	; 0x4202 <SPI_u8TransceiveStringAsync+0x38>
        return NULL_POINTER;
    41fc:	82 e0       	ldi	r24, 0x02	; 2
    41fe:	88 87       	std	Y+8, r24	; 0x08
    4200:	38 c0       	rjmp	.+112    	; 0x4272 <SPI_u8TransceiveStringAsync+0xa8>
    if (SPI_u8State == BUSY)
    4202:	80 91 9b 01 	lds	r24, 0x019B
    4206:	81 30       	cpi	r24, 0x01	; 1
    4208:	19 f4       	brne	.+6      	; 0x4210 <SPI_u8TransceiveStringAsync+0x46>
        return BUSY_STATE;
    420a:	83 e0       	ldi	r24, 0x03	; 3
    420c:	88 87       	std	Y+8, r24	; 0x08
    420e:	31 c0       	rjmp	.+98     	; 0x4272 <SPI_u8TransceiveStringAsync+0xa8>

    SPI_u8State = BUSY;
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	80 93 9b 01 	sts	0x019B, r24
    SPI_pfNotification = Copy_pfNotification;
    4216:	8e 81       	ldd	r24, Y+6	; 0x06
    4218:	9f 81       	ldd	r25, Y+7	; 0x07
    421a:	90 93 a1 01 	sts	0x01A1, r25
    421e:	80 93 a0 01 	sts	0x01A0, r24
    SPI_pu8ReceivedData = Copy_pu8ReceivedData;
    4222:	8b 81       	ldd	r24, Y+3	; 0x03
    4224:	9c 81       	ldd	r25, Y+4	; 0x04
    4226:	90 93 9d 01 	sts	0x019D, r25
    422a:	80 93 9c 01 	sts	0x019C, r24
    SPI_u8StringLength = Copy_u8StringLength;
    422e:	8d 81       	ldd	r24, Y+5	; 0x05
    4230:	80 93 a2 01 	sts	0x01A2, r24
    SPI_pu8TransmittedData = Copy_u8Data;
    4234:	89 81       	ldd	r24, Y+1	; 0x01
    4236:	9a 81       	ldd	r25, Y+2	; 0x02
    4238:	90 93 9f 01 	sts	0x019F, r25
    423c:	80 93 9e 01 	sts	0x019E, r24
    SPI_u8StringIndex = 0;
    4240:	10 92 a3 01 	sts	0x01A3, r1

    /* Enable SPI interrupt */
    SET_BIT(SPCR, SPCR_SPIE);
    4244:	ad e2       	ldi	r26, 0x2D	; 45
    4246:	b0 e0       	ldi	r27, 0x00	; 0
    4248:	ed e2       	ldi	r30, 0x2D	; 45
    424a:	f0 e0       	ldi	r31, 0x00	; 0
    424c:	80 81       	ld	r24, Z
    424e:	80 68       	ori	r24, 0x80	; 128
    4250:	8c 93       	st	X, r24

    /* Start transmission */
    SPDR = SPI_pu8TransmittedData[SPI_u8StringIndex];
    4252:	af e2       	ldi	r26, 0x2F	; 47
    4254:	b0 e0       	ldi	r27, 0x00	; 0
    4256:	20 91 9e 01 	lds	r18, 0x019E
    425a:	30 91 9f 01 	lds	r19, 0x019F
    425e:	80 91 a3 01 	lds	r24, 0x01A3
    4262:	88 2f       	mov	r24, r24
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	f9 01       	movw	r30, r18
    4268:	e8 0f       	add	r30, r24
    426a:	f9 1f       	adc	r31, r25
    426c:	80 81       	ld	r24, Z
    426e:	8c 93       	st	X, r24

    return OK;
    4270:	18 86       	std	Y+8, r1	; 0x08
    4272:	88 85       	ldd	r24, Y+8	; 0x08
}
    4274:	28 96       	adiw	r28, 0x08	; 8
    4276:	0f b6       	in	r0, 0x3f	; 63
    4278:	f8 94       	cli
    427a:	de bf       	out	0x3e, r29	; 62
    427c:	0f be       	out	0x3f, r0	; 63
    427e:	cd bf       	out	0x3d, r28	; 61
    4280:	cf 91       	pop	r28
    4282:	df 91       	pop	r29
    4284:	08 95       	ret

00004286 <__vector_12>:

void __vector_12(void) __attribute__ ((signal));

void __vector_12(void) {
    4286:	1f 92       	push	r1
    4288:	0f 92       	push	r0
    428a:	0f b6       	in	r0, 0x3f	; 63
    428c:	0f 92       	push	r0
    428e:	11 24       	eor	r1, r1
    4290:	2f 93       	push	r18
    4292:	3f 93       	push	r19
    4294:	4f 93       	push	r20
    4296:	5f 93       	push	r21
    4298:	6f 93       	push	r22
    429a:	7f 93       	push	r23
    429c:	8f 93       	push	r24
    429e:	9f 93       	push	r25
    42a0:	af 93       	push	r26
    42a2:	bf 93       	push	r27
    42a4:	ef 93       	push	r30
    42a6:	ff 93       	push	r31
    42a8:	df 93       	push	r29
    42aa:	cf 93       	push	r28
    42ac:	cd b7       	in	r28, 0x3d	; 61
    42ae:	de b7       	in	r29, 0x3e	; 62

    if (SPI_u8StringLength == 0) {
    42b0:	80 91 a2 01 	lds	r24, 0x01A2
    42b4:	88 23       	and	r24, r24
    42b6:	b9 f4       	brne	.+46     	; 0x42e6 <__vector_12+0x60>

        *SPI_pu8ReceivedData = SPDR;
    42b8:	a0 91 9c 01 	lds	r26, 0x019C
    42bc:	b0 91 9d 01 	lds	r27, 0x019D
    42c0:	ef e2       	ldi	r30, 0x2F	; 47
    42c2:	f0 e0       	ldi	r31, 0x00	; 0
    42c4:	80 81       	ld	r24, Z
    42c6:	8c 93       	st	X, r24

        /* Disable SPI interrupt */
        CLR_BIT(SPCR, SPCR_SPIE);
    42c8:	ad e2       	ldi	r26, 0x2D	; 45
    42ca:	b0 e0       	ldi	r27, 0x00	; 0
    42cc:	ed e2       	ldi	r30, 0x2D	; 45
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	80 81       	ld	r24, Z
    42d2:	8f 77       	andi	r24, 0x7F	; 127
    42d4:	8c 93       	st	X, r24

        SPI_u8State = IDLE;
    42d6:	10 92 9b 01 	sts	0x019B, r1

        SPI_pfNotification();
    42da:	e0 91 a0 01 	lds	r30, 0x01A0
    42de:	f0 91 a1 01 	lds	r31, 0x01A1
    42e2:	09 95       	icall
    42e4:	41 c0       	rjmp	.+130    	; 0x4368 <__vector_12+0xe2>
    } else {

        *SPI_pu8ReceivedData = SPDR;
    42e6:	a0 91 9c 01 	lds	r26, 0x019C
    42ea:	b0 91 9d 01 	lds	r27, 0x019D
    42ee:	ef e2       	ldi	r30, 0x2F	; 47
    42f0:	f0 e0       	ldi	r31, 0x00	; 0
    42f2:	80 81       	ld	r24, Z
    42f4:	8c 93       	st	X, r24
        SPI_pu8ReceivedData++;
    42f6:	80 91 9c 01 	lds	r24, 0x019C
    42fa:	90 91 9d 01 	lds	r25, 0x019D
    42fe:	01 96       	adiw	r24, 0x01	; 1
    4300:	90 93 9d 01 	sts	0x019D, r25
    4304:	80 93 9c 01 	sts	0x019C, r24
        SPI_u8StringIndex++;
    4308:	80 91 a3 01 	lds	r24, 0x01A3
    430c:	8f 5f       	subi	r24, 0xFF	; 255
    430e:	80 93 a3 01 	sts	0x01A3, r24

        if (SPI_u8StringIndex == SPI_u8StringLength) {
    4312:	90 91 a3 01 	lds	r25, 0x01A3
    4316:	80 91 a2 01 	lds	r24, 0x01A2
    431a:	98 17       	cp	r25, r24
    431c:	b1 f4       	brne	.+44     	; 0x434a <__vector_12+0xc4>

            *SPI_pu8ReceivedData = '\0';
    431e:	e0 91 9c 01 	lds	r30, 0x019C
    4322:	f0 91 9d 01 	lds	r31, 0x019D
    4326:	10 82       	st	Z, r1

            SPI_u8StringLength = 0;
    4328:	10 92 a2 01 	sts	0x01A2, r1

            SPI_u8State = IDLE;
    432c:	10 92 9b 01 	sts	0x019B, r1

            /* Disable SPI interrupt */
            CLR_BIT(SPCR, SPCR_SPIE);
    4330:	ad e2       	ldi	r26, 0x2D	; 45
    4332:	b0 e0       	ldi	r27, 0x00	; 0
    4334:	ed e2       	ldi	r30, 0x2D	; 45
    4336:	f0 e0       	ldi	r31, 0x00	; 0
    4338:	80 81       	ld	r24, Z
    433a:	8f 77       	andi	r24, 0x7F	; 127
    433c:	8c 93       	st	X, r24

            SPI_pfNotification();
    433e:	e0 91 a0 01 	lds	r30, 0x01A0
    4342:	f0 91 a1 01 	lds	r31, 0x01A1
    4346:	09 95       	icall
    4348:	0f c0       	rjmp	.+30     	; 0x4368 <__vector_12+0xe2>

        } else {
            SPDR = SPI_pu8TransmittedData[SPI_u8StringIndex];
    434a:	af e2       	ldi	r26, 0x2F	; 47
    434c:	b0 e0       	ldi	r27, 0x00	; 0
    434e:	20 91 9e 01 	lds	r18, 0x019E
    4352:	30 91 9f 01 	lds	r19, 0x019F
    4356:	80 91 a3 01 	lds	r24, 0x01A3
    435a:	88 2f       	mov	r24, r24
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	f9 01       	movw	r30, r18
    4360:	e8 0f       	add	r30, r24
    4362:	f9 1f       	adc	r31, r25
    4364:	80 81       	ld	r24, Z
    4366:	8c 93       	st	X, r24
        }

    }
}
    4368:	cf 91       	pop	r28
    436a:	df 91       	pop	r29
    436c:	ff 91       	pop	r31
    436e:	ef 91       	pop	r30
    4370:	bf 91       	pop	r27
    4372:	af 91       	pop	r26
    4374:	9f 91       	pop	r25
    4376:	8f 91       	pop	r24
    4378:	7f 91       	pop	r23
    437a:	6f 91       	pop	r22
    437c:	5f 91       	pop	r21
    437e:	4f 91       	pop	r20
    4380:	3f 91       	pop	r19
    4382:	2f 91       	pop	r18
    4384:	0f 90       	pop	r0
    4386:	0f be       	out	0x3f, r0	; 63
    4388:	0f 90       	pop	r0
    438a:	1f 90       	pop	r1
    438c:	18 95       	reti

0000438e <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
    438e:	df 93       	push	r29
    4390:	cf 93       	push	r28
    4392:	cd b7       	in	r28, 0x3d	; 61
    4394:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR;
    4396:	ea e3       	ldi	r30, 0x3A	; 58
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	8f e1       	ldi	r24, 0x1F	; 31
    439c:	80 83       	st	Z, r24
    DDRB = PORTB_DIR;
    439e:	e7 e3       	ldi	r30, 0x37	; 55
    43a0:	f0 e0       	ldi	r31, 0x00	; 0
    43a2:	80 e4       	ldi	r24, 0x40	; 64
    43a4:	80 83       	st	Z, r24
    DDRC = PORTC_DIR;
    43a6:	e4 e3       	ldi	r30, 0x34	; 52
    43a8:	f0 e0       	ldi	r31, 0x00	; 0
    43aa:	8f ef       	ldi	r24, 0xFF	; 255
    43ac:	80 83       	st	Z, r24
    DDRD = PORTD_DIR;
    43ae:	e1 e3       	ldi	r30, 0x31	; 49
    43b0:	f0 e0       	ldi	r31, 0x00	; 0
    43b2:	83 e8       	ldi	r24, 0x83	; 131
    43b4:	80 83       	st	Z, r24

    PORTA = PORTA_INIT_VALUE;
    43b6:	eb e3       	ldi	r30, 0x3B	; 59
    43b8:	f0 e0       	ldi	r31, 0x00	; 0
    43ba:	8f e0       	ldi	r24, 0x0F	; 15
    43bc:	80 83       	st	Z, r24
    PORTB = PORTB_INIT_VALUE;
    43be:	e8 e3       	ldi	r30, 0x38	; 56
    43c0:	f0 e0       	ldi	r31, 0x00	; 0
    43c2:	10 82       	st	Z, r1
    PORTC = PORTC_INIT_VALUE;
    43c4:	e5 e3       	ldi	r30, 0x35	; 53
    43c6:	f0 e0       	ldi	r31, 0x00	; 0
    43c8:	10 82       	st	Z, r1
    PORTD = PORTD_INIT_VALUE;
    43ca:	e2 e3       	ldi	r30, 0x32	; 50
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	10 82       	st	Z, r1
}
    43d0:	cf 91       	pop	r28
    43d2:	df 91       	pop	r29
    43d4:	08 95       	ret

000043d6 <GIE_voidEnable>:
#include "GIE_config.h"
#include "GIE_private.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable() {
    43d6:	df 93       	push	r29
    43d8:	cf 93       	push	r28
    43da:	cd b7       	in	r28, 0x3d	; 61
    43dc:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, SREG_I);
    43de:	af e5       	ldi	r26, 0x5F	; 95
    43e0:	b0 e0       	ldi	r27, 0x00	; 0
    43e2:	ef e5       	ldi	r30, 0x5F	; 95
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	80 81       	ld	r24, Z
    43e8:	80 68       	ori	r24, 0x80	; 128
    43ea:	8c 93       	st	X, r24
}
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	08 95       	ret

000043f2 <GIE_voidDisable>:

void GIE_voidDisable() {
    43f2:	df 93       	push	r29
    43f4:	cf 93       	push	r28
    43f6:	cd b7       	in	r28, 0x3d	; 61
    43f8:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG, SREG_I);
    43fa:	af e5       	ldi	r26, 0x5F	; 95
    43fc:	b0 e0       	ldi	r27, 0x00	; 0
    43fe:	ef e5       	ldi	r30, 0x5F	; 95
    4400:	f0 e0       	ldi	r31, 0x00	; 0
    4402:	80 81       	ld	r24, Z
    4404:	8f 77       	andi	r24, 0x7F	; 127
    4406:	8c 93       	st	X, r24
}
    4408:	cf 91       	pop	r28
    440a:	df 91       	pop	r29
    440c:	08 95       	ret

0000440e <EXTI_u8Checker>:
#include "EXTI_private.h"
#include "EXTI_register.h"

static void (* EXTI_AfPtr[3])(void) = {NULL};

static u8 EXTI_u8Checker(u8 Copy_u8EXTIIndex, u8 Copy_u8EdgeIndex) {
    440e:	df 93       	push	r29
    4410:	cf 93       	push	r28
    4412:	00 d0       	rcall	.+0      	; 0x4414 <EXTI_u8Checker+0x6>
    4414:	00 d0       	rcall	.+0      	; 0x4416 <EXTI_u8Checker+0x8>
    4416:	cd b7       	in	r28, 0x3d	; 61
    4418:	de b7       	in	r29, 0x3e	; 62
    441a:	89 83       	std	Y+1, r24	; 0x01
    441c:	6a 83       	std	Y+2, r22	; 0x02
    return (Copy_u8EXTIIndex < 3) && (Copy_u8EdgeIndex < 4);
    441e:	89 81       	ldd	r24, Y+1	; 0x01
    4420:	83 30       	cpi	r24, 0x03	; 3
    4422:	40 f4       	brcc	.+16     	; 0x4434 <EXTI_u8Checker+0x26>
    4424:	8a 81       	ldd	r24, Y+2	; 0x02
    4426:	84 30       	cpi	r24, 0x04	; 4
    4428:	28 f4       	brcc	.+10     	; 0x4434 <EXTI_u8Checker+0x26>
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	9c 83       	std	Y+4, r25	; 0x04
    4430:	8b 83       	std	Y+3, r24	; 0x03
    4432:	02 c0       	rjmp	.+4      	; 0x4438 <EXTI_u8Checker+0x2a>
    4434:	1c 82       	std	Y+4, r1	; 0x04
    4436:	1b 82       	std	Y+3, r1	; 0x03
    4438:	8b 81       	ldd	r24, Y+3	; 0x03
}
    443a:	0f 90       	pop	r0
    443c:	0f 90       	pop	r0
    443e:	0f 90       	pop	r0
    4440:	0f 90       	pop	r0
    4442:	cf 91       	pop	r28
    4444:	df 91       	pop	r29
    4446:	08 95       	ret

00004448 <EXTI_u8EXTIEnable>:

u8 EXTI_u8EXTIEnable(u8 Copy_u8EXTIIndex, u8 Copy_u8EdgeIndex) {
    4448:	df 93       	push	r29
    444a:	cf 93       	push	r28
    444c:	cd b7       	in	r28, 0x3d	; 61
    444e:	de b7       	in	r29, 0x3e	; 62
    4450:	2b 97       	sbiw	r28, 0x0b	; 11
    4452:	0f b6       	in	r0, 0x3f	; 63
    4454:	f8 94       	cli
    4456:	de bf       	out	0x3e, r29	; 62
    4458:	0f be       	out	0x3f, r0	; 63
    445a:	cd bf       	out	0x3d, r28	; 61
    445c:	8a 83       	std	Y+2, r24	; 0x02
    445e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = OK;
    4460:	19 82       	std	Y+1, r1	; 0x01
    if (EXTI_u8Checker(Copy_u8EXTIIndex, Copy_u8EdgeIndex)) {
    4462:	8a 81       	ldd	r24, Y+2	; 0x02
    4464:	6b 81       	ldd	r22, Y+3	; 0x03
    4466:	0e 94 07 22 	call	0x440e	; 0x440e <EXTI_u8Checker>
    446a:	88 23       	and	r24, r24
    446c:	09 f4       	brne	.+2      	; 0x4470 <EXTI_u8EXTIEnable+0x28>
    446e:	00 c1       	rjmp	.+512    	; 0x4670 <EXTI_u8EXTIEnable+0x228>
        switch (Copy_u8EXTIIndex) {
    4470:	8a 81       	ldd	r24, Y+2	; 0x02
    4472:	28 2f       	mov	r18, r24
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	3b 87       	std	Y+11, r19	; 0x0b
    4478:	2a 87       	std	Y+10, r18	; 0x0a
    447a:	8a 85       	ldd	r24, Y+10	; 0x0a
    447c:	9b 85       	ldd	r25, Y+11	; 0x0b
    447e:	81 30       	cpi	r24, 0x01	; 1
    4480:	91 05       	cpc	r25, r1
    4482:	09 f4       	brne	.+2      	; 0x4486 <EXTI_u8EXTIEnable+0x3e>
    4484:	6c c0       	rjmp	.+216    	; 0x455e <EXTI_u8EXTIEnable+0x116>
    4486:	2a 85       	ldd	r18, Y+10	; 0x0a
    4488:	3b 85       	ldd	r19, Y+11	; 0x0b
    448a:	22 30       	cpi	r18, 0x02	; 2
    448c:	31 05       	cpc	r19, r1
    448e:	09 f4       	brne	.+2      	; 0x4492 <EXTI_u8EXTIEnable+0x4a>
    4490:	c7 c0       	rjmp	.+398    	; 0x4620 <EXTI_u8EXTIEnable+0x1d8>
    4492:	8a 85       	ldd	r24, Y+10	; 0x0a
    4494:	9b 85       	ldd	r25, Y+11	; 0x0b
    4496:	00 97       	sbiw	r24, 0x00	; 0
    4498:	09 f0       	breq	.+2      	; 0x449c <EXTI_u8EXTIEnable+0x54>
    449a:	ec c0       	rjmp	.+472    	; 0x4674 <EXTI_u8EXTIEnable+0x22c>
            case EXTI_INT0:
                switch (Copy_u8EdgeIndex) {
    449c:	8b 81       	ldd	r24, Y+3	; 0x03
    449e:	28 2f       	mov	r18, r24
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	39 87       	std	Y+9, r19	; 0x09
    44a4:	28 87       	std	Y+8, r18	; 0x08
    44a6:	88 85       	ldd	r24, Y+8	; 0x08
    44a8:	99 85       	ldd	r25, Y+9	; 0x09
    44aa:	81 30       	cpi	r24, 0x01	; 1
    44ac:	91 05       	cpc	r25, r1
    44ae:	91 f1       	breq	.+100    	; 0x4514 <EXTI_u8EXTIEnable+0xcc>
    44b0:	28 85       	ldd	r18, Y+8	; 0x08
    44b2:	39 85       	ldd	r19, Y+9	; 0x09
    44b4:	22 30       	cpi	r18, 0x02	; 2
    44b6:	31 05       	cpc	r19, r1
    44b8:	2c f4       	brge	.+10     	; 0x44c4 <EXTI_u8EXTIEnable+0x7c>
    44ba:	88 85       	ldd	r24, Y+8	; 0x08
    44bc:	99 85       	ldd	r25, Y+9	; 0x09
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	c1 f1       	breq	.+112    	; 0x4532 <EXTI_u8EXTIEnable+0xea>
    44c2:	45 c0       	rjmp	.+138    	; 0x454e <EXTI_u8EXTIEnable+0x106>
    44c4:	28 85       	ldd	r18, Y+8	; 0x08
    44c6:	39 85       	ldd	r19, Y+9	; 0x09
    44c8:	22 30       	cpi	r18, 0x02	; 2
    44ca:	31 05       	cpc	r19, r1
    44cc:	a1 f0       	breq	.+40     	; 0x44f6 <EXTI_u8EXTIEnable+0xae>
    44ce:	88 85       	ldd	r24, Y+8	; 0x08
    44d0:	99 85       	ldd	r25, Y+9	; 0x09
    44d2:	83 30       	cpi	r24, 0x03	; 3
    44d4:	91 05       	cpc	r25, r1
    44d6:	d9 f5       	brne	.+118    	; 0x454e <EXTI_u8EXTIEnable+0x106>
                    case EXTI_LOW_LEVEL:
                        CLR_BIT(MCUCR, MCUCR_ISC00);
    44d8:	a5 e5       	ldi	r26, 0x55	; 85
    44da:	b0 e0       	ldi	r27, 0x00	; 0
    44dc:	e5 e5       	ldi	r30, 0x55	; 85
    44de:	f0 e0       	ldi	r31, 0x00	; 0
    44e0:	80 81       	ld	r24, Z
    44e2:	8e 7f       	andi	r24, 0xFE	; 254
    44e4:	8c 93       	st	X, r24
                        CLR_BIT(MCUCR, MCUCR_ISC01);
    44e6:	a5 e5       	ldi	r26, 0x55	; 85
    44e8:	b0 e0       	ldi	r27, 0x00	; 0
    44ea:	e5 e5       	ldi	r30, 0x55	; 85
    44ec:	f0 e0       	ldi	r31, 0x00	; 0
    44ee:	80 81       	ld	r24, Z
    44f0:	8d 7f       	andi	r24, 0xFD	; 253
    44f2:	8c 93       	st	X, r24
    44f4:	2c c0       	rjmp	.+88     	; 0x454e <EXTI_u8EXTIEnable+0x106>
                        break;
                    case EXTI_ON_CHANGE:
                        SET_BIT(MCUCR, MCUCR_ISC00);
    44f6:	a5 e5       	ldi	r26, 0x55	; 85
    44f8:	b0 e0       	ldi	r27, 0x00	; 0
    44fa:	e5 e5       	ldi	r30, 0x55	; 85
    44fc:	f0 e0       	ldi	r31, 0x00	; 0
    44fe:	80 81       	ld	r24, Z
    4500:	81 60       	ori	r24, 0x01	; 1
    4502:	8c 93       	st	X, r24
                        CLR_BIT(MCUCR, MCUCR_ISC01);
    4504:	a5 e5       	ldi	r26, 0x55	; 85
    4506:	b0 e0       	ldi	r27, 0x00	; 0
    4508:	e5 e5       	ldi	r30, 0x55	; 85
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	80 81       	ld	r24, Z
    450e:	8d 7f       	andi	r24, 0xFD	; 253
    4510:	8c 93       	st	X, r24
    4512:	1d c0       	rjmp	.+58     	; 0x454e <EXTI_u8EXTIEnable+0x106>
                        break;
                    case EXTI_FALLING_EDGE:
                        CLR_BIT(MCUCR, MCUCR_ISC00);
    4514:	a5 e5       	ldi	r26, 0x55	; 85
    4516:	b0 e0       	ldi	r27, 0x00	; 0
    4518:	e5 e5       	ldi	r30, 0x55	; 85
    451a:	f0 e0       	ldi	r31, 0x00	; 0
    451c:	80 81       	ld	r24, Z
    451e:	8e 7f       	andi	r24, 0xFE	; 254
    4520:	8c 93       	st	X, r24
                        SET_BIT(MCUCR, MCUCR_ISC01);
    4522:	a5 e5       	ldi	r26, 0x55	; 85
    4524:	b0 e0       	ldi	r27, 0x00	; 0
    4526:	e5 e5       	ldi	r30, 0x55	; 85
    4528:	f0 e0       	ldi	r31, 0x00	; 0
    452a:	80 81       	ld	r24, Z
    452c:	82 60       	ori	r24, 0x02	; 2
    452e:	8c 93       	st	X, r24
    4530:	0e c0       	rjmp	.+28     	; 0x454e <EXTI_u8EXTIEnable+0x106>
                        break;
                    case EXTI_RISING_EDGE:
                        SET_BIT(MCUCR, MCUCR_ISC00);
    4532:	a5 e5       	ldi	r26, 0x55	; 85
    4534:	b0 e0       	ldi	r27, 0x00	; 0
    4536:	e5 e5       	ldi	r30, 0x55	; 85
    4538:	f0 e0       	ldi	r31, 0x00	; 0
    453a:	80 81       	ld	r24, Z
    453c:	81 60       	ori	r24, 0x01	; 1
    453e:	8c 93       	st	X, r24
                        SET_BIT(MCUCR, MCUCR_ISC01);
    4540:	a5 e5       	ldi	r26, 0x55	; 85
    4542:	b0 e0       	ldi	r27, 0x00	; 0
    4544:	e5 e5       	ldi	r30, 0x55	; 85
    4546:	f0 e0       	ldi	r31, 0x00	; 0
    4548:	80 81       	ld	r24, Z
    454a:	82 60       	ori	r24, 0x02	; 2
    454c:	8c 93       	st	X, r24
                        break;
                }
                /* Enable INT0 */
                SET_BIT(GICR, GICR_INT0);
    454e:	ab e5       	ldi	r26, 0x5B	; 91
    4550:	b0 e0       	ldi	r27, 0x00	; 0
    4552:	eb e5       	ldi	r30, 0x5B	; 91
    4554:	f0 e0       	ldi	r31, 0x00	; 0
    4556:	80 81       	ld	r24, Z
    4558:	80 64       	ori	r24, 0x40	; 64
    455a:	8c 93       	st	X, r24
    455c:	8b c0       	rjmp	.+278    	; 0x4674 <EXTI_u8EXTIEnable+0x22c>
                break;
            case EXTI_INT1:
                switch (Copy_u8EdgeIndex) {
    455e:	8b 81       	ldd	r24, Y+3	; 0x03
    4560:	28 2f       	mov	r18, r24
    4562:	30 e0       	ldi	r19, 0x00	; 0
    4564:	3f 83       	std	Y+7, r19	; 0x07
    4566:	2e 83       	std	Y+6, r18	; 0x06
    4568:	8e 81       	ldd	r24, Y+6	; 0x06
    456a:	9f 81       	ldd	r25, Y+7	; 0x07
    456c:	81 30       	cpi	r24, 0x01	; 1
    456e:	91 05       	cpc	r25, r1
    4570:	91 f1       	breq	.+100    	; 0x45d6 <EXTI_u8EXTIEnable+0x18e>
    4572:	2e 81       	ldd	r18, Y+6	; 0x06
    4574:	3f 81       	ldd	r19, Y+7	; 0x07
    4576:	22 30       	cpi	r18, 0x02	; 2
    4578:	31 05       	cpc	r19, r1
    457a:	2c f4       	brge	.+10     	; 0x4586 <EXTI_u8EXTIEnable+0x13e>
    457c:	8e 81       	ldd	r24, Y+6	; 0x06
    457e:	9f 81       	ldd	r25, Y+7	; 0x07
    4580:	00 97       	sbiw	r24, 0x00	; 0
    4582:	c1 f1       	breq	.+112    	; 0x45f4 <EXTI_u8EXTIEnable+0x1ac>
    4584:	45 c0       	rjmp	.+138    	; 0x4610 <EXTI_u8EXTIEnable+0x1c8>
    4586:	2e 81       	ldd	r18, Y+6	; 0x06
    4588:	3f 81       	ldd	r19, Y+7	; 0x07
    458a:	22 30       	cpi	r18, 0x02	; 2
    458c:	31 05       	cpc	r19, r1
    458e:	a1 f0       	breq	.+40     	; 0x45b8 <EXTI_u8EXTIEnable+0x170>
    4590:	8e 81       	ldd	r24, Y+6	; 0x06
    4592:	9f 81       	ldd	r25, Y+7	; 0x07
    4594:	83 30       	cpi	r24, 0x03	; 3
    4596:	91 05       	cpc	r25, r1
    4598:	d9 f5       	brne	.+118    	; 0x4610 <EXTI_u8EXTIEnable+0x1c8>
                    case EXTI_LOW_LEVEL:
                        CLR_BIT(MCUCR, MCUCR_ISC10);
    459a:	a5 e5       	ldi	r26, 0x55	; 85
    459c:	b0 e0       	ldi	r27, 0x00	; 0
    459e:	e5 e5       	ldi	r30, 0x55	; 85
    45a0:	f0 e0       	ldi	r31, 0x00	; 0
    45a2:	80 81       	ld	r24, Z
    45a4:	8b 7f       	andi	r24, 0xFB	; 251
    45a6:	8c 93       	st	X, r24
                        CLR_BIT(MCUCR, MCUCR_ISC11);
    45a8:	a5 e5       	ldi	r26, 0x55	; 85
    45aa:	b0 e0       	ldi	r27, 0x00	; 0
    45ac:	e5 e5       	ldi	r30, 0x55	; 85
    45ae:	f0 e0       	ldi	r31, 0x00	; 0
    45b0:	80 81       	ld	r24, Z
    45b2:	87 7f       	andi	r24, 0xF7	; 247
    45b4:	8c 93       	st	X, r24
    45b6:	2c c0       	rjmp	.+88     	; 0x4610 <EXTI_u8EXTIEnable+0x1c8>
                        break;
                    case EXTI_ON_CHANGE:
                        SET_BIT(MCUCR, MCUCR_ISC10);
    45b8:	a5 e5       	ldi	r26, 0x55	; 85
    45ba:	b0 e0       	ldi	r27, 0x00	; 0
    45bc:	e5 e5       	ldi	r30, 0x55	; 85
    45be:	f0 e0       	ldi	r31, 0x00	; 0
    45c0:	80 81       	ld	r24, Z
    45c2:	84 60       	ori	r24, 0x04	; 4
    45c4:	8c 93       	st	X, r24
                        CLR_BIT(MCUCR, MCUCR_ISC11);
    45c6:	a5 e5       	ldi	r26, 0x55	; 85
    45c8:	b0 e0       	ldi	r27, 0x00	; 0
    45ca:	e5 e5       	ldi	r30, 0x55	; 85
    45cc:	f0 e0       	ldi	r31, 0x00	; 0
    45ce:	80 81       	ld	r24, Z
    45d0:	87 7f       	andi	r24, 0xF7	; 247
    45d2:	8c 93       	st	X, r24
    45d4:	1d c0       	rjmp	.+58     	; 0x4610 <EXTI_u8EXTIEnable+0x1c8>
                        break;
                    case EXTI_FALLING_EDGE:
                        CLR_BIT(MCUCR, MCUCR_ISC10);
    45d6:	a5 e5       	ldi	r26, 0x55	; 85
    45d8:	b0 e0       	ldi	r27, 0x00	; 0
    45da:	e5 e5       	ldi	r30, 0x55	; 85
    45dc:	f0 e0       	ldi	r31, 0x00	; 0
    45de:	80 81       	ld	r24, Z
    45e0:	8b 7f       	andi	r24, 0xFB	; 251
    45e2:	8c 93       	st	X, r24
                        SET_BIT(MCUCR, MCUCR_ISC11);
    45e4:	a5 e5       	ldi	r26, 0x55	; 85
    45e6:	b0 e0       	ldi	r27, 0x00	; 0
    45e8:	e5 e5       	ldi	r30, 0x55	; 85
    45ea:	f0 e0       	ldi	r31, 0x00	; 0
    45ec:	80 81       	ld	r24, Z
    45ee:	88 60       	ori	r24, 0x08	; 8
    45f0:	8c 93       	st	X, r24
    45f2:	0e c0       	rjmp	.+28     	; 0x4610 <EXTI_u8EXTIEnable+0x1c8>
                        break;
                    case EXTI_RISING_EDGE:
                        SET_BIT(MCUCR, MCUCR_ISC10);
    45f4:	a5 e5       	ldi	r26, 0x55	; 85
    45f6:	b0 e0       	ldi	r27, 0x00	; 0
    45f8:	e5 e5       	ldi	r30, 0x55	; 85
    45fa:	f0 e0       	ldi	r31, 0x00	; 0
    45fc:	80 81       	ld	r24, Z
    45fe:	84 60       	ori	r24, 0x04	; 4
    4600:	8c 93       	st	X, r24
                        SET_BIT(MCUCR, MCUCR_ISC11);
    4602:	a5 e5       	ldi	r26, 0x55	; 85
    4604:	b0 e0       	ldi	r27, 0x00	; 0
    4606:	e5 e5       	ldi	r30, 0x55	; 85
    4608:	f0 e0       	ldi	r31, 0x00	; 0
    460a:	80 81       	ld	r24, Z
    460c:	88 60       	ori	r24, 0x08	; 8
    460e:	8c 93       	st	X, r24
                        break;
                }
                /* Enable INT1 */
                SET_BIT(GICR, GICR_INT1);
    4610:	ab e5       	ldi	r26, 0x5B	; 91
    4612:	b0 e0       	ldi	r27, 0x00	; 0
    4614:	eb e5       	ldi	r30, 0x5B	; 91
    4616:	f0 e0       	ldi	r31, 0x00	; 0
    4618:	80 81       	ld	r24, Z
    461a:	80 68       	ori	r24, 0x80	; 128
    461c:	8c 93       	st	X, r24
    461e:	2a c0       	rjmp	.+84     	; 0x4674 <EXTI_u8EXTIEnable+0x22c>
                break;
            case EXTI_INT2:
                switch (Copy_u8EdgeIndex) {
    4620:	8b 81       	ldd	r24, Y+3	; 0x03
    4622:	28 2f       	mov	r18, r24
    4624:	30 e0       	ldi	r19, 0x00	; 0
    4626:	3d 83       	std	Y+5, r19	; 0x05
    4628:	2c 83       	std	Y+4, r18	; 0x04
    462a:	8c 81       	ldd	r24, Y+4	; 0x04
    462c:	9d 81       	ldd	r25, Y+5	; 0x05
    462e:	00 97       	sbiw	r24, 0x00	; 0
    4630:	69 f0       	breq	.+26     	; 0x464c <EXTI_u8EXTIEnable+0x204>
    4632:	2c 81       	ldd	r18, Y+4	; 0x04
    4634:	3d 81       	ldd	r19, Y+5	; 0x05
    4636:	21 30       	cpi	r18, 0x01	; 1
    4638:	31 05       	cpc	r19, r1
    463a:	81 f4       	brne	.+32     	; 0x465c <EXTI_u8EXTIEnable+0x214>
                    case EXTI_FALLING_EDGE:
                        CLR_BIT(MCUCSR, MCUCSR_ISC2);
    463c:	a4 e5       	ldi	r26, 0x54	; 84
    463e:	b0 e0       	ldi	r27, 0x00	; 0
    4640:	e4 e5       	ldi	r30, 0x54	; 84
    4642:	f0 e0       	ldi	r31, 0x00	; 0
    4644:	80 81       	ld	r24, Z
    4646:	8f 7b       	andi	r24, 0xBF	; 191
    4648:	8c 93       	st	X, r24
    464a:	0a c0       	rjmp	.+20     	; 0x4660 <EXTI_u8EXTIEnable+0x218>
                        break;
                    case EXTI_RISING_EDGE:
                        SET_BIT(MCUCSR, MCUCSR_ISC2);
    464c:	a4 e5       	ldi	r26, 0x54	; 84
    464e:	b0 e0       	ldi	r27, 0x00	; 0
    4650:	e4 e5       	ldi	r30, 0x54	; 84
    4652:	f0 e0       	ldi	r31, 0x00	; 0
    4654:	80 81       	ld	r24, Z
    4656:	80 64       	ori	r24, 0x40	; 64
    4658:	8c 93       	st	X, r24
    465a:	02 c0       	rjmp	.+4      	; 0x4660 <EXTI_u8EXTIEnable+0x218>
                        break;
                    default:
                        Local_u8ErrorState = NOT_OK;
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	89 83       	std	Y+1, r24	; 0x01
                }
                /* Enable INT2 */
                SET_BIT(GICR, GICR_INT2);
    4660:	ab e5       	ldi	r26, 0x5B	; 91
    4662:	b0 e0       	ldi	r27, 0x00	; 0
    4664:	eb e5       	ldi	r30, 0x5B	; 91
    4666:	f0 e0       	ldi	r31, 0x00	; 0
    4668:	80 81       	ld	r24, Z
    466a:	80 62       	ori	r24, 0x20	; 32
    466c:	8c 93       	st	X, r24
    466e:	02 c0       	rjmp	.+4      	; 0x4674 <EXTI_u8EXTIEnable+0x22c>
                break;
        }
    } else {
        Local_u8ErrorState = NOT_OK;
    4670:	81 e0       	ldi	r24, 0x01	; 1
    4672:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
    4674:	89 81       	ldd	r24, Y+1	; 0x01
}
    4676:	2b 96       	adiw	r28, 0x0b	; 11
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	f8 94       	cli
    467c:	de bf       	out	0x3e, r29	; 62
    467e:	0f be       	out	0x3f, r0	; 63
    4680:	cd bf       	out	0x3d, r28	; 61
    4682:	cf 91       	pop	r28
    4684:	df 91       	pop	r29
    4686:	08 95       	ret

00004688 <EXTI_u8EXTIDisable>:

u8 EXTI_u8EXTIDisable(u8 Copy_u8EXTIIndex) {
    4688:	df 93       	push	r29
    468a:	cf 93       	push	r28
    468c:	00 d0       	rcall	.+0      	; 0x468e <EXTI_u8EXTIDisable+0x6>
    468e:	00 d0       	rcall	.+0      	; 0x4690 <EXTI_u8EXTIDisable+0x8>
    4690:	cd b7       	in	r28, 0x3d	; 61
    4692:	de b7       	in	r29, 0x3e	; 62
    4694:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = OK;
    4696:	19 82       	std	Y+1, r1	; 0x01
    if (EXTI_u8Checker(Copy_u8EXTIIndex, 0)) {
    4698:	8a 81       	ldd	r24, Y+2	; 0x02
    469a:	60 e0       	ldi	r22, 0x00	; 0
    469c:	0e 94 07 22 	call	0x440e	; 0x440e <EXTI_u8Checker>
    46a0:	88 23       	and	r24, r24
    46a2:	59 f1       	breq	.+86     	; 0x46fa <EXTI_u8EXTIDisable+0x72>
        switch (Copy_u8EXTIIndex) {
    46a4:	8a 81       	ldd	r24, Y+2	; 0x02
    46a6:	28 2f       	mov	r18, r24
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	3c 83       	std	Y+4, r19	; 0x04
    46ac:	2b 83       	std	Y+3, r18	; 0x03
    46ae:	8b 81       	ldd	r24, Y+3	; 0x03
    46b0:	9c 81       	ldd	r25, Y+4	; 0x04
    46b2:	81 30       	cpi	r24, 0x01	; 1
    46b4:	91 05       	cpc	r25, r1
    46b6:	89 f0       	breq	.+34     	; 0x46da <EXTI_u8EXTIDisable+0x52>
    46b8:	2b 81       	ldd	r18, Y+3	; 0x03
    46ba:	3c 81       	ldd	r19, Y+4	; 0x04
    46bc:	22 30       	cpi	r18, 0x02	; 2
    46be:	31 05       	cpc	r19, r1
    46c0:	a1 f0       	breq	.+40     	; 0x46ea <EXTI_u8EXTIDisable+0x62>
    46c2:	8b 81       	ldd	r24, Y+3	; 0x03
    46c4:	9c 81       	ldd	r25, Y+4	; 0x04
    46c6:	00 97       	sbiw	r24, 0x00	; 0
    46c8:	d1 f4       	brne	.+52     	; 0x46fe <EXTI_u8EXTIDisable+0x76>
            case EXTI_INT0:
                CLR_BIT(GICR, GICR_INT0);
    46ca:	ab e5       	ldi	r26, 0x5B	; 91
    46cc:	b0 e0       	ldi	r27, 0x00	; 0
    46ce:	eb e5       	ldi	r30, 0x5B	; 91
    46d0:	f0 e0       	ldi	r31, 0x00	; 0
    46d2:	80 81       	ld	r24, Z
    46d4:	8f 7b       	andi	r24, 0xBF	; 191
    46d6:	8c 93       	st	X, r24
    46d8:	12 c0       	rjmp	.+36     	; 0x46fe <EXTI_u8EXTIDisable+0x76>
                break;
            case EXTI_INT1:
                CLR_BIT(GICR, GICR_INT1);
    46da:	ab e5       	ldi	r26, 0x5B	; 91
    46dc:	b0 e0       	ldi	r27, 0x00	; 0
    46de:	eb e5       	ldi	r30, 0x5B	; 91
    46e0:	f0 e0       	ldi	r31, 0x00	; 0
    46e2:	80 81       	ld	r24, Z
    46e4:	8f 77       	andi	r24, 0x7F	; 127
    46e6:	8c 93       	st	X, r24
    46e8:	0a c0       	rjmp	.+20     	; 0x46fe <EXTI_u8EXTIDisable+0x76>
                break;
            case EXTI_INT2:
                CLR_BIT(GICR, GICR_INT2);
    46ea:	ab e5       	ldi	r26, 0x5B	; 91
    46ec:	b0 e0       	ldi	r27, 0x00	; 0
    46ee:	eb e5       	ldi	r30, 0x5B	; 91
    46f0:	f0 e0       	ldi	r31, 0x00	; 0
    46f2:	80 81       	ld	r24, Z
    46f4:	8f 7d       	andi	r24, 0xDF	; 223
    46f6:	8c 93       	st	X, r24
    46f8:	02 c0       	rjmp	.+4      	; 0x46fe <EXTI_u8EXTIDisable+0x76>
                break;
        }
    } else {
        Local_u8ErrorState = NOT_OK;
    46fa:	81 e0       	ldi	r24, 0x01	; 1
    46fc:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
    46fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    4700:	0f 90       	pop	r0
    4702:	0f 90       	pop	r0
    4704:	0f 90       	pop	r0
    4706:	0f 90       	pop	r0
    4708:	cf 91       	pop	r28
    470a:	df 91       	pop	r29
    470c:	08 95       	ret

0000470e <EXTI_u8SetSenceControl>:


u8 EXTI_u8SetSenceControl(u8 Copy_u8EXTIIndex, u8 Copy_u8EdgeIndex) {
    470e:	df 93       	push	r29
    4710:	cf 93       	push	r28
    4712:	cd b7       	in	r28, 0x3d	; 61
    4714:	de b7       	in	r29, 0x3e	; 62
    4716:	2b 97       	sbiw	r28, 0x0b	; 11
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	f8 94       	cli
    471c:	de bf       	out	0x3e, r29	; 62
    471e:	0f be       	out	0x3f, r0	; 63
    4720:	cd bf       	out	0x3d, r28	; 61
    4722:	8a 83       	std	Y+2, r24	; 0x02
    4724:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = OK;
    4726:	19 82       	std	Y+1, r1	; 0x01
    if (EXTI_u8Checker(Copy_u8EXTIIndex, Copy_u8EdgeIndex)) {
    4728:	8a 81       	ldd	r24, Y+2	; 0x02
    472a:	6b 81       	ldd	r22, Y+3	; 0x03
    472c:	0e 94 07 22 	call	0x440e	; 0x440e <EXTI_u8Checker>
    4730:	88 23       	and	r24, r24
    4732:	09 f4       	brne	.+2      	; 0x4736 <EXTI_u8SetSenceControl+0x28>
    4734:	ed c0       	rjmp	.+474    	; 0x4910 <EXTI_u8SetSenceControl+0x202>
        switch (Copy_u8EXTIIndex) {
    4736:	8a 81       	ldd	r24, Y+2	; 0x02
    4738:	28 2f       	mov	r18, r24
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	3b 87       	std	Y+11, r19	; 0x0b
    473e:	2a 87       	std	Y+10, r18	; 0x0a
    4740:	8a 85       	ldd	r24, Y+10	; 0x0a
    4742:	9b 85       	ldd	r25, Y+11	; 0x0b
    4744:	81 30       	cpi	r24, 0x01	; 1
    4746:	91 05       	cpc	r25, r1
    4748:	09 f4       	brne	.+2      	; 0x474c <EXTI_u8SetSenceControl+0x3e>
    474a:	66 c0       	rjmp	.+204    	; 0x4818 <EXTI_u8SetSenceControl+0x10a>
    474c:	2a 85       	ldd	r18, Y+10	; 0x0a
    474e:	3b 85       	ldd	r19, Y+11	; 0x0b
    4750:	22 30       	cpi	r18, 0x02	; 2
    4752:	31 05       	cpc	r19, r1
    4754:	09 f4       	brne	.+2      	; 0x4758 <EXTI_u8SetSenceControl+0x4a>
    4756:	bb c0       	rjmp	.+374    	; 0x48ce <EXTI_u8SetSenceControl+0x1c0>
    4758:	8a 85       	ldd	r24, Y+10	; 0x0a
    475a:	9b 85       	ldd	r25, Y+11	; 0x0b
    475c:	00 97       	sbiw	r24, 0x00	; 0
    475e:	09 f0       	breq	.+2      	; 0x4762 <EXTI_u8SetSenceControl+0x54>
    4760:	d9 c0       	rjmp	.+434    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
            case EXTI_INT0:
                switch (Copy_u8EdgeIndex) {
    4762:	8b 81       	ldd	r24, Y+3	; 0x03
    4764:	28 2f       	mov	r18, r24
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	39 87       	std	Y+9, r19	; 0x09
    476a:	28 87       	std	Y+8, r18	; 0x08
    476c:	88 85       	ldd	r24, Y+8	; 0x08
    476e:	99 85       	ldd	r25, Y+9	; 0x09
    4770:	81 30       	cpi	r24, 0x01	; 1
    4772:	91 05       	cpc	r25, r1
    4774:	99 f1       	breq	.+102    	; 0x47dc <EXTI_u8SetSenceControl+0xce>
    4776:	28 85       	ldd	r18, Y+8	; 0x08
    4778:	39 85       	ldd	r19, Y+9	; 0x09
    477a:	22 30       	cpi	r18, 0x02	; 2
    477c:	31 05       	cpc	r19, r1
    477e:	2c f4       	brge	.+10     	; 0x478a <EXTI_u8SetSenceControl+0x7c>
    4780:	88 85       	ldd	r24, Y+8	; 0x08
    4782:	99 85       	ldd	r25, Y+9	; 0x09
    4784:	00 97       	sbiw	r24, 0x00	; 0
    4786:	c9 f1       	breq	.+114    	; 0x47fa <EXTI_u8SetSenceControl+0xec>
    4788:	c5 c0       	rjmp	.+394    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
    478a:	28 85       	ldd	r18, Y+8	; 0x08
    478c:	39 85       	ldd	r19, Y+9	; 0x09
    478e:	22 30       	cpi	r18, 0x02	; 2
    4790:	31 05       	cpc	r19, r1
    4792:	a9 f0       	breq	.+42     	; 0x47be <EXTI_u8SetSenceControl+0xb0>
    4794:	88 85       	ldd	r24, Y+8	; 0x08
    4796:	99 85       	ldd	r25, Y+9	; 0x09
    4798:	83 30       	cpi	r24, 0x03	; 3
    479a:	91 05       	cpc	r25, r1
    479c:	09 f0       	breq	.+2      	; 0x47a0 <EXTI_u8SetSenceControl+0x92>
    479e:	ba c0       	rjmp	.+372    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                    case EXTI_LOW_LEVEL:
                        CLR_BIT(MCUCR, MCUCR_ISC00);
    47a0:	a5 e5       	ldi	r26, 0x55	; 85
    47a2:	b0 e0       	ldi	r27, 0x00	; 0
    47a4:	e5 e5       	ldi	r30, 0x55	; 85
    47a6:	f0 e0       	ldi	r31, 0x00	; 0
    47a8:	80 81       	ld	r24, Z
    47aa:	8e 7f       	andi	r24, 0xFE	; 254
    47ac:	8c 93       	st	X, r24
                        CLR_BIT(MCUCR, MCUCR_ISC01);
    47ae:	a5 e5       	ldi	r26, 0x55	; 85
    47b0:	b0 e0       	ldi	r27, 0x00	; 0
    47b2:	e5 e5       	ldi	r30, 0x55	; 85
    47b4:	f0 e0       	ldi	r31, 0x00	; 0
    47b6:	80 81       	ld	r24, Z
    47b8:	8d 7f       	andi	r24, 0xFD	; 253
    47ba:	8c 93       	st	X, r24
    47bc:	ab c0       	rjmp	.+342    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                        break;
                    case EXTI_ON_CHANGE:
                        SET_BIT(MCUCR, MCUCR_ISC00);
    47be:	a5 e5       	ldi	r26, 0x55	; 85
    47c0:	b0 e0       	ldi	r27, 0x00	; 0
    47c2:	e5 e5       	ldi	r30, 0x55	; 85
    47c4:	f0 e0       	ldi	r31, 0x00	; 0
    47c6:	80 81       	ld	r24, Z
    47c8:	81 60       	ori	r24, 0x01	; 1
    47ca:	8c 93       	st	X, r24
                        CLR_BIT(MCUCR, MCUCR_ISC01);
    47cc:	a5 e5       	ldi	r26, 0x55	; 85
    47ce:	b0 e0       	ldi	r27, 0x00	; 0
    47d0:	e5 e5       	ldi	r30, 0x55	; 85
    47d2:	f0 e0       	ldi	r31, 0x00	; 0
    47d4:	80 81       	ld	r24, Z
    47d6:	8d 7f       	andi	r24, 0xFD	; 253
    47d8:	8c 93       	st	X, r24
    47da:	9c c0       	rjmp	.+312    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                        break;
                    case EXTI_FALLING_EDGE:
                        CLR_BIT(MCUCR, MCUCR_ISC00);
    47dc:	a5 e5       	ldi	r26, 0x55	; 85
    47de:	b0 e0       	ldi	r27, 0x00	; 0
    47e0:	e5 e5       	ldi	r30, 0x55	; 85
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	80 81       	ld	r24, Z
    47e6:	8e 7f       	andi	r24, 0xFE	; 254
    47e8:	8c 93       	st	X, r24
                        SET_BIT(MCUCR, MCUCR_ISC01);
    47ea:	a5 e5       	ldi	r26, 0x55	; 85
    47ec:	b0 e0       	ldi	r27, 0x00	; 0
    47ee:	e5 e5       	ldi	r30, 0x55	; 85
    47f0:	f0 e0       	ldi	r31, 0x00	; 0
    47f2:	80 81       	ld	r24, Z
    47f4:	82 60       	ori	r24, 0x02	; 2
    47f6:	8c 93       	st	X, r24
    47f8:	8d c0       	rjmp	.+282    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                        break;
                    case EXTI_RISING_EDGE:
                        SET_BIT(MCUCR, MCUCR_ISC00);
    47fa:	a5 e5       	ldi	r26, 0x55	; 85
    47fc:	b0 e0       	ldi	r27, 0x00	; 0
    47fe:	e5 e5       	ldi	r30, 0x55	; 85
    4800:	f0 e0       	ldi	r31, 0x00	; 0
    4802:	80 81       	ld	r24, Z
    4804:	81 60       	ori	r24, 0x01	; 1
    4806:	8c 93       	st	X, r24
                        SET_BIT(MCUCR, MCUCR_ISC01);
    4808:	a5 e5       	ldi	r26, 0x55	; 85
    480a:	b0 e0       	ldi	r27, 0x00	; 0
    480c:	e5 e5       	ldi	r30, 0x55	; 85
    480e:	f0 e0       	ldi	r31, 0x00	; 0
    4810:	80 81       	ld	r24, Z
    4812:	82 60       	ori	r24, 0x02	; 2
    4814:	8c 93       	st	X, r24
    4816:	7e c0       	rjmp	.+252    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                        break;
                }
                break;
            case EXTI_INT1:
                switch (Copy_u8EdgeIndex) {
    4818:	8b 81       	ldd	r24, Y+3	; 0x03
    481a:	28 2f       	mov	r18, r24
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	3f 83       	std	Y+7, r19	; 0x07
    4820:	2e 83       	std	Y+6, r18	; 0x06
    4822:	8e 81       	ldd	r24, Y+6	; 0x06
    4824:	9f 81       	ldd	r25, Y+7	; 0x07
    4826:	81 30       	cpi	r24, 0x01	; 1
    4828:	91 05       	cpc	r25, r1
    482a:	99 f1       	breq	.+102    	; 0x4892 <EXTI_u8SetSenceControl+0x184>
    482c:	2e 81       	ldd	r18, Y+6	; 0x06
    482e:	3f 81       	ldd	r19, Y+7	; 0x07
    4830:	22 30       	cpi	r18, 0x02	; 2
    4832:	31 05       	cpc	r19, r1
    4834:	2c f4       	brge	.+10     	; 0x4840 <EXTI_u8SetSenceControl+0x132>
    4836:	8e 81       	ldd	r24, Y+6	; 0x06
    4838:	9f 81       	ldd	r25, Y+7	; 0x07
    483a:	00 97       	sbiw	r24, 0x00	; 0
    483c:	c9 f1       	breq	.+114    	; 0x48b0 <EXTI_u8SetSenceControl+0x1a2>
    483e:	6a c0       	rjmp	.+212    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
    4840:	2e 81       	ldd	r18, Y+6	; 0x06
    4842:	3f 81       	ldd	r19, Y+7	; 0x07
    4844:	22 30       	cpi	r18, 0x02	; 2
    4846:	31 05       	cpc	r19, r1
    4848:	a9 f0       	breq	.+42     	; 0x4874 <EXTI_u8SetSenceControl+0x166>
    484a:	8e 81       	ldd	r24, Y+6	; 0x06
    484c:	9f 81       	ldd	r25, Y+7	; 0x07
    484e:	83 30       	cpi	r24, 0x03	; 3
    4850:	91 05       	cpc	r25, r1
    4852:	09 f0       	breq	.+2      	; 0x4856 <EXTI_u8SetSenceControl+0x148>
    4854:	5f c0       	rjmp	.+190    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                    case EXTI_LOW_LEVEL:
                        CLR_BIT(MCUCR, MCUCR_ISC10);
    4856:	a5 e5       	ldi	r26, 0x55	; 85
    4858:	b0 e0       	ldi	r27, 0x00	; 0
    485a:	e5 e5       	ldi	r30, 0x55	; 85
    485c:	f0 e0       	ldi	r31, 0x00	; 0
    485e:	80 81       	ld	r24, Z
    4860:	8b 7f       	andi	r24, 0xFB	; 251
    4862:	8c 93       	st	X, r24
                        CLR_BIT(MCUCR, MCUCR_ISC11);
    4864:	a5 e5       	ldi	r26, 0x55	; 85
    4866:	b0 e0       	ldi	r27, 0x00	; 0
    4868:	e5 e5       	ldi	r30, 0x55	; 85
    486a:	f0 e0       	ldi	r31, 0x00	; 0
    486c:	80 81       	ld	r24, Z
    486e:	87 7f       	andi	r24, 0xF7	; 247
    4870:	8c 93       	st	X, r24
    4872:	50 c0       	rjmp	.+160    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                        break;
                    case EXTI_ON_CHANGE:
                        SET_BIT(MCUCR, MCUCR_ISC10);
    4874:	a5 e5       	ldi	r26, 0x55	; 85
    4876:	b0 e0       	ldi	r27, 0x00	; 0
    4878:	e5 e5       	ldi	r30, 0x55	; 85
    487a:	f0 e0       	ldi	r31, 0x00	; 0
    487c:	80 81       	ld	r24, Z
    487e:	84 60       	ori	r24, 0x04	; 4
    4880:	8c 93       	st	X, r24
                        CLR_BIT(MCUCR, MCUCR_ISC11);
    4882:	a5 e5       	ldi	r26, 0x55	; 85
    4884:	b0 e0       	ldi	r27, 0x00	; 0
    4886:	e5 e5       	ldi	r30, 0x55	; 85
    4888:	f0 e0       	ldi	r31, 0x00	; 0
    488a:	80 81       	ld	r24, Z
    488c:	87 7f       	andi	r24, 0xF7	; 247
    488e:	8c 93       	st	X, r24
    4890:	41 c0       	rjmp	.+130    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                        break;
                    case EXTI_FALLING_EDGE:
                        CLR_BIT(MCUCR, MCUCR_ISC10);
    4892:	a5 e5       	ldi	r26, 0x55	; 85
    4894:	b0 e0       	ldi	r27, 0x00	; 0
    4896:	e5 e5       	ldi	r30, 0x55	; 85
    4898:	f0 e0       	ldi	r31, 0x00	; 0
    489a:	80 81       	ld	r24, Z
    489c:	8b 7f       	andi	r24, 0xFB	; 251
    489e:	8c 93       	st	X, r24
                        SET_BIT(MCUCR, MCUCR_ISC11);
    48a0:	a5 e5       	ldi	r26, 0x55	; 85
    48a2:	b0 e0       	ldi	r27, 0x00	; 0
    48a4:	e5 e5       	ldi	r30, 0x55	; 85
    48a6:	f0 e0       	ldi	r31, 0x00	; 0
    48a8:	80 81       	ld	r24, Z
    48aa:	88 60       	ori	r24, 0x08	; 8
    48ac:	8c 93       	st	X, r24
    48ae:	32 c0       	rjmp	.+100    	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                        break;
                    case EXTI_RISING_EDGE:
                        SET_BIT(MCUCR, MCUCR_ISC10);
    48b0:	a5 e5       	ldi	r26, 0x55	; 85
    48b2:	b0 e0       	ldi	r27, 0x00	; 0
    48b4:	e5 e5       	ldi	r30, 0x55	; 85
    48b6:	f0 e0       	ldi	r31, 0x00	; 0
    48b8:	80 81       	ld	r24, Z
    48ba:	84 60       	ori	r24, 0x04	; 4
    48bc:	8c 93       	st	X, r24
                        SET_BIT(MCUCR, MCUCR_ISC11);
    48be:	a5 e5       	ldi	r26, 0x55	; 85
    48c0:	b0 e0       	ldi	r27, 0x00	; 0
    48c2:	e5 e5       	ldi	r30, 0x55	; 85
    48c4:	f0 e0       	ldi	r31, 0x00	; 0
    48c6:	80 81       	ld	r24, Z
    48c8:	88 60       	ori	r24, 0x08	; 8
    48ca:	8c 93       	st	X, r24
    48cc:	23 c0       	rjmp	.+70     	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                        break;
                }
                break;
            case EXTI_INT2:
                switch (Copy_u8EdgeIndex) {
    48ce:	8b 81       	ldd	r24, Y+3	; 0x03
    48d0:	28 2f       	mov	r18, r24
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	3d 83       	std	Y+5, r19	; 0x05
    48d6:	2c 83       	std	Y+4, r18	; 0x04
    48d8:	8c 81       	ldd	r24, Y+4	; 0x04
    48da:	9d 81       	ldd	r25, Y+5	; 0x05
    48dc:	00 97       	sbiw	r24, 0x00	; 0
    48de:	69 f0       	breq	.+26     	; 0x48fa <EXTI_u8SetSenceControl+0x1ec>
    48e0:	2c 81       	ldd	r18, Y+4	; 0x04
    48e2:	3d 81       	ldd	r19, Y+5	; 0x05
    48e4:	21 30       	cpi	r18, 0x01	; 1
    48e6:	31 05       	cpc	r19, r1
    48e8:	81 f4       	brne	.+32     	; 0x490a <EXTI_u8SetSenceControl+0x1fc>
                    case EXTI_FALLING_EDGE:
                        CLR_BIT(MCUCSR, MCUCSR_ISC2);
    48ea:	a4 e5       	ldi	r26, 0x54	; 84
    48ec:	b0 e0       	ldi	r27, 0x00	; 0
    48ee:	e4 e5       	ldi	r30, 0x54	; 84
    48f0:	f0 e0       	ldi	r31, 0x00	; 0
    48f2:	80 81       	ld	r24, Z
    48f4:	8f 7b       	andi	r24, 0xBF	; 191
    48f6:	8c 93       	st	X, r24
    48f8:	0d c0       	rjmp	.+26     	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                        break;
                    case EXTI_RISING_EDGE:
                        SET_BIT(MCUCSR, MCUCSR_ISC2);
    48fa:	a4 e5       	ldi	r26, 0x54	; 84
    48fc:	b0 e0       	ldi	r27, 0x00	; 0
    48fe:	e4 e5       	ldi	r30, 0x54	; 84
    4900:	f0 e0       	ldi	r31, 0x00	; 0
    4902:	80 81       	ld	r24, Z
    4904:	80 64       	ori	r24, 0x40	; 64
    4906:	8c 93       	st	X, r24
    4908:	05 c0       	rjmp	.+10     	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                        break;
                    default:
                        Local_u8ErrorState = NOT_OK;
    490a:	81 e0       	ldi	r24, 0x01	; 1
    490c:	89 83       	std	Y+1, r24	; 0x01
    490e:	02 c0       	rjmp	.+4      	; 0x4914 <EXTI_u8SetSenceControl+0x206>
                }
                break;
        }
    } else {
        Local_u8ErrorState = NOT_OK;
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
    4914:	89 81       	ldd	r24, Y+1	; 0x01
}
    4916:	2b 96       	adiw	r28, 0x0b	; 11
    4918:	0f b6       	in	r0, 0x3f	; 63
    491a:	f8 94       	cli
    491c:	de bf       	out	0x3e, r29	; 62
    491e:	0f be       	out	0x3f, r0	; 63
    4920:	cd bf       	out	0x3d, r28	; 61
    4922:	cf 91       	pop	r28
    4924:	df 91       	pop	r29
    4926:	08 95       	ret

00004928 <EXTI_u8EXTISetCallBack>:


u8 EXTI_u8EXTISetCallBack(u8 Copy_u8EXTIIndex, void (*Copy_fPtr)(void)) {
    4928:	df 93       	push	r29
    492a:	cf 93       	push	r28
    492c:	00 d0       	rcall	.+0      	; 0x492e <EXTI_u8EXTISetCallBack+0x6>
    492e:	00 d0       	rcall	.+0      	; 0x4930 <EXTI_u8EXTISetCallBack+0x8>
    4930:	cd b7       	in	r28, 0x3d	; 61
    4932:	de b7       	in	r29, 0x3e	; 62
    4934:	8a 83       	std	Y+2, r24	; 0x02
    4936:	7c 83       	std	Y+4, r23	; 0x04
    4938:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = OK;
    493a:	19 82       	std	Y+1, r1	; 0x01
    if (EXTI_u8Checker(Copy_u8EXTIIndex, 0) && (Copy_fPtr != NULL)) {
    493c:	8a 81       	ldd	r24, Y+2	; 0x02
    493e:	60 e0       	ldi	r22, 0x00	; 0
    4940:	0e 94 07 22 	call	0x440e	; 0x440e <EXTI_u8Checker>
    4944:	88 23       	and	r24, r24
    4946:	89 f0       	breq	.+34     	; 0x496a <EXTI_u8EXTISetCallBack+0x42>
    4948:	8b 81       	ldd	r24, Y+3	; 0x03
    494a:	9c 81       	ldd	r25, Y+4	; 0x04
    494c:	00 97       	sbiw	r24, 0x00	; 0
    494e:	69 f0       	breq	.+26     	; 0x496a <EXTI_u8EXTISetCallBack+0x42>
    	EXTI_AfPtr[Copy_u8EXTIIndex] = Copy_fPtr;
    4950:	8a 81       	ldd	r24, Y+2	; 0x02
    4952:	88 2f       	mov	r24, r24
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	88 0f       	add	r24, r24
    4958:	99 1f       	adc	r25, r25
    495a:	fc 01       	movw	r30, r24
    495c:	ec 55       	subi	r30, 0x5C	; 92
    495e:	fe 4f       	sbci	r31, 0xFE	; 254
    4960:	8b 81       	ldd	r24, Y+3	; 0x03
    4962:	9c 81       	ldd	r25, Y+4	; 0x04
    4964:	91 83       	std	Z+1, r25	; 0x01
    4966:	80 83       	st	Z, r24
    4968:	02 c0       	rjmp	.+4      	; 0x496e <EXTI_u8EXTISetCallBack+0x46>
    } else {
        Local_u8ErrorState = NOT_OK;
    496a:	81 e0       	ldi	r24, 0x01	; 1
    496c:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
    496e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4970:	0f 90       	pop	r0
    4972:	0f 90       	pop	r0
    4974:	0f 90       	pop	r0
    4976:	0f 90       	pop	r0
    4978:	cf 91       	pop	r28
    497a:	df 91       	pop	r29
    497c:	08 95       	ret

0000497e <__vector_1>:

void __vector_1() __attribute__((signal));
void __vector_1() {
    497e:	1f 92       	push	r1
    4980:	0f 92       	push	r0
    4982:	0f b6       	in	r0, 0x3f	; 63
    4984:	0f 92       	push	r0
    4986:	11 24       	eor	r1, r1
    4988:	2f 93       	push	r18
    498a:	3f 93       	push	r19
    498c:	4f 93       	push	r20
    498e:	5f 93       	push	r21
    4990:	6f 93       	push	r22
    4992:	7f 93       	push	r23
    4994:	8f 93       	push	r24
    4996:	9f 93       	push	r25
    4998:	af 93       	push	r26
    499a:	bf 93       	push	r27
    499c:	ef 93       	push	r30
    499e:	ff 93       	push	r31
    49a0:	df 93       	push	r29
    49a2:	cf 93       	push	r28
    49a4:	cd b7       	in	r28, 0x3d	; 61
    49a6:	de b7       	in	r29, 0x3e	; 62
   if(EXTI_AfPtr[EXTI_INT0] != NULL) EXTI_AfPtr[EXTI_INT0]();
    49a8:	80 91 a4 01 	lds	r24, 0x01A4
    49ac:	90 91 a5 01 	lds	r25, 0x01A5
    49b0:	00 97       	sbiw	r24, 0x00	; 0
    49b2:	29 f0       	breq	.+10     	; 0x49be <__vector_1+0x40>
    49b4:	e0 91 a4 01 	lds	r30, 0x01A4
    49b8:	f0 91 a5 01 	lds	r31, 0x01A5
    49bc:	09 95       	icall
}
    49be:	cf 91       	pop	r28
    49c0:	df 91       	pop	r29
    49c2:	ff 91       	pop	r31
    49c4:	ef 91       	pop	r30
    49c6:	bf 91       	pop	r27
    49c8:	af 91       	pop	r26
    49ca:	9f 91       	pop	r25
    49cc:	8f 91       	pop	r24
    49ce:	7f 91       	pop	r23
    49d0:	6f 91       	pop	r22
    49d2:	5f 91       	pop	r21
    49d4:	4f 91       	pop	r20
    49d6:	3f 91       	pop	r19
    49d8:	2f 91       	pop	r18
    49da:	0f 90       	pop	r0
    49dc:	0f be       	out	0x3f, r0	; 63
    49de:	0f 90       	pop	r0
    49e0:	1f 90       	pop	r1
    49e2:	18 95       	reti

000049e4 <__vector_2>:

void __vector_2() __attribute__((signal));
void __vector_2() {
    49e4:	1f 92       	push	r1
    49e6:	0f 92       	push	r0
    49e8:	0f b6       	in	r0, 0x3f	; 63
    49ea:	0f 92       	push	r0
    49ec:	11 24       	eor	r1, r1
    49ee:	2f 93       	push	r18
    49f0:	3f 93       	push	r19
    49f2:	4f 93       	push	r20
    49f4:	5f 93       	push	r21
    49f6:	6f 93       	push	r22
    49f8:	7f 93       	push	r23
    49fa:	8f 93       	push	r24
    49fc:	9f 93       	push	r25
    49fe:	af 93       	push	r26
    4a00:	bf 93       	push	r27
    4a02:	ef 93       	push	r30
    4a04:	ff 93       	push	r31
    4a06:	df 93       	push	r29
    4a08:	cf 93       	push	r28
    4a0a:	cd b7       	in	r28, 0x3d	; 61
    4a0c:	de b7       	in	r29, 0x3e	; 62
   if(EXTI_AfPtr[EXTI_INT1] != NULL) EXTI_AfPtr[EXTI_INT1]();
    4a0e:	80 91 a6 01 	lds	r24, 0x01A6
    4a12:	90 91 a7 01 	lds	r25, 0x01A7
    4a16:	00 97       	sbiw	r24, 0x00	; 0
    4a18:	29 f0       	breq	.+10     	; 0x4a24 <__vector_2+0x40>
    4a1a:	e0 91 a6 01 	lds	r30, 0x01A6
    4a1e:	f0 91 a7 01 	lds	r31, 0x01A7
    4a22:	09 95       	icall
}
    4a24:	cf 91       	pop	r28
    4a26:	df 91       	pop	r29
    4a28:	ff 91       	pop	r31
    4a2a:	ef 91       	pop	r30
    4a2c:	bf 91       	pop	r27
    4a2e:	af 91       	pop	r26
    4a30:	9f 91       	pop	r25
    4a32:	8f 91       	pop	r24
    4a34:	7f 91       	pop	r23
    4a36:	6f 91       	pop	r22
    4a38:	5f 91       	pop	r21
    4a3a:	4f 91       	pop	r20
    4a3c:	3f 91       	pop	r19
    4a3e:	2f 91       	pop	r18
    4a40:	0f 90       	pop	r0
    4a42:	0f be       	out	0x3f, r0	; 63
    4a44:	0f 90       	pop	r0
    4a46:	1f 90       	pop	r1
    4a48:	18 95       	reti

00004a4a <__vector_3>:

void __vector_3() __attribute__((signal));
void __vector_3() {
    4a4a:	1f 92       	push	r1
    4a4c:	0f 92       	push	r0
    4a4e:	0f b6       	in	r0, 0x3f	; 63
    4a50:	0f 92       	push	r0
    4a52:	11 24       	eor	r1, r1
    4a54:	2f 93       	push	r18
    4a56:	3f 93       	push	r19
    4a58:	4f 93       	push	r20
    4a5a:	5f 93       	push	r21
    4a5c:	6f 93       	push	r22
    4a5e:	7f 93       	push	r23
    4a60:	8f 93       	push	r24
    4a62:	9f 93       	push	r25
    4a64:	af 93       	push	r26
    4a66:	bf 93       	push	r27
    4a68:	ef 93       	push	r30
    4a6a:	ff 93       	push	r31
    4a6c:	df 93       	push	r29
    4a6e:	cf 93       	push	r28
    4a70:	cd b7       	in	r28, 0x3d	; 61
    4a72:	de b7       	in	r29, 0x3e	; 62
   if(EXTI_AfPtr[EXTI_INT2] != NULL) EXTI_AfPtr[EXTI_INT2]();
    4a74:	80 91 a8 01 	lds	r24, 0x01A8
    4a78:	90 91 a9 01 	lds	r25, 0x01A9
    4a7c:	00 97       	sbiw	r24, 0x00	; 0
    4a7e:	29 f0       	breq	.+10     	; 0x4a8a <__vector_3+0x40>
    4a80:	e0 91 a8 01 	lds	r30, 0x01A8
    4a84:	f0 91 a9 01 	lds	r31, 0x01A9
    4a88:	09 95       	icall
}
    4a8a:	cf 91       	pop	r28
    4a8c:	df 91       	pop	r29
    4a8e:	ff 91       	pop	r31
    4a90:	ef 91       	pop	r30
    4a92:	bf 91       	pop	r27
    4a94:	af 91       	pop	r26
    4a96:	9f 91       	pop	r25
    4a98:	8f 91       	pop	r24
    4a9a:	7f 91       	pop	r23
    4a9c:	6f 91       	pop	r22
    4a9e:	5f 91       	pop	r21
    4aa0:	4f 91       	pop	r20
    4aa2:	3f 91       	pop	r19
    4aa4:	2f 91       	pop	r18
    4aa6:	0f 90       	pop	r0
    4aa8:	0f be       	out	0x3f, r0	; 63
    4aaa:	0f 90       	pop	r0
    4aac:	1f 90       	pop	r1
    4aae:	18 95       	reti

00004ab0 <portChecker>:
#include "DIO_register.h"
#include "DIO_interface.h"
#include "DIO_config.h"
#include "DIO_private.h"

u8 static portChecker(u8 Copy_u8Port) {
    4ab0:	df 93       	push	r29
    4ab2:	cf 93       	push	r28
    4ab4:	00 d0       	rcall	.+0      	; 0x4ab6 <portChecker+0x6>
    4ab6:	cd b7       	in	r28, 0x3d	; 61
    4ab8:	de b7       	in	r29, 0x3e	; 62
    4aba:	89 83       	std	Y+1, r24	; 0x01
    return Copy_u8Port > DIO_u8PORTD;
    4abc:	1a 82       	std	Y+2, r1	; 0x02
    4abe:	89 81       	ldd	r24, Y+1	; 0x01
    4ac0:	84 30       	cpi	r24, 0x04	; 4
    4ac2:	10 f0       	brcs	.+4      	; 0x4ac8 <portChecker+0x18>
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	8a 83       	std	Y+2, r24	; 0x02
    4ac8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4aca:	0f 90       	pop	r0
    4acc:	0f 90       	pop	r0
    4ace:	cf 91       	pop	r28
    4ad0:	df 91       	pop	r29
    4ad2:	08 95       	ret

00004ad4 <pinChecker>:

u8 static pinChecker(u8 Copy_u8Pin) {
    4ad4:	df 93       	push	r29
    4ad6:	cf 93       	push	r28
    4ad8:	00 d0       	rcall	.+0      	; 0x4ada <pinChecker+0x6>
    4ada:	cd b7       	in	r28, 0x3d	; 61
    4adc:	de b7       	in	r29, 0x3e	; 62
    4ade:	89 83       	std	Y+1, r24	; 0x01
    return Copy_u8Pin > DIO_u8PIN7;
    4ae0:	1a 82       	std	Y+2, r1	; 0x02
    4ae2:	89 81       	ldd	r24, Y+1	; 0x01
    4ae4:	88 30       	cpi	r24, 0x08	; 8
    4ae6:	10 f0       	brcs	.+4      	; 0x4aec <pinChecker+0x18>
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	8a 83       	std	Y+2, r24	; 0x02
    4aec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4aee:	0f 90       	pop	r0
    4af0:	0f 90       	pop	r0
    4af2:	cf 91       	pop	r28
    4af4:	df 91       	pop	r29
    4af6:	08 95       	ret

00004af8 <directionChecker>:

u8 static directionChecker(u8 Copy_u8Direction) {
    4af8:	df 93       	push	r29
    4afa:	cf 93       	push	r28
    4afc:	00 d0       	rcall	.+0      	; 0x4afe <directionChecker+0x6>
    4afe:	cd b7       	in	r28, 0x3d	; 61
    4b00:	de b7       	in	r29, 0x3e	; 62
    4b02:	89 83       	std	Y+1, r24	; 0x01
    return Copy_u8Direction > DIO_u8PIN_OUTPUT;
    4b04:	1a 82       	std	Y+2, r1	; 0x02
    4b06:	89 81       	ldd	r24, Y+1	; 0x01
    4b08:	82 30       	cpi	r24, 0x02	; 2
    4b0a:	10 f0       	brcs	.+4      	; 0x4b10 <directionChecker+0x18>
    4b0c:	81 e0       	ldi	r24, 0x01	; 1
    4b0e:	8a 83       	std	Y+2, r24	; 0x02
    4b10:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4b12:	0f 90       	pop	r0
    4b14:	0f 90       	pop	r0
    4b16:	cf 91       	pop	r28
    4b18:	df 91       	pop	r29
    4b1a:	08 95       	ret

00004b1c <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction) {
    4b1c:	df 93       	push	r29
    4b1e:	cf 93       	push	r28
    4b20:	cd b7       	in	r28, 0x3d	; 61
    4b22:	de b7       	in	r29, 0x3e	; 62
    4b24:	28 97       	sbiw	r28, 0x08	; 8
    4b26:	0f b6       	in	r0, 0x3f	; 63
    4b28:	f8 94       	cli
    4b2a:	de bf       	out	0x3e, r29	; 62
    4b2c:	0f be       	out	0x3f, r0	; 63
    4b2e:	cd bf       	out	0x3d, r28	; 61
    4b30:	89 83       	std	Y+1, r24	; 0x01
    4b32:	6a 83       	std	Y+2, r22	; 0x02
    4b34:	4b 83       	std	Y+3, r20	; 0x03
    if (portChecker(Copy_u8Port) || pinChecker(Copy_u8Pin)
    4b36:	89 81       	ldd	r24, Y+1	; 0x01
    4b38:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <portChecker>
    4b3c:	88 23       	and	r24, r24
    4b3e:	51 f4       	brne	.+20     	; 0x4b54 <DIO_u8SetPinDirection+0x38>
    4b40:	8a 81       	ldd	r24, Y+2	; 0x02
    4b42:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <pinChecker>
    4b46:	88 23       	and	r24, r24
    4b48:	29 f4       	brne	.+10     	; 0x4b54 <DIO_u8SetPinDirection+0x38>
    4b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b4c:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <directionChecker>
    4b50:	88 23       	and	r24, r24
    4b52:	19 f0       	breq	.+6      	; 0x4b5a <DIO_u8SetPinDirection+0x3e>
        || directionChecker(Copy_u8Direction))
        return 1;
    4b54:	21 e0       	ldi	r18, 0x01	; 1
    4b56:	28 87       	std	Y+8, r18	; 0x08
    4b58:	e7 c0       	rjmp	.+462    	; 0x4d28 <DIO_u8SetPinDirection+0x20c>
    if (Copy_u8Direction == DIO_u8PIN_OUTPUT)
    4b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b5c:	81 30       	cpi	r24, 0x01	; 1
    4b5e:	09 f0       	breq	.+2      	; 0x4b62 <DIO_u8SetPinDirection+0x46>
    4b60:	6f c0       	rjmp	.+222    	; 0x4c40 <DIO_u8SetPinDirection+0x124>
        switch (Copy_u8Port) {
    4b62:	89 81       	ldd	r24, Y+1	; 0x01
    4b64:	28 2f       	mov	r18, r24
    4b66:	30 e0       	ldi	r19, 0x00	; 0
    4b68:	3f 83       	std	Y+7, r19	; 0x07
    4b6a:	2e 83       	std	Y+6, r18	; 0x06
    4b6c:	8e 81       	ldd	r24, Y+6	; 0x06
    4b6e:	9f 81       	ldd	r25, Y+7	; 0x07
    4b70:	81 30       	cpi	r24, 0x01	; 1
    4b72:	91 05       	cpc	r25, r1
    4b74:	49 f1       	breq	.+82     	; 0x4bc8 <DIO_u8SetPinDirection+0xac>
    4b76:	2e 81       	ldd	r18, Y+6	; 0x06
    4b78:	3f 81       	ldd	r19, Y+7	; 0x07
    4b7a:	22 30       	cpi	r18, 0x02	; 2
    4b7c:	31 05       	cpc	r19, r1
    4b7e:	2c f4       	brge	.+10     	; 0x4b8a <DIO_u8SetPinDirection+0x6e>
    4b80:	8e 81       	ldd	r24, Y+6	; 0x06
    4b82:	9f 81       	ldd	r25, Y+7	; 0x07
    4b84:	00 97       	sbiw	r24, 0x00	; 0
    4b86:	61 f0       	breq	.+24     	; 0x4ba0 <DIO_u8SetPinDirection+0x84>
    4b88:	ce c0       	rjmp	.+412    	; 0x4d26 <DIO_u8SetPinDirection+0x20a>
    4b8a:	2e 81       	ldd	r18, Y+6	; 0x06
    4b8c:	3f 81       	ldd	r19, Y+7	; 0x07
    4b8e:	22 30       	cpi	r18, 0x02	; 2
    4b90:	31 05       	cpc	r19, r1
    4b92:	71 f1       	breq	.+92     	; 0x4bf0 <DIO_u8SetPinDirection+0xd4>
    4b94:	8e 81       	ldd	r24, Y+6	; 0x06
    4b96:	9f 81       	ldd	r25, Y+7	; 0x07
    4b98:	83 30       	cpi	r24, 0x03	; 3
    4b9a:	91 05       	cpc	r25, r1
    4b9c:	e9 f1       	breq	.+122    	; 0x4c18 <DIO_u8SetPinDirection+0xfc>
    4b9e:	c3 c0       	rjmp	.+390    	; 0x4d26 <DIO_u8SetPinDirection+0x20a>
            case DIO_u8PORTA:
                SET_BIT(DDRA, Copy_u8Pin);
    4ba0:	aa e3       	ldi	r26, 0x3A	; 58
    4ba2:	b0 e0       	ldi	r27, 0x00	; 0
    4ba4:	ea e3       	ldi	r30, 0x3A	; 58
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	80 81       	ld	r24, Z
    4baa:	48 2f       	mov	r20, r24
    4bac:	8a 81       	ldd	r24, Y+2	; 0x02
    4bae:	28 2f       	mov	r18, r24
    4bb0:	30 e0       	ldi	r19, 0x00	; 0
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	02 2e       	mov	r0, r18
    4bb8:	02 c0       	rjmp	.+4      	; 0x4bbe <DIO_u8SetPinDirection+0xa2>
    4bba:	88 0f       	add	r24, r24
    4bbc:	99 1f       	adc	r25, r25
    4bbe:	0a 94       	dec	r0
    4bc0:	e2 f7       	brpl	.-8      	; 0x4bba <DIO_u8SetPinDirection+0x9e>
    4bc2:	84 2b       	or	r24, r20
    4bc4:	8c 93       	st	X, r24
    4bc6:	af c0       	rjmp	.+350    	; 0x4d26 <DIO_u8SetPinDirection+0x20a>
                break;
            case DIO_u8PORTB:
                SET_BIT(DDRB, Copy_u8Pin);
    4bc8:	a7 e3       	ldi	r26, 0x37	; 55
    4bca:	b0 e0       	ldi	r27, 0x00	; 0
    4bcc:	e7 e3       	ldi	r30, 0x37	; 55
    4bce:	f0 e0       	ldi	r31, 0x00	; 0
    4bd0:	80 81       	ld	r24, Z
    4bd2:	48 2f       	mov	r20, r24
    4bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd6:	28 2f       	mov	r18, r24
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	81 e0       	ldi	r24, 0x01	; 1
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	02 2e       	mov	r0, r18
    4be0:	02 c0       	rjmp	.+4      	; 0x4be6 <DIO_u8SetPinDirection+0xca>
    4be2:	88 0f       	add	r24, r24
    4be4:	99 1f       	adc	r25, r25
    4be6:	0a 94       	dec	r0
    4be8:	e2 f7       	brpl	.-8      	; 0x4be2 <DIO_u8SetPinDirection+0xc6>
    4bea:	84 2b       	or	r24, r20
    4bec:	8c 93       	st	X, r24
    4bee:	9b c0       	rjmp	.+310    	; 0x4d26 <DIO_u8SetPinDirection+0x20a>
                break;
            case DIO_u8PORTC:
                SET_BIT(DDRC, Copy_u8Pin);
    4bf0:	a4 e3       	ldi	r26, 0x34	; 52
    4bf2:	b0 e0       	ldi	r27, 0x00	; 0
    4bf4:	e4 e3       	ldi	r30, 0x34	; 52
    4bf6:	f0 e0       	ldi	r31, 0x00	; 0
    4bf8:	80 81       	ld	r24, Z
    4bfa:	48 2f       	mov	r20, r24
    4bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    4bfe:	28 2f       	mov	r18, r24
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	81 e0       	ldi	r24, 0x01	; 1
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	02 2e       	mov	r0, r18
    4c08:	02 c0       	rjmp	.+4      	; 0x4c0e <DIO_u8SetPinDirection+0xf2>
    4c0a:	88 0f       	add	r24, r24
    4c0c:	99 1f       	adc	r25, r25
    4c0e:	0a 94       	dec	r0
    4c10:	e2 f7       	brpl	.-8      	; 0x4c0a <DIO_u8SetPinDirection+0xee>
    4c12:	84 2b       	or	r24, r20
    4c14:	8c 93       	st	X, r24
    4c16:	87 c0       	rjmp	.+270    	; 0x4d26 <DIO_u8SetPinDirection+0x20a>
                break;
            case DIO_u8PORTD:
                SET_BIT(DDRD, Copy_u8Pin);
    4c18:	a1 e3       	ldi	r26, 0x31	; 49
    4c1a:	b0 e0       	ldi	r27, 0x00	; 0
    4c1c:	e1 e3       	ldi	r30, 0x31	; 49
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	80 81       	ld	r24, Z
    4c22:	48 2f       	mov	r20, r24
    4c24:	8a 81       	ldd	r24, Y+2	; 0x02
    4c26:	28 2f       	mov	r18, r24
    4c28:	30 e0       	ldi	r19, 0x00	; 0
    4c2a:	81 e0       	ldi	r24, 0x01	; 1
    4c2c:	90 e0       	ldi	r25, 0x00	; 0
    4c2e:	02 2e       	mov	r0, r18
    4c30:	02 c0       	rjmp	.+4      	; 0x4c36 <DIO_u8SetPinDirection+0x11a>
    4c32:	88 0f       	add	r24, r24
    4c34:	99 1f       	adc	r25, r25
    4c36:	0a 94       	dec	r0
    4c38:	e2 f7       	brpl	.-8      	; 0x4c32 <DIO_u8SetPinDirection+0x116>
    4c3a:	84 2b       	or	r24, r20
    4c3c:	8c 93       	st	X, r24
    4c3e:	73 c0       	rjmp	.+230    	; 0x4d26 <DIO_u8SetPinDirection+0x20a>
                break;
        }
    else
        switch (Copy_u8Port) {
    4c40:	89 81       	ldd	r24, Y+1	; 0x01
    4c42:	28 2f       	mov	r18, r24
    4c44:	30 e0       	ldi	r19, 0x00	; 0
    4c46:	3d 83       	std	Y+5, r19	; 0x05
    4c48:	2c 83       	std	Y+4, r18	; 0x04
    4c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    4c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    4c4e:	81 30       	cpi	r24, 0x01	; 1
    4c50:	91 05       	cpc	r25, r1
    4c52:	59 f1       	breq	.+86     	; 0x4caa <DIO_u8SetPinDirection+0x18e>
    4c54:	2c 81       	ldd	r18, Y+4	; 0x04
    4c56:	3d 81       	ldd	r19, Y+5	; 0x05
    4c58:	22 30       	cpi	r18, 0x02	; 2
    4c5a:	31 05       	cpc	r19, r1
    4c5c:	2c f4       	brge	.+10     	; 0x4c68 <DIO_u8SetPinDirection+0x14c>
    4c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    4c60:	9d 81       	ldd	r25, Y+5	; 0x05
    4c62:	00 97       	sbiw	r24, 0x00	; 0
    4c64:	69 f0       	breq	.+26     	; 0x4c80 <DIO_u8SetPinDirection+0x164>
    4c66:	5f c0       	rjmp	.+190    	; 0x4d26 <DIO_u8SetPinDirection+0x20a>
    4c68:	2c 81       	ldd	r18, Y+4	; 0x04
    4c6a:	3d 81       	ldd	r19, Y+5	; 0x05
    4c6c:	22 30       	cpi	r18, 0x02	; 2
    4c6e:	31 05       	cpc	r19, r1
    4c70:	89 f1       	breq	.+98     	; 0x4cd4 <DIO_u8SetPinDirection+0x1b8>
    4c72:	8c 81       	ldd	r24, Y+4	; 0x04
    4c74:	9d 81       	ldd	r25, Y+5	; 0x05
    4c76:	83 30       	cpi	r24, 0x03	; 3
    4c78:	91 05       	cpc	r25, r1
    4c7a:	09 f4       	brne	.+2      	; 0x4c7e <DIO_u8SetPinDirection+0x162>
    4c7c:	40 c0       	rjmp	.+128    	; 0x4cfe <DIO_u8SetPinDirection+0x1e2>
    4c7e:	53 c0       	rjmp	.+166    	; 0x4d26 <DIO_u8SetPinDirection+0x20a>
            case DIO_u8PORTA:
                CLR_BIT(DDRA, Copy_u8Pin);
    4c80:	aa e3       	ldi	r26, 0x3A	; 58
    4c82:	b0 e0       	ldi	r27, 0x00	; 0
    4c84:	ea e3       	ldi	r30, 0x3A	; 58
    4c86:	f0 e0       	ldi	r31, 0x00	; 0
    4c88:	80 81       	ld	r24, Z
    4c8a:	48 2f       	mov	r20, r24
    4c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c8e:	28 2f       	mov	r18, r24
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	81 e0       	ldi	r24, 0x01	; 1
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	02 2e       	mov	r0, r18
    4c98:	02 c0       	rjmp	.+4      	; 0x4c9e <DIO_u8SetPinDirection+0x182>
    4c9a:	88 0f       	add	r24, r24
    4c9c:	99 1f       	adc	r25, r25
    4c9e:	0a 94       	dec	r0
    4ca0:	e2 f7       	brpl	.-8      	; 0x4c9a <DIO_u8SetPinDirection+0x17e>
    4ca2:	80 95       	com	r24
    4ca4:	84 23       	and	r24, r20
    4ca6:	8c 93       	st	X, r24
    4ca8:	3e c0       	rjmp	.+124    	; 0x4d26 <DIO_u8SetPinDirection+0x20a>
                break;
            case DIO_u8PORTB:
                CLR_BIT(DDRB, Copy_u8Pin);
    4caa:	a7 e3       	ldi	r26, 0x37	; 55
    4cac:	b0 e0       	ldi	r27, 0x00	; 0
    4cae:	e7 e3       	ldi	r30, 0x37	; 55
    4cb0:	f0 e0       	ldi	r31, 0x00	; 0
    4cb2:	80 81       	ld	r24, Z
    4cb4:	48 2f       	mov	r20, r24
    4cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb8:	28 2f       	mov	r18, r24
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	02 2e       	mov	r0, r18
    4cc2:	02 c0       	rjmp	.+4      	; 0x4cc8 <DIO_u8SetPinDirection+0x1ac>
    4cc4:	88 0f       	add	r24, r24
    4cc6:	99 1f       	adc	r25, r25
    4cc8:	0a 94       	dec	r0
    4cca:	e2 f7       	brpl	.-8      	; 0x4cc4 <DIO_u8SetPinDirection+0x1a8>
    4ccc:	80 95       	com	r24
    4cce:	84 23       	and	r24, r20
    4cd0:	8c 93       	st	X, r24
    4cd2:	29 c0       	rjmp	.+82     	; 0x4d26 <DIO_u8SetPinDirection+0x20a>
                break;
            case DIO_u8PORTC:
                CLR_BIT(DDRC, Copy_u8Pin);
    4cd4:	a4 e3       	ldi	r26, 0x34	; 52
    4cd6:	b0 e0       	ldi	r27, 0x00	; 0
    4cd8:	e4 e3       	ldi	r30, 0x34	; 52
    4cda:	f0 e0       	ldi	r31, 0x00	; 0
    4cdc:	80 81       	ld	r24, Z
    4cde:	48 2f       	mov	r20, r24
    4ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce2:	28 2f       	mov	r18, r24
    4ce4:	30 e0       	ldi	r19, 0x00	; 0
    4ce6:	81 e0       	ldi	r24, 0x01	; 1
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	02 2e       	mov	r0, r18
    4cec:	02 c0       	rjmp	.+4      	; 0x4cf2 <DIO_u8SetPinDirection+0x1d6>
    4cee:	88 0f       	add	r24, r24
    4cf0:	99 1f       	adc	r25, r25
    4cf2:	0a 94       	dec	r0
    4cf4:	e2 f7       	brpl	.-8      	; 0x4cee <DIO_u8SetPinDirection+0x1d2>
    4cf6:	80 95       	com	r24
    4cf8:	84 23       	and	r24, r20
    4cfa:	8c 93       	st	X, r24
    4cfc:	14 c0       	rjmp	.+40     	; 0x4d26 <DIO_u8SetPinDirection+0x20a>
                break;
            case DIO_u8PORTD:
                CLR_BIT(DDRD, Copy_u8Pin);
    4cfe:	a1 e3       	ldi	r26, 0x31	; 49
    4d00:	b0 e0       	ldi	r27, 0x00	; 0
    4d02:	e1 e3       	ldi	r30, 0x31	; 49
    4d04:	f0 e0       	ldi	r31, 0x00	; 0
    4d06:	80 81       	ld	r24, Z
    4d08:	48 2f       	mov	r20, r24
    4d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d0c:	28 2f       	mov	r18, r24
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	02 2e       	mov	r0, r18
    4d16:	02 c0       	rjmp	.+4      	; 0x4d1c <DIO_u8SetPinDirection+0x200>
    4d18:	88 0f       	add	r24, r24
    4d1a:	99 1f       	adc	r25, r25
    4d1c:	0a 94       	dec	r0
    4d1e:	e2 f7       	brpl	.-8      	; 0x4d18 <DIO_u8SetPinDirection+0x1fc>
    4d20:	80 95       	com	r24
    4d22:	84 23       	and	r24, r20
    4d24:	8c 93       	st	X, r24
                break;
        }

    return 0;
    4d26:	18 86       	std	Y+8, r1	; 0x08
    4d28:	88 85       	ldd	r24, Y+8	; 0x08
}
    4d2a:	28 96       	adiw	r28, 0x08	; 8
    4d2c:	0f b6       	in	r0, 0x3f	; 63
    4d2e:	f8 94       	cli
    4d30:	de bf       	out	0x3e, r29	; 62
    4d32:	0f be       	out	0x3f, r0	; 63
    4d34:	cd bf       	out	0x3d, r28	; 61
    4d36:	cf 91       	pop	r28
    4d38:	df 91       	pop	r29
    4d3a:	08 95       	ret

00004d3c <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction) {
    4d3c:	df 93       	push	r29
    4d3e:	cf 93       	push	r28
    4d40:	00 d0       	rcall	.+0      	; 0x4d42 <DIO_u8SetPortDirection+0x6>
    4d42:	00 d0       	rcall	.+0      	; 0x4d44 <DIO_u8SetPortDirection+0x8>
    4d44:	0f 92       	push	r0
    4d46:	cd b7       	in	r28, 0x3d	; 61
    4d48:	de b7       	in	r29, 0x3e	; 62
    4d4a:	89 83       	std	Y+1, r24	; 0x01
    4d4c:	6a 83       	std	Y+2, r22	; 0x02
    if (portChecker(Copy_u8Port) )
    4d4e:	89 81       	ldd	r24, Y+1	; 0x01
    4d50:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <portChecker>
    4d54:	88 23       	and	r24, r24
    4d56:	19 f0       	breq	.+6      	; 0x4d5e <DIO_u8SetPortDirection+0x22>
        return 1;
    4d58:	21 e0       	ldi	r18, 0x01	; 1
    4d5a:	2d 83       	std	Y+5, r18	; 0x05
    4d5c:	33 c0       	rjmp	.+102    	; 0x4dc4 <DIO_u8SetPortDirection+0x88>
    switch (Copy_u8Port) {
    4d5e:	89 81       	ldd	r24, Y+1	; 0x01
    4d60:	28 2f       	mov	r18, r24
    4d62:	30 e0       	ldi	r19, 0x00	; 0
    4d64:	3c 83       	std	Y+4, r19	; 0x04
    4d66:	2b 83       	std	Y+3, r18	; 0x03
    4d68:	8b 81       	ldd	r24, Y+3	; 0x03
    4d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d6c:	81 30       	cpi	r24, 0x01	; 1
    4d6e:	91 05       	cpc	r25, r1
    4d70:	d1 f0       	breq	.+52     	; 0x4da6 <DIO_u8SetPortDirection+0x6a>
    4d72:	2b 81       	ldd	r18, Y+3	; 0x03
    4d74:	3c 81       	ldd	r19, Y+4	; 0x04
    4d76:	22 30       	cpi	r18, 0x02	; 2
    4d78:	31 05       	cpc	r19, r1
    4d7a:	2c f4       	brge	.+10     	; 0x4d86 <DIO_u8SetPortDirection+0x4a>
    4d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d80:	00 97       	sbiw	r24, 0x00	; 0
    4d82:	61 f0       	breq	.+24     	; 0x4d9c <DIO_u8SetPortDirection+0x60>
    4d84:	1e c0       	rjmp	.+60     	; 0x4dc2 <DIO_u8SetPortDirection+0x86>
    4d86:	2b 81       	ldd	r18, Y+3	; 0x03
    4d88:	3c 81       	ldd	r19, Y+4	; 0x04
    4d8a:	22 30       	cpi	r18, 0x02	; 2
    4d8c:	31 05       	cpc	r19, r1
    4d8e:	81 f0       	breq	.+32     	; 0x4db0 <DIO_u8SetPortDirection+0x74>
    4d90:	8b 81       	ldd	r24, Y+3	; 0x03
    4d92:	9c 81       	ldd	r25, Y+4	; 0x04
    4d94:	83 30       	cpi	r24, 0x03	; 3
    4d96:	91 05       	cpc	r25, r1
    4d98:	81 f0       	breq	.+32     	; 0x4dba <DIO_u8SetPortDirection+0x7e>
    4d9a:	13 c0       	rjmp	.+38     	; 0x4dc2 <DIO_u8SetPortDirection+0x86>
        case DIO_u8PORTA:
            DDRA = Copy_u8Direction;
    4d9c:	ea e3       	ldi	r30, 0x3A	; 58
    4d9e:	f0 e0       	ldi	r31, 0x00	; 0
    4da0:	8a 81       	ldd	r24, Y+2	; 0x02
    4da2:	80 83       	st	Z, r24
    4da4:	0e c0       	rjmp	.+28     	; 0x4dc2 <DIO_u8SetPortDirection+0x86>
            break;
        case DIO_u8PORTB:
            DDRB = Copy_u8Direction;
    4da6:	e7 e3       	ldi	r30, 0x37	; 55
    4da8:	f0 e0       	ldi	r31, 0x00	; 0
    4daa:	8a 81       	ldd	r24, Y+2	; 0x02
    4dac:	80 83       	st	Z, r24
    4dae:	09 c0       	rjmp	.+18     	; 0x4dc2 <DIO_u8SetPortDirection+0x86>
            break;
        case DIO_u8PORTC:
            DDRC = Copy_u8Direction;
    4db0:	e4 e3       	ldi	r30, 0x34	; 52
    4db2:	f0 e0       	ldi	r31, 0x00	; 0
    4db4:	8a 81       	ldd	r24, Y+2	; 0x02
    4db6:	80 83       	st	Z, r24
    4db8:	04 c0       	rjmp	.+8      	; 0x4dc2 <DIO_u8SetPortDirection+0x86>
            break;
        case DIO_u8PORTD:
            DDRD = Copy_u8Direction;
    4dba:	e1 e3       	ldi	r30, 0x31	; 49
    4dbc:	f0 e0       	ldi	r31, 0x00	; 0
    4dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    4dc0:	80 83       	st	Z, r24
            break;
    }
    return 0;
    4dc2:	1d 82       	std	Y+5, r1	; 0x05
    4dc4:	8d 81       	ldd	r24, Y+5	; 0x05

}
    4dc6:	0f 90       	pop	r0
    4dc8:	0f 90       	pop	r0
    4dca:	0f 90       	pop	r0
    4dcc:	0f 90       	pop	r0
    4dce:	0f 90       	pop	r0
    4dd0:	cf 91       	pop	r28
    4dd2:	df 91       	pop	r29
    4dd4:	08 95       	ret

00004dd6 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value) {
    4dd6:	df 93       	push	r29
    4dd8:	cf 93       	push	r28
    4dda:	cd b7       	in	r28, 0x3d	; 61
    4ddc:	de b7       	in	r29, 0x3e	; 62
    4dde:	28 97       	sbiw	r28, 0x08	; 8
    4de0:	0f b6       	in	r0, 0x3f	; 63
    4de2:	f8 94       	cli
    4de4:	de bf       	out	0x3e, r29	; 62
    4de6:	0f be       	out	0x3f, r0	; 63
    4de8:	cd bf       	out	0x3d, r28	; 61
    4dea:	89 83       	std	Y+1, r24	; 0x01
    4dec:	6a 83       	std	Y+2, r22	; 0x02
    4dee:	4b 83       	std	Y+3, r20	; 0x03
    if (portChecker(
    4df0:	89 81       	ldd	r24, Y+1	; 0x01
    4df2:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <portChecker>
    4df6:	88 23       	and	r24, r24
    4df8:	41 f4       	brne	.+16     	; 0x4e0a <DIO_u8SetPinValue+0x34>
    4dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    4dfc:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <pinChecker>
    4e00:	88 23       	and	r24, r24
    4e02:	19 f4       	brne	.+6      	; 0x4e0a <DIO_u8SetPinValue+0x34>
    4e04:	8b 81       	ldd	r24, Y+3	; 0x03
    4e06:	82 30       	cpi	r24, 0x02	; 2
    4e08:	18 f0       	brcs	.+6      	; 0x4e10 <DIO_u8SetPinValue+0x3a>
            Copy_u8Port) || pinChecker(Copy_u8Pin) || Copy_u8Value > DIO_u8PIN_HIGH)
        return 1;
    4e0a:	21 e0       	ldi	r18, 0x01	; 1
    4e0c:	28 87       	std	Y+8, r18	; 0x08
    4e0e:	e7 c0       	rjmp	.+462    	; 0x4fde <DIO_u8SetPinValue+0x208>
    if (Copy_u8Value == DIO_u8PIN_HIGH)
    4e10:	8b 81       	ldd	r24, Y+3	; 0x03
    4e12:	81 30       	cpi	r24, 0x01	; 1
    4e14:	09 f0       	breq	.+2      	; 0x4e18 <DIO_u8SetPinValue+0x42>
    4e16:	6f c0       	rjmp	.+222    	; 0x4ef6 <DIO_u8SetPinValue+0x120>
        switch (Copy_u8Port) {
    4e18:	89 81       	ldd	r24, Y+1	; 0x01
    4e1a:	28 2f       	mov	r18, r24
    4e1c:	30 e0       	ldi	r19, 0x00	; 0
    4e1e:	3f 83       	std	Y+7, r19	; 0x07
    4e20:	2e 83       	std	Y+6, r18	; 0x06
    4e22:	8e 81       	ldd	r24, Y+6	; 0x06
    4e24:	9f 81       	ldd	r25, Y+7	; 0x07
    4e26:	81 30       	cpi	r24, 0x01	; 1
    4e28:	91 05       	cpc	r25, r1
    4e2a:	49 f1       	breq	.+82     	; 0x4e7e <DIO_u8SetPinValue+0xa8>
    4e2c:	2e 81       	ldd	r18, Y+6	; 0x06
    4e2e:	3f 81       	ldd	r19, Y+7	; 0x07
    4e30:	22 30       	cpi	r18, 0x02	; 2
    4e32:	31 05       	cpc	r19, r1
    4e34:	2c f4       	brge	.+10     	; 0x4e40 <DIO_u8SetPinValue+0x6a>
    4e36:	8e 81       	ldd	r24, Y+6	; 0x06
    4e38:	9f 81       	ldd	r25, Y+7	; 0x07
    4e3a:	00 97       	sbiw	r24, 0x00	; 0
    4e3c:	61 f0       	breq	.+24     	; 0x4e56 <DIO_u8SetPinValue+0x80>
    4e3e:	ce c0       	rjmp	.+412    	; 0x4fdc <DIO_u8SetPinValue+0x206>
    4e40:	2e 81       	ldd	r18, Y+6	; 0x06
    4e42:	3f 81       	ldd	r19, Y+7	; 0x07
    4e44:	22 30       	cpi	r18, 0x02	; 2
    4e46:	31 05       	cpc	r19, r1
    4e48:	71 f1       	breq	.+92     	; 0x4ea6 <DIO_u8SetPinValue+0xd0>
    4e4a:	8e 81       	ldd	r24, Y+6	; 0x06
    4e4c:	9f 81       	ldd	r25, Y+7	; 0x07
    4e4e:	83 30       	cpi	r24, 0x03	; 3
    4e50:	91 05       	cpc	r25, r1
    4e52:	e9 f1       	breq	.+122    	; 0x4ece <DIO_u8SetPinValue+0xf8>
    4e54:	c3 c0       	rjmp	.+390    	; 0x4fdc <DIO_u8SetPinValue+0x206>
            case DIO_u8PORTA:
                SET_BIT(PORTA, Copy_u8Pin);
    4e56:	ab e3       	ldi	r26, 0x3B	; 59
    4e58:	b0 e0       	ldi	r27, 0x00	; 0
    4e5a:	eb e3       	ldi	r30, 0x3B	; 59
    4e5c:	f0 e0       	ldi	r31, 0x00	; 0
    4e5e:	80 81       	ld	r24, Z
    4e60:	48 2f       	mov	r20, r24
    4e62:	8a 81       	ldd	r24, Y+2	; 0x02
    4e64:	28 2f       	mov	r18, r24
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	02 2e       	mov	r0, r18
    4e6e:	02 c0       	rjmp	.+4      	; 0x4e74 <DIO_u8SetPinValue+0x9e>
    4e70:	88 0f       	add	r24, r24
    4e72:	99 1f       	adc	r25, r25
    4e74:	0a 94       	dec	r0
    4e76:	e2 f7       	brpl	.-8      	; 0x4e70 <DIO_u8SetPinValue+0x9a>
    4e78:	84 2b       	or	r24, r20
    4e7a:	8c 93       	st	X, r24
    4e7c:	af c0       	rjmp	.+350    	; 0x4fdc <DIO_u8SetPinValue+0x206>
                break;
            case DIO_u8PORTB:
                SET_BIT(PORTB, Copy_u8Pin);
    4e7e:	a8 e3       	ldi	r26, 0x38	; 56
    4e80:	b0 e0       	ldi	r27, 0x00	; 0
    4e82:	e8 e3       	ldi	r30, 0x38	; 56
    4e84:	f0 e0       	ldi	r31, 0x00	; 0
    4e86:	80 81       	ld	r24, Z
    4e88:	48 2f       	mov	r20, r24
    4e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e8c:	28 2f       	mov	r18, r24
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	02 2e       	mov	r0, r18
    4e96:	02 c0       	rjmp	.+4      	; 0x4e9c <DIO_u8SetPinValue+0xc6>
    4e98:	88 0f       	add	r24, r24
    4e9a:	99 1f       	adc	r25, r25
    4e9c:	0a 94       	dec	r0
    4e9e:	e2 f7       	brpl	.-8      	; 0x4e98 <DIO_u8SetPinValue+0xc2>
    4ea0:	84 2b       	or	r24, r20
    4ea2:	8c 93       	st	X, r24
    4ea4:	9b c0       	rjmp	.+310    	; 0x4fdc <DIO_u8SetPinValue+0x206>
                break;
            case DIO_u8PORTC:
                SET_BIT(PORTC, Copy_u8Pin);
    4ea6:	a5 e3       	ldi	r26, 0x35	; 53
    4ea8:	b0 e0       	ldi	r27, 0x00	; 0
    4eaa:	e5 e3       	ldi	r30, 0x35	; 53
    4eac:	f0 e0       	ldi	r31, 0x00	; 0
    4eae:	80 81       	ld	r24, Z
    4eb0:	48 2f       	mov	r20, r24
    4eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb4:	28 2f       	mov	r18, r24
    4eb6:	30 e0       	ldi	r19, 0x00	; 0
    4eb8:	81 e0       	ldi	r24, 0x01	; 1
    4eba:	90 e0       	ldi	r25, 0x00	; 0
    4ebc:	02 2e       	mov	r0, r18
    4ebe:	02 c0       	rjmp	.+4      	; 0x4ec4 <DIO_u8SetPinValue+0xee>
    4ec0:	88 0f       	add	r24, r24
    4ec2:	99 1f       	adc	r25, r25
    4ec4:	0a 94       	dec	r0
    4ec6:	e2 f7       	brpl	.-8      	; 0x4ec0 <DIO_u8SetPinValue+0xea>
    4ec8:	84 2b       	or	r24, r20
    4eca:	8c 93       	st	X, r24
    4ecc:	87 c0       	rjmp	.+270    	; 0x4fdc <DIO_u8SetPinValue+0x206>
                break;
            case DIO_u8PORTD:
                SET_BIT(PORTD, Copy_u8Pin);
    4ece:	a2 e3       	ldi	r26, 0x32	; 50
    4ed0:	b0 e0       	ldi	r27, 0x00	; 0
    4ed2:	e2 e3       	ldi	r30, 0x32	; 50
    4ed4:	f0 e0       	ldi	r31, 0x00	; 0
    4ed6:	80 81       	ld	r24, Z
    4ed8:	48 2f       	mov	r20, r24
    4eda:	8a 81       	ldd	r24, Y+2	; 0x02
    4edc:	28 2f       	mov	r18, r24
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	81 e0       	ldi	r24, 0x01	; 1
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	02 2e       	mov	r0, r18
    4ee6:	02 c0       	rjmp	.+4      	; 0x4eec <DIO_u8SetPinValue+0x116>
    4ee8:	88 0f       	add	r24, r24
    4eea:	99 1f       	adc	r25, r25
    4eec:	0a 94       	dec	r0
    4eee:	e2 f7       	brpl	.-8      	; 0x4ee8 <DIO_u8SetPinValue+0x112>
    4ef0:	84 2b       	or	r24, r20
    4ef2:	8c 93       	st	X, r24
    4ef4:	73 c0       	rjmp	.+230    	; 0x4fdc <DIO_u8SetPinValue+0x206>
                break;
        }
    else
        switch (Copy_u8Port) {
    4ef6:	89 81       	ldd	r24, Y+1	; 0x01
    4ef8:	28 2f       	mov	r18, r24
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	3d 83       	std	Y+5, r19	; 0x05
    4efe:	2c 83       	std	Y+4, r18	; 0x04
    4f00:	8c 81       	ldd	r24, Y+4	; 0x04
    4f02:	9d 81       	ldd	r25, Y+5	; 0x05
    4f04:	81 30       	cpi	r24, 0x01	; 1
    4f06:	91 05       	cpc	r25, r1
    4f08:	59 f1       	breq	.+86     	; 0x4f60 <DIO_u8SetPinValue+0x18a>
    4f0a:	2c 81       	ldd	r18, Y+4	; 0x04
    4f0c:	3d 81       	ldd	r19, Y+5	; 0x05
    4f0e:	22 30       	cpi	r18, 0x02	; 2
    4f10:	31 05       	cpc	r19, r1
    4f12:	2c f4       	brge	.+10     	; 0x4f1e <DIO_u8SetPinValue+0x148>
    4f14:	8c 81       	ldd	r24, Y+4	; 0x04
    4f16:	9d 81       	ldd	r25, Y+5	; 0x05
    4f18:	00 97       	sbiw	r24, 0x00	; 0
    4f1a:	69 f0       	breq	.+26     	; 0x4f36 <DIO_u8SetPinValue+0x160>
    4f1c:	5f c0       	rjmp	.+190    	; 0x4fdc <DIO_u8SetPinValue+0x206>
    4f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    4f20:	3d 81       	ldd	r19, Y+5	; 0x05
    4f22:	22 30       	cpi	r18, 0x02	; 2
    4f24:	31 05       	cpc	r19, r1
    4f26:	89 f1       	breq	.+98     	; 0x4f8a <DIO_u8SetPinValue+0x1b4>
    4f28:	8c 81       	ldd	r24, Y+4	; 0x04
    4f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    4f2c:	83 30       	cpi	r24, 0x03	; 3
    4f2e:	91 05       	cpc	r25, r1
    4f30:	09 f4       	brne	.+2      	; 0x4f34 <DIO_u8SetPinValue+0x15e>
    4f32:	40 c0       	rjmp	.+128    	; 0x4fb4 <DIO_u8SetPinValue+0x1de>
    4f34:	53 c0       	rjmp	.+166    	; 0x4fdc <DIO_u8SetPinValue+0x206>
            case DIO_u8PORTA:
                CLR_BIT(PORTA, Copy_u8Pin);
    4f36:	ab e3       	ldi	r26, 0x3B	; 59
    4f38:	b0 e0       	ldi	r27, 0x00	; 0
    4f3a:	eb e3       	ldi	r30, 0x3B	; 59
    4f3c:	f0 e0       	ldi	r31, 0x00	; 0
    4f3e:	80 81       	ld	r24, Z
    4f40:	48 2f       	mov	r20, r24
    4f42:	8a 81       	ldd	r24, Y+2	; 0x02
    4f44:	28 2f       	mov	r18, r24
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	81 e0       	ldi	r24, 0x01	; 1
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	02 2e       	mov	r0, r18
    4f4e:	02 c0       	rjmp	.+4      	; 0x4f54 <DIO_u8SetPinValue+0x17e>
    4f50:	88 0f       	add	r24, r24
    4f52:	99 1f       	adc	r25, r25
    4f54:	0a 94       	dec	r0
    4f56:	e2 f7       	brpl	.-8      	; 0x4f50 <DIO_u8SetPinValue+0x17a>
    4f58:	80 95       	com	r24
    4f5a:	84 23       	and	r24, r20
    4f5c:	8c 93       	st	X, r24
    4f5e:	3e c0       	rjmp	.+124    	; 0x4fdc <DIO_u8SetPinValue+0x206>
                break;
            case DIO_u8PORTB:
                CLR_BIT(PORTB, Copy_u8Pin);
    4f60:	a8 e3       	ldi	r26, 0x38	; 56
    4f62:	b0 e0       	ldi	r27, 0x00	; 0
    4f64:	e8 e3       	ldi	r30, 0x38	; 56
    4f66:	f0 e0       	ldi	r31, 0x00	; 0
    4f68:	80 81       	ld	r24, Z
    4f6a:	48 2f       	mov	r20, r24
    4f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f6e:	28 2f       	mov	r18, r24
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	81 e0       	ldi	r24, 0x01	; 1
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	02 2e       	mov	r0, r18
    4f78:	02 c0       	rjmp	.+4      	; 0x4f7e <DIO_u8SetPinValue+0x1a8>
    4f7a:	88 0f       	add	r24, r24
    4f7c:	99 1f       	adc	r25, r25
    4f7e:	0a 94       	dec	r0
    4f80:	e2 f7       	brpl	.-8      	; 0x4f7a <DIO_u8SetPinValue+0x1a4>
    4f82:	80 95       	com	r24
    4f84:	84 23       	and	r24, r20
    4f86:	8c 93       	st	X, r24
    4f88:	29 c0       	rjmp	.+82     	; 0x4fdc <DIO_u8SetPinValue+0x206>
                break;
            case DIO_u8PORTC:
                CLR_BIT(PORTC, Copy_u8Pin);
    4f8a:	a5 e3       	ldi	r26, 0x35	; 53
    4f8c:	b0 e0       	ldi	r27, 0x00	; 0
    4f8e:	e5 e3       	ldi	r30, 0x35	; 53
    4f90:	f0 e0       	ldi	r31, 0x00	; 0
    4f92:	80 81       	ld	r24, Z
    4f94:	48 2f       	mov	r20, r24
    4f96:	8a 81       	ldd	r24, Y+2	; 0x02
    4f98:	28 2f       	mov	r18, r24
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	02 2e       	mov	r0, r18
    4fa2:	02 c0       	rjmp	.+4      	; 0x4fa8 <DIO_u8SetPinValue+0x1d2>
    4fa4:	88 0f       	add	r24, r24
    4fa6:	99 1f       	adc	r25, r25
    4fa8:	0a 94       	dec	r0
    4faa:	e2 f7       	brpl	.-8      	; 0x4fa4 <DIO_u8SetPinValue+0x1ce>
    4fac:	80 95       	com	r24
    4fae:	84 23       	and	r24, r20
    4fb0:	8c 93       	st	X, r24
    4fb2:	14 c0       	rjmp	.+40     	; 0x4fdc <DIO_u8SetPinValue+0x206>
                break;
            case DIO_u8PORTD:
                CLR_BIT(PORTD, Copy_u8Pin);
    4fb4:	a2 e3       	ldi	r26, 0x32	; 50
    4fb6:	b0 e0       	ldi	r27, 0x00	; 0
    4fb8:	e2 e3       	ldi	r30, 0x32	; 50
    4fba:	f0 e0       	ldi	r31, 0x00	; 0
    4fbc:	80 81       	ld	r24, Z
    4fbe:	48 2f       	mov	r20, r24
    4fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    4fc2:	28 2f       	mov	r18, r24
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	02 2e       	mov	r0, r18
    4fcc:	02 c0       	rjmp	.+4      	; 0x4fd2 <DIO_u8SetPinValue+0x1fc>
    4fce:	88 0f       	add	r24, r24
    4fd0:	99 1f       	adc	r25, r25
    4fd2:	0a 94       	dec	r0
    4fd4:	e2 f7       	brpl	.-8      	; 0x4fce <DIO_u8SetPinValue+0x1f8>
    4fd6:	80 95       	com	r24
    4fd8:	84 23       	and	r24, r20
    4fda:	8c 93       	st	X, r24
                break;
        }

    return 0;
    4fdc:	18 86       	std	Y+8, r1	; 0x08
    4fde:	88 85       	ldd	r24, Y+8	; 0x08
}
    4fe0:	28 96       	adiw	r28, 0x08	; 8
    4fe2:	0f b6       	in	r0, 0x3f	; 63
    4fe4:	f8 94       	cli
    4fe6:	de bf       	out	0x3e, r29	; 62
    4fe8:	0f be       	out	0x3f, r0	; 63
    4fea:	cd bf       	out	0x3d, r28	; 61
    4fec:	cf 91       	pop	r28
    4fee:	df 91       	pop	r29
    4ff0:	08 95       	ret

00004ff2 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value) {
    4ff2:	df 93       	push	r29
    4ff4:	cf 93       	push	r28
    4ff6:	00 d0       	rcall	.+0      	; 0x4ff8 <DIO_u8SetPortValue+0x6>
    4ff8:	00 d0       	rcall	.+0      	; 0x4ffa <DIO_u8SetPortValue+0x8>
    4ffa:	0f 92       	push	r0
    4ffc:	cd b7       	in	r28, 0x3d	; 61
    4ffe:	de b7       	in	r29, 0x3e	; 62
    5000:	89 83       	std	Y+1, r24	; 0x01
    5002:	6a 83       	std	Y+2, r22	; 0x02
    if (portChecker(Copy_u8Port) )
    5004:	89 81       	ldd	r24, Y+1	; 0x01
    5006:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <portChecker>
    500a:	88 23       	and	r24, r24
    500c:	19 f0       	breq	.+6      	; 0x5014 <DIO_u8SetPortValue+0x22>
        return 1;
    500e:	21 e0       	ldi	r18, 0x01	; 1
    5010:	2d 83       	std	Y+5, r18	; 0x05
    5012:	33 c0       	rjmp	.+102    	; 0x507a <DIO_u8SetPortValue+0x88>

    switch (Copy_u8Port) {
    5014:	89 81       	ldd	r24, Y+1	; 0x01
    5016:	28 2f       	mov	r18, r24
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	3c 83       	std	Y+4, r19	; 0x04
    501c:	2b 83       	std	Y+3, r18	; 0x03
    501e:	8b 81       	ldd	r24, Y+3	; 0x03
    5020:	9c 81       	ldd	r25, Y+4	; 0x04
    5022:	81 30       	cpi	r24, 0x01	; 1
    5024:	91 05       	cpc	r25, r1
    5026:	d1 f0       	breq	.+52     	; 0x505c <DIO_u8SetPortValue+0x6a>
    5028:	2b 81       	ldd	r18, Y+3	; 0x03
    502a:	3c 81       	ldd	r19, Y+4	; 0x04
    502c:	22 30       	cpi	r18, 0x02	; 2
    502e:	31 05       	cpc	r19, r1
    5030:	2c f4       	brge	.+10     	; 0x503c <DIO_u8SetPortValue+0x4a>
    5032:	8b 81       	ldd	r24, Y+3	; 0x03
    5034:	9c 81       	ldd	r25, Y+4	; 0x04
    5036:	00 97       	sbiw	r24, 0x00	; 0
    5038:	61 f0       	breq	.+24     	; 0x5052 <DIO_u8SetPortValue+0x60>
    503a:	1e c0       	rjmp	.+60     	; 0x5078 <DIO_u8SetPortValue+0x86>
    503c:	2b 81       	ldd	r18, Y+3	; 0x03
    503e:	3c 81       	ldd	r19, Y+4	; 0x04
    5040:	22 30       	cpi	r18, 0x02	; 2
    5042:	31 05       	cpc	r19, r1
    5044:	81 f0       	breq	.+32     	; 0x5066 <DIO_u8SetPortValue+0x74>
    5046:	8b 81       	ldd	r24, Y+3	; 0x03
    5048:	9c 81       	ldd	r25, Y+4	; 0x04
    504a:	83 30       	cpi	r24, 0x03	; 3
    504c:	91 05       	cpc	r25, r1
    504e:	81 f0       	breq	.+32     	; 0x5070 <DIO_u8SetPortValue+0x7e>
    5050:	13 c0       	rjmp	.+38     	; 0x5078 <DIO_u8SetPortValue+0x86>
        case DIO_u8PORTA:
            PORTA = Copy_u8Value;
    5052:	eb e3       	ldi	r30, 0x3B	; 59
    5054:	f0 e0       	ldi	r31, 0x00	; 0
    5056:	8a 81       	ldd	r24, Y+2	; 0x02
    5058:	80 83       	st	Z, r24
    505a:	0e c0       	rjmp	.+28     	; 0x5078 <DIO_u8SetPortValue+0x86>
            break;
        case DIO_u8PORTB:
            PORTB = Copy_u8Value;
    505c:	e8 e3       	ldi	r30, 0x38	; 56
    505e:	f0 e0       	ldi	r31, 0x00	; 0
    5060:	8a 81       	ldd	r24, Y+2	; 0x02
    5062:	80 83       	st	Z, r24
    5064:	09 c0       	rjmp	.+18     	; 0x5078 <DIO_u8SetPortValue+0x86>
            break;
        case DIO_u8PORTC:
            PORTC = Copy_u8Value;
    5066:	e5 e3       	ldi	r30, 0x35	; 53
    5068:	f0 e0       	ldi	r31, 0x00	; 0
    506a:	8a 81       	ldd	r24, Y+2	; 0x02
    506c:	80 83       	st	Z, r24
    506e:	04 c0       	rjmp	.+8      	; 0x5078 <DIO_u8SetPortValue+0x86>
            break;
        case DIO_u8PORTD:
            PORTD = Copy_u8Value;
    5070:	e2 e3       	ldi	r30, 0x32	; 50
    5072:	f0 e0       	ldi	r31, 0x00	; 0
    5074:	8a 81       	ldd	r24, Y+2	; 0x02
    5076:	80 83       	st	Z, r24
            break;
    }
    return 0;
    5078:	1d 82       	std	Y+5, r1	; 0x05
    507a:	8d 81       	ldd	r24, Y+5	; 0x05

}
    507c:	0f 90       	pop	r0
    507e:	0f 90       	pop	r0
    5080:	0f 90       	pop	r0
    5082:	0f 90       	pop	r0
    5084:	0f 90       	pop	r0
    5086:	cf 91       	pop	r28
    5088:	df 91       	pop	r29
    508a:	08 95       	ret

0000508c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, pu8 Copy_pu8Value) {
    508c:	df 93       	push	r29
    508e:	cf 93       	push	r28
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
    5094:	27 97       	sbiw	r28, 0x07	; 7
    5096:	0f b6       	in	r0, 0x3f	; 63
    5098:	f8 94       	cli
    509a:	de bf       	out	0x3e, r29	; 62
    509c:	0f be       	out	0x3f, r0	; 63
    509e:	cd bf       	out	0x3d, r28	; 61
    50a0:	89 83       	std	Y+1, r24	; 0x01
    50a2:	6a 83       	std	Y+2, r22	; 0x02
    50a4:	5c 83       	std	Y+4, r21	; 0x04
    50a6:	4b 83       	std	Y+3, r20	; 0x03
    if (portChecker(
    50a8:	89 81       	ldd	r24, Y+1	; 0x01
    50aa:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <portChecker>
    50ae:	88 23       	and	r24, r24
    50b0:	49 f4       	brne	.+18     	; 0x50c4 <DIO_u8GetPinValue+0x38>
    50b2:	8a 81       	ldd	r24, Y+2	; 0x02
    50b4:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <pinChecker>
    50b8:	88 23       	and	r24, r24
    50ba:	21 f4       	brne	.+8      	; 0x50c4 <DIO_u8GetPinValue+0x38>
    50bc:	8b 81       	ldd	r24, Y+3	; 0x03
    50be:	9c 81       	ldd	r25, Y+4	; 0x04
    50c0:	00 97       	sbiw	r24, 0x00	; 0
    50c2:	19 f4       	brne	.+6      	; 0x50ca <DIO_u8GetPinValue+0x3e>
            Copy_u8Port) || pinChecker(Copy_u8Pin) || Copy_pu8Value == NULL)
        return 1;
    50c4:	21 e0       	ldi	r18, 0x01	; 1
    50c6:	2f 83       	std	Y+7, r18	; 0x07
    50c8:	71 c0       	rjmp	.+226    	; 0x51ac <DIO_u8GetPinValue+0x120>
    switch (Copy_u8Port) {
    50ca:	89 81       	ldd	r24, Y+1	; 0x01
    50cc:	48 2f       	mov	r20, r24
    50ce:	50 e0       	ldi	r21, 0x00	; 0
    50d0:	5e 83       	std	Y+6, r21	; 0x06
    50d2:	4d 83       	std	Y+5, r20	; 0x05
    50d4:	8d 81       	ldd	r24, Y+5	; 0x05
    50d6:	9e 81       	ldd	r25, Y+6	; 0x06
    50d8:	81 30       	cpi	r24, 0x01	; 1
    50da:	91 05       	cpc	r25, r1
    50dc:	59 f1       	breq	.+86     	; 0x5134 <DIO_u8GetPinValue+0xa8>
    50de:	2d 81       	ldd	r18, Y+5	; 0x05
    50e0:	3e 81       	ldd	r19, Y+6	; 0x06
    50e2:	22 30       	cpi	r18, 0x02	; 2
    50e4:	31 05       	cpc	r19, r1
    50e6:	34 f4       	brge	.+12     	; 0x50f4 <DIO_u8GetPinValue+0x68>
    50e8:	4d 81       	ldd	r20, Y+5	; 0x05
    50ea:	5e 81       	ldd	r21, Y+6	; 0x06
    50ec:	41 15       	cp	r20, r1
    50ee:	51 05       	cpc	r21, r1
    50f0:	69 f0       	breq	.+26     	; 0x510c <DIO_u8GetPinValue+0x80>
    50f2:	5b c0       	rjmp	.+182    	; 0x51aa <DIO_u8GetPinValue+0x11e>
    50f4:	8d 81       	ldd	r24, Y+5	; 0x05
    50f6:	9e 81       	ldd	r25, Y+6	; 0x06
    50f8:	82 30       	cpi	r24, 0x02	; 2
    50fa:	91 05       	cpc	r25, r1
    50fc:	79 f1       	breq	.+94     	; 0x515c <DIO_u8GetPinValue+0xd0>
    50fe:	2d 81       	ldd	r18, Y+5	; 0x05
    5100:	3e 81       	ldd	r19, Y+6	; 0x06
    5102:	23 30       	cpi	r18, 0x03	; 3
    5104:	31 05       	cpc	r19, r1
    5106:	09 f4       	brne	.+2      	; 0x510a <DIO_u8GetPinValue+0x7e>
    5108:	3d c0       	rjmp	.+122    	; 0x5184 <DIO_u8GetPinValue+0xf8>
    510a:	4f c0       	rjmp	.+158    	; 0x51aa <DIO_u8GetPinValue+0x11e>
        case DIO_u8PORTA:
            *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin);
    510c:	e9 e3       	ldi	r30, 0x39	; 57
    510e:	f0 e0       	ldi	r31, 0x00	; 0
    5110:	80 81       	ld	r24, Z
    5112:	28 2f       	mov	r18, r24
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	8a 81       	ldd	r24, Y+2	; 0x02
    5118:	88 2f       	mov	r24, r24
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	a9 01       	movw	r20, r18
    511e:	02 c0       	rjmp	.+4      	; 0x5124 <DIO_u8GetPinValue+0x98>
    5120:	55 95       	asr	r21
    5122:	47 95       	ror	r20
    5124:	8a 95       	dec	r24
    5126:	e2 f7       	brpl	.-8      	; 0x5120 <DIO_u8GetPinValue+0x94>
    5128:	ca 01       	movw	r24, r20
    512a:	81 70       	andi	r24, 0x01	; 1
    512c:	eb 81       	ldd	r30, Y+3	; 0x03
    512e:	fc 81       	ldd	r31, Y+4	; 0x04
    5130:	80 83       	st	Z, r24
    5132:	3b c0       	rjmp	.+118    	; 0x51aa <DIO_u8GetPinValue+0x11e>
            break;
        case DIO_u8PORTB:
            *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin);
    5134:	e6 e3       	ldi	r30, 0x36	; 54
    5136:	f0 e0       	ldi	r31, 0x00	; 0
    5138:	80 81       	ld	r24, Z
    513a:	28 2f       	mov	r18, r24
    513c:	30 e0       	ldi	r19, 0x00	; 0
    513e:	8a 81       	ldd	r24, Y+2	; 0x02
    5140:	88 2f       	mov	r24, r24
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	a9 01       	movw	r20, r18
    5146:	02 c0       	rjmp	.+4      	; 0x514c <DIO_u8GetPinValue+0xc0>
    5148:	55 95       	asr	r21
    514a:	47 95       	ror	r20
    514c:	8a 95       	dec	r24
    514e:	e2 f7       	brpl	.-8      	; 0x5148 <DIO_u8GetPinValue+0xbc>
    5150:	ca 01       	movw	r24, r20
    5152:	81 70       	andi	r24, 0x01	; 1
    5154:	eb 81       	ldd	r30, Y+3	; 0x03
    5156:	fc 81       	ldd	r31, Y+4	; 0x04
    5158:	80 83       	st	Z, r24
    515a:	27 c0       	rjmp	.+78     	; 0x51aa <DIO_u8GetPinValue+0x11e>
            break;
        case DIO_u8PORTC:
            *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin);
    515c:	e3 e3       	ldi	r30, 0x33	; 51
    515e:	f0 e0       	ldi	r31, 0x00	; 0
    5160:	80 81       	ld	r24, Z
    5162:	28 2f       	mov	r18, r24
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	8a 81       	ldd	r24, Y+2	; 0x02
    5168:	88 2f       	mov	r24, r24
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	a9 01       	movw	r20, r18
    516e:	02 c0       	rjmp	.+4      	; 0x5174 <DIO_u8GetPinValue+0xe8>
    5170:	55 95       	asr	r21
    5172:	47 95       	ror	r20
    5174:	8a 95       	dec	r24
    5176:	e2 f7       	brpl	.-8      	; 0x5170 <DIO_u8GetPinValue+0xe4>
    5178:	ca 01       	movw	r24, r20
    517a:	81 70       	andi	r24, 0x01	; 1
    517c:	eb 81       	ldd	r30, Y+3	; 0x03
    517e:	fc 81       	ldd	r31, Y+4	; 0x04
    5180:	80 83       	st	Z, r24
    5182:	13 c0       	rjmp	.+38     	; 0x51aa <DIO_u8GetPinValue+0x11e>
            break;
        case DIO_u8PORTD:
            *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin);
    5184:	e0 e3       	ldi	r30, 0x30	; 48
    5186:	f0 e0       	ldi	r31, 0x00	; 0
    5188:	80 81       	ld	r24, Z
    518a:	28 2f       	mov	r18, r24
    518c:	30 e0       	ldi	r19, 0x00	; 0
    518e:	8a 81       	ldd	r24, Y+2	; 0x02
    5190:	88 2f       	mov	r24, r24
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	a9 01       	movw	r20, r18
    5196:	02 c0       	rjmp	.+4      	; 0x519c <DIO_u8GetPinValue+0x110>
    5198:	55 95       	asr	r21
    519a:	47 95       	ror	r20
    519c:	8a 95       	dec	r24
    519e:	e2 f7       	brpl	.-8      	; 0x5198 <DIO_u8GetPinValue+0x10c>
    51a0:	ca 01       	movw	r24, r20
    51a2:	81 70       	andi	r24, 0x01	; 1
    51a4:	eb 81       	ldd	r30, Y+3	; 0x03
    51a6:	fc 81       	ldd	r31, Y+4	; 0x04
    51a8:	80 83       	st	Z, r24
            break;
    }
    return 0;
    51aa:	1f 82       	std	Y+7, r1	; 0x07
    51ac:	8f 81       	ldd	r24, Y+7	; 0x07
}
    51ae:	27 96       	adiw	r28, 0x07	; 7
    51b0:	0f b6       	in	r0, 0x3f	; 63
    51b2:	f8 94       	cli
    51b4:	de bf       	out	0x3e, r29	; 62
    51b6:	0f be       	out	0x3f, r0	; 63
    51b8:	cd bf       	out	0x3d, r28	; 61
    51ba:	cf 91       	pop	r28
    51bc:	df 91       	pop	r29
    51be:	08 95       	ret

000051c0 <ADC_voidInit>:
static void(*ADC_pfNotification)(u32) = NULL;

/* ADC busy flag */
static u8 ADC_u8BusyFlag = NOT_BUSY;

void ADC_voidInit() {
    51c0:	df 93       	push	r29
    51c2:	cf 93       	push	r28
    51c4:	cd b7       	in	r28, 0x3d	; 61
    51c6:	de b7       	in	r29, 0x3e	; 62

    /* Voltage reference */
#if ADC_VREF == ADC_VREF_AVCC
    SET_BIT(ADMUX, ADMUX_REFS0);
    51c8:	a7 e2       	ldi	r26, 0x27	; 39
    51ca:	b0 e0       	ldi	r27, 0x00	; 0
    51cc:	e7 e2       	ldi	r30, 0x27	; 39
    51ce:	f0 e0       	ldi	r31, 0x00	; 0
    51d0:	80 81       	ld	r24, Z
    51d2:	80 64       	ori	r24, 0x40	; 64
    51d4:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADMUX_REFS1);
    51d6:	a7 e2       	ldi	r26, 0x27	; 39
    51d8:	b0 e0       	ldi	r27, 0x00	; 0
    51da:	e7 e2       	ldi	r30, 0x27	; 39
    51dc:	f0 e0       	ldi	r31, 0x00	; 0
    51de:	80 81       	ld	r24, Z
    51e0:	8f 77       	andi	r24, 0x7F	; 127
    51e2:	8c 93       	st	X, r24
    SET_BIT(ADMUX , ADMUX_REFS1);
#endif

    /* Mode */
#if ADC_MODE == ADC_SINGLE_MODE
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
    51e4:	a6 e2       	ldi	r26, 0x26	; 38
    51e6:	b0 e0       	ldi	r27, 0x00	; 0
    51e8:	e6 e2       	ldi	r30, 0x26	; 38
    51ea:	f0 e0       	ldi	r31, 0x00	; 0
    51ec:	80 81       	ld	r24, Z
    51ee:	8f 7d       	andi	r24, 0xDF	; 223
    51f0:	8c 93       	st	X, r24
    CLR_BIT(SFIOR, SFIOR_ADTS2);
#endif

    /* Resolution */
#if ADC_RESOLUTION == ACD_10_BIT_RES
    CLR_BIT(ADMUX, ADMUX_ADLAR);
    51f2:	a7 e2       	ldi	r26, 0x27	; 39
    51f4:	b0 e0       	ldi	r27, 0x00	; 0
    51f6:	e7 e2       	ldi	r30, 0x27	; 39
    51f8:	f0 e0       	ldi	r31, 0x00	; 0
    51fa:	80 81       	ld	r24, Z
    51fc:	8f 7d       	andi	r24, 0xDF	; 223
    51fe:	8c 93       	st	X, r24
#elif ADC_RESOLUTION == ACD_8_BIT_RES
    SET_BIT(ADMUX, ADMUX_ADLAR);
#endif

    /* Prescaler */
    ADCSRA &= 0b11111000;
    5200:	a6 e2       	ldi	r26, 0x26	; 38
    5202:	b0 e0       	ldi	r27, 0x00	; 0
    5204:	e6 e2       	ldi	r30, 0x26	; 38
    5206:	f0 e0       	ldi	r31, 0x00	; 0
    5208:	80 81       	ld	r24, Z
    520a:	88 7f       	andi	r24, 0xF8	; 248
    520c:	8c 93       	st	X, r24
    ADCSRA |= ADC_PRESCALER;
    520e:	a6 e2       	ldi	r26, 0x26	; 38
    5210:	b0 e0       	ldi	r27, 0x00	; 0
    5212:	e6 e2       	ldi	r30, 0x26	; 38
    5214:	f0 e0       	ldi	r31, 0x00	; 0
    5216:	80 81       	ld	r24, Z
    5218:	87 60       	ori	r24, 0x07	; 7
    521a:	8c 93       	st	X, r24

    /* Enable */
    ADC_voidEnable();
    521c:	0e 94 13 29 	call	0x5226	; 0x5226 <ADC_voidEnable>
}
    5220:	cf 91       	pop	r28
    5222:	df 91       	pop	r29
    5224:	08 95       	ret

00005226 <ADC_voidEnable>:

void ADC_voidEnable() {
    5226:	df 93       	push	r29
    5228:	cf 93       	push	r28
    522a:	cd b7       	in	r28, 0x3d	; 61
    522c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADCSRA_ADEN);
    522e:	a6 e2       	ldi	r26, 0x26	; 38
    5230:	b0 e0       	ldi	r27, 0x00	; 0
    5232:	e6 e2       	ldi	r30, 0x26	; 38
    5234:	f0 e0       	ldi	r31, 0x00	; 0
    5236:	80 81       	ld	r24, Z
    5238:	80 68       	ori	r24, 0x80	; 128
    523a:	8c 93       	st	X, r24
}
    523c:	cf 91       	pop	r28
    523e:	df 91       	pop	r29
    5240:	08 95       	ret

00005242 <ADC_voidDisable>:

void ADC_voidDisable() {
    5242:	df 93       	push	r29
    5244:	cf 93       	push	r28
    5246:	cd b7       	in	r28, 0x3d	; 61
    5248:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADCSRA_ADEN);
    524a:	a6 e2       	ldi	r26, 0x26	; 38
    524c:	b0 e0       	ldi	r27, 0x00	; 0
    524e:	e6 e2       	ldi	r30, 0x26	; 38
    5250:	f0 e0       	ldi	r31, 0x00	; 0
    5252:	80 81       	ld	r24, Z
    5254:	8f 77       	andi	r24, 0x7F	; 127
    5256:	8c 93       	st	X, r24
}
    5258:	cf 91       	pop	r28
    525a:	df 91       	pop	r29
    525c:	08 95       	ret

0000525e <ADC_voidEnableInterrupt>:

void ADC_voidEnableInterrupt() {
    525e:	df 93       	push	r29
    5260:	cf 93       	push	r28
    5262:	cd b7       	in	r28, 0x3d	; 61
    5264:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADCSRA_ADIE);
    5266:	a6 e2       	ldi	r26, 0x26	; 38
    5268:	b0 e0       	ldi	r27, 0x00	; 0
    526a:	e6 e2       	ldi	r30, 0x26	; 38
    526c:	f0 e0       	ldi	r31, 0x00	; 0
    526e:	80 81       	ld	r24, Z
    5270:	88 60       	ori	r24, 0x08	; 8
    5272:	8c 93       	st	X, r24
}
    5274:	cf 91       	pop	r28
    5276:	df 91       	pop	r29
    5278:	08 95       	ret

0000527a <ADC_voidDisableInterrupt>:

void ADC_voidDisableInterrupt() {
    527a:	df 93       	push	r29
    527c:	cf 93       	push	r28
    527e:	cd b7       	in	r28, 0x3d	; 61
    5280:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
    5282:	a6 e2       	ldi	r26, 0x26	; 38
    5284:	b0 e0       	ldi	r27, 0x00	; 0
    5286:	e6 e2       	ldi	r30, 0x26	; 38
    5288:	f0 e0       	ldi	r31, 0x00	; 0
    528a:	80 81       	ld	r24, Z
    528c:	87 7f       	andi	r24, 0xF7	; 247
    528e:	8c 93       	st	X, r24
}
    5290:	cf 91       	pop	r28
    5292:	df 91       	pop	r29
    5294:	08 95       	ret

00005296 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 Copy_u8ReadChannel) {
    5296:	df 93       	push	r29
    5298:	cf 93       	push	r28
    529a:	0f 92       	push	r0
    529c:	cd b7       	in	r28, 0x3d	; 61
    529e:	de b7       	in	r29, 0x3e	; 62
    52a0:	89 83       	std	Y+1, r24	; 0x01
    ADMUX &= 0b11100000;
    52a2:	a7 e2       	ldi	r26, 0x27	; 39
    52a4:	b0 e0       	ldi	r27, 0x00	; 0
    52a6:	e7 e2       	ldi	r30, 0x27	; 39
    52a8:	f0 e0       	ldi	r31, 0x00	; 0
    52aa:	80 81       	ld	r24, Z
    52ac:	80 7e       	andi	r24, 0xE0	; 224
    52ae:	8c 93       	st	X, r24
    ADMUX |= Copy_u8ReadChannel;
    52b0:	a7 e2       	ldi	r26, 0x27	; 39
    52b2:	b0 e0       	ldi	r27, 0x00	; 0
    52b4:	e7 e2       	ldi	r30, 0x27	; 39
    52b6:	f0 e0       	ldi	r31, 0x00	; 0
    52b8:	90 81       	ld	r25, Z
    52ba:	89 81       	ldd	r24, Y+1	; 0x01
    52bc:	89 2b       	or	r24, r25
    52be:	8c 93       	st	X, r24

    SET_BIT(ADCSRA, ADCSRA_ADSC);
    52c0:	a6 e2       	ldi	r26, 0x26	; 38
    52c2:	b0 e0       	ldi	r27, 0x00	; 0
    52c4:	e6 e2       	ldi	r30, 0x26	; 38
    52c6:	f0 e0       	ldi	r31, 0x00	; 0
    52c8:	80 81       	ld	r24, Z
    52ca:	80 64       	ori	r24, 0x40	; 64
    52cc:	8c 93       	st	X, r24
}
    52ce:	0f 90       	pop	r0
    52d0:	cf 91       	pop	r28
    52d2:	df 91       	pop	r29
    52d4:	08 95       	ret

000052d6 <ADC_u16ReadSynchronous>:

u8 ADC_u16ReadSynchronous(u8 Copy_u8ReadChannel,  u32 * Copy_pu16ReadValue) {
    52d6:	df 93       	push	r29
    52d8:	cf 93       	push	r28
    52da:	cd b7       	in	r28, 0x3d	; 61
    52dc:	de b7       	in	r29, 0x3e	; 62
    52de:	2a 97       	sbiw	r28, 0x0a	; 10
    52e0:	0f b6       	in	r0, 0x3f	; 63
    52e2:	f8 94       	cli
    52e4:	de bf       	out	0x3e, r29	; 62
    52e6:	0f be       	out	0x3f, r0	; 63
    52e8:	cd bf       	out	0x3d, r28	; 61
    52ea:	8e 83       	std	Y+6, r24	; 0x06
    52ec:	78 87       	std	Y+8, r23	; 0x08
    52ee:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8ErrorState = OK;
    52f0:	1d 82       	std	Y+5, r1	; 0x05
    if(Copy_u8ReadChannel > ADC_CH7 || Copy_pu16ReadValue == NULL){
    52f2:	8e 81       	ldd	r24, Y+6	; 0x06
    52f4:	88 30       	cpi	r24, 0x08	; 8
    52f6:	20 f4       	brcc	.+8      	; 0x5300 <ADC_u16ReadSynchronous+0x2a>
    52f8:	8f 81       	ldd	r24, Y+7	; 0x07
    52fa:	98 85       	ldd	r25, Y+8	; 0x08
    52fc:	00 97       	sbiw	r24, 0x00	; 0
    52fe:	29 f4       	brne	.+10     	; 0x530a <ADC_u16ReadSynchronous+0x34>
        Local_u8ErrorState = NOT_OK;
    5300:	81 e0       	ldi	r24, 0x01	; 1
    5302:	8d 83       	std	Y+5, r24	; 0x05
        return Local_u8ErrorState;
    5304:	8d 81       	ldd	r24, Y+5	; 0x05
    5306:	8a 87       	std	Y+10, r24	; 0x0a
    5308:	76 c0       	rjmp	.+236    	; 0x53f6 <ADC_u16ReadSynchronous+0x120>
    }

    ADC_voidStartConversion(Copy_u8ReadChannel);
    530a:	8e 81       	ldd	r24, Y+6	; 0x06
    530c:	0e 94 4b 29 	call	0x5296	; 0x5296 <ADC_voidStartConversion>
    /* Polling until the conversion complete */
    u32 Local_u8Timer = 5000;
    5310:	88 e8       	ldi	r24, 0x88	; 136
    5312:	93 e1       	ldi	r25, 0x13	; 19
    5314:	a0 e0       	ldi	r26, 0x00	; 0
    5316:	b0 e0       	ldi	r27, 0x00	; 0
    5318:	89 83       	std	Y+1, r24	; 0x01
    531a:	9a 83       	std	Y+2, r25	; 0x02
    531c:	ab 83       	std	Y+3, r26	; 0x03
    531e:	bc 83       	std	Y+4, r27	; 0x04
    while (!GET_BIT(ADCSRA, ADCSRA_ADIF) && Local_u8Timer--);
    5320:	e6 e2       	ldi	r30, 0x26	; 38
    5322:	f0 e0       	ldi	r31, 0x00	; 0
    5324:	80 81       	ld	r24, Z
    5326:	82 95       	swap	r24
    5328:	8f 70       	andi	r24, 0x0F	; 15
    532a:	88 2f       	mov	r24, r24
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	81 70       	andi	r24, 0x01	; 1
    5330:	90 70       	andi	r25, 0x00	; 0
    5332:	00 97       	sbiw	r24, 0x00	; 0
    5334:	c9 f4       	brne	.+50     	; 0x5368 <ADC_u16ReadSynchronous+0x92>
    5336:	19 86       	std	Y+9, r1	; 0x09
    5338:	89 81       	ldd	r24, Y+1	; 0x01
    533a:	9a 81       	ldd	r25, Y+2	; 0x02
    533c:	ab 81       	ldd	r26, Y+3	; 0x03
    533e:	bc 81       	ldd	r27, Y+4	; 0x04
    5340:	00 97       	sbiw	r24, 0x00	; 0
    5342:	a1 05       	cpc	r26, r1
    5344:	b1 05       	cpc	r27, r1
    5346:	11 f0       	breq	.+4      	; 0x534c <ADC_u16ReadSynchronous+0x76>
    5348:	81 e0       	ldi	r24, 0x01	; 1
    534a:	89 87       	std	Y+9, r24	; 0x09
    534c:	89 81       	ldd	r24, Y+1	; 0x01
    534e:	9a 81       	ldd	r25, Y+2	; 0x02
    5350:	ab 81       	ldd	r26, Y+3	; 0x03
    5352:	bc 81       	ldd	r27, Y+4	; 0x04
    5354:	01 97       	sbiw	r24, 0x01	; 1
    5356:	a1 09       	sbc	r26, r1
    5358:	b1 09       	sbc	r27, r1
    535a:	89 83       	std	Y+1, r24	; 0x01
    535c:	9a 83       	std	Y+2, r25	; 0x02
    535e:	ab 83       	std	Y+3, r26	; 0x03
    5360:	bc 83       	std	Y+4, r27	; 0x04
    5362:	89 85       	ldd	r24, Y+9	; 0x09
    5364:	88 23       	and	r24, r24
    5366:	e1 f6       	brne	.-72     	; 0x5320 <ADC_u16ReadSynchronous+0x4a>

    if (Local_u8Timer > 0 || GET_BIT(ADCSRA, ADCSRA_ADIF)) {
    5368:	89 81       	ldd	r24, Y+1	; 0x01
    536a:	9a 81       	ldd	r25, Y+2	; 0x02
    536c:	ab 81       	ldd	r26, Y+3	; 0x03
    536e:	bc 81       	ldd	r27, Y+4	; 0x04
    5370:	00 97       	sbiw	r24, 0x00	; 0
    5372:	a1 05       	cpc	r26, r1
    5374:	b1 05       	cpc	r27, r1
    5376:	59 f4       	brne	.+22     	; 0x538e <ADC_u16ReadSynchronous+0xb8>
    5378:	e6 e2       	ldi	r30, 0x26	; 38
    537a:	f0 e0       	ldi	r31, 0x00	; 0
    537c:	80 81       	ld	r24, Z
    537e:	82 95       	swap	r24
    5380:	8f 70       	andi	r24, 0x0F	; 15
    5382:	88 2f       	mov	r24, r24
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	81 70       	andi	r24, 0x01	; 1
    5388:	90 70       	andi	r25, 0x00	; 0
    538a:	88 23       	and	r24, r24
    538c:	81 f1       	breq	.+96     	; 0x53ee <ADC_u16ReadSynchronous+0x118>
        /* Clearing the interrupt flag */
        SET_BIT(ADCSRA, ADCSRA_ADIF);
    538e:	a6 e2       	ldi	r26, 0x26	; 38
    5390:	b0 e0       	ldi	r27, 0x00	; 0
    5392:	e6 e2       	ldi	r30, 0x26	; 38
    5394:	f0 e0       	ldi	r31, 0x00	; 0
    5396:	80 81       	ld	r24, Z
    5398:	80 61       	ori	r24, 0x10	; 16
    539a:	8c 93       	st	X, r24

#if ADC_RESOLUTION == ACD_10_BIT_RES
        *Copy_pu16ReadValue = ADCL;
    539c:	e4 e2       	ldi	r30, 0x24	; 36
    539e:	f0 e0       	ldi	r31, 0x00	; 0
    53a0:	80 81       	ld	r24, Z
    53a2:	88 2f       	mov	r24, r24
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	a0 e0       	ldi	r26, 0x00	; 0
    53a8:	b0 e0       	ldi	r27, 0x00	; 0
    53aa:	ef 81       	ldd	r30, Y+7	; 0x07
    53ac:	f8 85       	ldd	r31, Y+8	; 0x08
    53ae:	80 83       	st	Z, r24
    53b0:	91 83       	std	Z+1, r25	; 0x01
    53b2:	a2 83       	std	Z+2, r26	; 0x02
    53b4:	b3 83       	std	Z+3, r27	; 0x03
        *Copy_pu16ReadValue |= (ADCH << 8);
    53b6:	ef 81       	ldd	r30, Y+7	; 0x07
    53b8:	f8 85       	ldd	r31, Y+8	; 0x08
    53ba:	20 81       	ld	r18, Z
    53bc:	31 81       	ldd	r19, Z+1	; 0x01
    53be:	42 81       	ldd	r20, Z+2	; 0x02
    53c0:	53 81       	ldd	r21, Z+3	; 0x03
    53c2:	e5 e2       	ldi	r30, 0x25	; 37
    53c4:	f0 e0       	ldi	r31, 0x00	; 0
    53c6:	80 81       	ld	r24, Z
    53c8:	88 2f       	mov	r24, r24
    53ca:	90 e0       	ldi	r25, 0x00	; 0
    53cc:	98 2f       	mov	r25, r24
    53ce:	88 27       	eor	r24, r24
    53d0:	aa 27       	eor	r26, r26
    53d2:	97 fd       	sbrc	r25, 7
    53d4:	a0 95       	com	r26
    53d6:	ba 2f       	mov	r27, r26
    53d8:	82 2b       	or	r24, r18
    53da:	93 2b       	or	r25, r19
    53dc:	a4 2b       	or	r26, r20
    53de:	b5 2b       	or	r27, r21
    53e0:	ef 81       	ldd	r30, Y+7	; 0x07
    53e2:	f8 85       	ldd	r31, Y+8	; 0x08
    53e4:	80 83       	st	Z, r24
    53e6:	91 83       	std	Z+1, r25	; 0x01
    53e8:	a2 83       	std	Z+2, r26	; 0x02
    53ea:	b3 83       	std	Z+3, r27	; 0x03
    53ec:	02 c0       	rjmp	.+4      	; 0x53f2 <ADC_u16ReadSynchronous+0x11c>
#elif ADC_RESOLUTION == ACD_8_BIT_RES
        *Copy_pu16ReadValue = ADCH;
#endif
    }else{
        Local_u8ErrorState = NOT_OK;
    53ee:	81 e0       	ldi	r24, 0x01	; 1
    53f0:	8d 83       	std	Y+5, r24	; 0x05
    }
    return Local_u8ErrorState;
    53f2:	8d 81       	ldd	r24, Y+5	; 0x05
    53f4:	8a 87       	std	Y+10, r24	; 0x0a
    53f6:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    53f8:	2a 96       	adiw	r28, 0x0a	; 10
    53fa:	0f b6       	in	r0, 0x3f	; 63
    53fc:	f8 94       	cli
    53fe:	de bf       	out	0x3e, r29	; 62
    5400:	0f be       	out	0x3f, r0	; 63
    5402:	cd bf       	out	0x3d, r28	; 61
    5404:	cf 91       	pop	r28
    5406:	df 91       	pop	r29
    5408:	08 95       	ret

0000540a <ADC_u16ReadAsynchronous>:

u8 ADC_u16ReadAsynchronous(u8 Copy_u8ReadChannel , void(*Copy_pfNotification)(u32)) {
    540a:	df 93       	push	r29
    540c:	cf 93       	push	r28
    540e:	00 d0       	rcall	.+0      	; 0x5410 <ADC_u16ReadAsynchronous+0x6>
    5410:	00 d0       	rcall	.+0      	; 0x5412 <ADC_u16ReadAsynchronous+0x8>
    5412:	0f 92       	push	r0
    5414:	cd b7       	in	r28, 0x3d	; 61
    5416:	de b7       	in	r29, 0x3e	; 62
    5418:	8a 83       	std	Y+2, r24	; 0x02
    541a:	7c 83       	std	Y+4, r23	; 0x04
    541c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = OK;
    541e:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8ReadChannel > ADC_CH7 || Copy_pfNotification == NULL || ADC_u8BusyFlag == BUSY){
    5420:	8a 81       	ldd	r24, Y+2	; 0x02
    5422:	88 30       	cpi	r24, 0x08	; 8
    5424:	40 f4       	brcc	.+16     	; 0x5436 <ADC_u16ReadAsynchronous+0x2c>
    5426:	8b 81       	ldd	r24, Y+3	; 0x03
    5428:	9c 81       	ldd	r25, Y+4	; 0x04
    542a:	00 97       	sbiw	r24, 0x00	; 0
    542c:	21 f0       	breq	.+8      	; 0x5436 <ADC_u16ReadAsynchronous+0x2c>
    542e:	80 91 74 01 	lds	r24, 0x0174
    5432:	88 23       	and	r24, r24
    5434:	29 f4       	brne	.+10     	; 0x5440 <ADC_u16ReadAsynchronous+0x36>
        Local_u8ErrorState = NOT_OK;
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	89 83       	std	Y+1, r24	; 0x01
        return Local_u8ErrorState;
    543a:	89 81       	ldd	r24, Y+1	; 0x01
    543c:	8d 83       	std	Y+5, r24	; 0x05
    543e:	14 c0       	rjmp	.+40     	; 0x5468 <ADC_u16ReadAsynchronous+0x5e>
    }
    ADC_u8BusyFlag = BUSY;
    5440:	10 92 74 01 	sts	0x0174, r1
    ADC_pfNotification = Copy_pfNotification ;
    5444:	8b 81       	ldd	r24, Y+3	; 0x03
    5446:	9c 81       	ldd	r25, Y+4	; 0x04
    5448:	90 93 ab 01 	sts	0x01AB, r25
    544c:	80 93 aa 01 	sts	0x01AA, r24
    /* Enable ADC Interrupt */
    SET_BIT(ADCSRA,ADCSRA_ADIE);
    5450:	a6 e2       	ldi	r26, 0x26	; 38
    5452:	b0 e0       	ldi	r27, 0x00	; 0
    5454:	e6 e2       	ldi	r30, 0x26	; 38
    5456:	f0 e0       	ldi	r31, 0x00	; 0
    5458:	80 81       	ld	r24, Z
    545a:	88 60       	ori	r24, 0x08	; 8
    545c:	8c 93       	st	X, r24
    ADC_voidStartConversion(Copy_u8ReadChannel);
    545e:	8a 81       	ldd	r24, Y+2	; 0x02
    5460:	0e 94 4b 29 	call	0x5296	; 0x5296 <ADC_voidStartConversion>
    return Local_u8ErrorState;
    5464:	89 81       	ldd	r24, Y+1	; 0x01
    5466:	8d 83       	std	Y+5, r24	; 0x05
    5468:	8d 81       	ldd	r24, Y+5	; 0x05
}
    546a:	0f 90       	pop	r0
    546c:	0f 90       	pop	r0
    546e:	0f 90       	pop	r0
    5470:	0f 90       	pop	r0
    5472:	0f 90       	pop	r0
    5474:	cf 91       	pop	r28
    5476:	df 91       	pop	r29
    5478:	08 95       	ret

0000547a <__vector_16>:

void __vector_16(void)     __attribute__((signal));
void __vector_16(void)
{
    547a:	1f 92       	push	r1
    547c:	0f 92       	push	r0
    547e:	0f b6       	in	r0, 0x3f	; 63
    5480:	0f 92       	push	r0
    5482:	11 24       	eor	r1, r1
    5484:	2f 93       	push	r18
    5486:	3f 93       	push	r19
    5488:	4f 93       	push	r20
    548a:	5f 93       	push	r21
    548c:	6f 93       	push	r22
    548e:	7f 93       	push	r23
    5490:	8f 93       	push	r24
    5492:	9f 93       	push	r25
    5494:	af 93       	push	r26
    5496:	bf 93       	push	r27
    5498:	ef 93       	push	r30
    549a:	ff 93       	push	r31
    549c:	df 93       	push	r29
    549e:	cf 93       	push	r28
    54a0:	00 d0       	rcall	.+0      	; 0x54a2 <__vector_16+0x28>
    54a2:	00 d0       	rcall	.+0      	; 0x54a4 <__vector_16+0x2a>
    54a4:	cd b7       	in	r28, 0x3d	; 61
    54a6:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pfNotification != NULL)
    54a8:	80 91 aa 01 	lds	r24, 0x01AA
    54ac:	90 91 ab 01 	lds	r25, 0x01AB
    54b0:	00 97       	sbiw	r24, 0x00	; 0
    54b2:	c1 f1       	breq	.+112    	; 0x5524 <__vector_16+0xaa>
    {
        /* Clear Flag */
        ADC_u8BusyFlag = NOT_BUSY;
    54b4:	81 e0       	ldi	r24, 0x01	; 1
    54b6:	80 93 74 01 	sts	0x0174, r24
        /* Clear PIE of ADC */
        CLR_BIT(ADCSRA,ADCSRA_ADIE);
    54ba:	a6 e2       	ldi	r26, 0x26	; 38
    54bc:	b0 e0       	ldi	r27, 0x00	; 0
    54be:	e6 e2       	ldi	r30, 0x26	; 38
    54c0:	f0 e0       	ldi	r31, 0x00	; 0
    54c2:	80 81       	ld	r24, Z
    54c4:	87 7f       	andi	r24, 0xF7	; 247
    54c6:	8c 93       	st	X, r24

        u32 Local_u32ADCRead;
#if ADC_RESOLUTION == ACD_10_BIT_RES
        Local_u32ADCRead= ADCL;
    54c8:	e4 e2       	ldi	r30, 0x24	; 36
    54ca:	f0 e0       	ldi	r31, 0x00	; 0
    54cc:	80 81       	ld	r24, Z
    54ce:	88 2f       	mov	r24, r24
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	a0 e0       	ldi	r26, 0x00	; 0
    54d4:	b0 e0       	ldi	r27, 0x00	; 0
    54d6:	89 83       	std	Y+1, r24	; 0x01
    54d8:	9a 83       	std	Y+2, r25	; 0x02
    54da:	ab 83       	std	Y+3, r26	; 0x03
    54dc:	bc 83       	std	Y+4, r27	; 0x04
        Local_u32ADCRead |= (ADCH << 8);
    54de:	e5 e2       	ldi	r30, 0x25	; 37
    54e0:	f0 e0       	ldi	r31, 0x00	; 0
    54e2:	80 81       	ld	r24, Z
    54e4:	88 2f       	mov	r24, r24
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	98 2f       	mov	r25, r24
    54ea:	88 27       	eor	r24, r24
    54ec:	9c 01       	movw	r18, r24
    54ee:	44 27       	eor	r20, r20
    54f0:	37 fd       	sbrc	r19, 7
    54f2:	40 95       	com	r20
    54f4:	54 2f       	mov	r21, r20
    54f6:	89 81       	ldd	r24, Y+1	; 0x01
    54f8:	9a 81       	ldd	r25, Y+2	; 0x02
    54fa:	ab 81       	ldd	r26, Y+3	; 0x03
    54fc:	bc 81       	ldd	r27, Y+4	; 0x04
    54fe:	82 2b       	or	r24, r18
    5500:	93 2b       	or	r25, r19
    5502:	a4 2b       	or	r26, r20
    5504:	b5 2b       	or	r27, r21
    5506:	89 83       	std	Y+1, r24	; 0x01
    5508:	9a 83       	std	Y+2, r25	; 0x02
    550a:	ab 83       	std	Y+3, r26	; 0x03
    550c:	bc 83       	std	Y+4, r27	; 0x04
#elif ADC_RESOLUTION == ACD_8_BIT_RES
        Local_u32ADCRead = ADCH;
#endif

        /* Calling Notification function */
        ADC_pfNotification(Local_u32ADCRead);
    550e:	e0 91 aa 01 	lds	r30, 0x01AA
    5512:	f0 91 ab 01 	lds	r31, 0x01AB
    5516:	89 81       	ldd	r24, Y+1	; 0x01
    5518:	9a 81       	ldd	r25, Y+2	; 0x02
    551a:	ab 81       	ldd	r26, Y+3	; 0x03
    551c:	bc 81       	ldd	r27, Y+4	; 0x04
    551e:	bc 01       	movw	r22, r24
    5520:	cd 01       	movw	r24, r26
    5522:	09 95       	icall
    }
}
    5524:	0f 90       	pop	r0
    5526:	0f 90       	pop	r0
    5528:	0f 90       	pop	r0
    552a:	0f 90       	pop	r0
    552c:	cf 91       	pop	r28
    552e:	df 91       	pop	r29
    5530:	ff 91       	pop	r31
    5532:	ef 91       	pop	r30
    5534:	bf 91       	pop	r27
    5536:	af 91       	pop	r26
    5538:	9f 91       	pop	r25
    553a:	8f 91       	pop	r24
    553c:	7f 91       	pop	r23
    553e:	6f 91       	pop	r22
    5540:	5f 91       	pop	r21
    5542:	4f 91       	pop	r20
    5544:	3f 91       	pop	r19
    5546:	2f 91       	pop	r18
    5548:	0f 90       	pop	r0
    554a:	0f be       	out	0x3f, r0	; 63
    554c:	0f 90       	pop	r0
    554e:	1f 90       	pop	r1
    5550:	18 95       	reti

00005552 <STEPPER_voidRotateClockWise>:
#include "STEPPER_interface.h"
#include "STEPPER_register.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include <util/delay.h>

void STEPPER_voidRotateClockWise() {
    5552:	df 93       	push	r29
    5554:	cf 93       	push	r28
    5556:	cd b7       	in	r28, 0x3d	; 61
    5558:	de b7       	in	r29, 0x3e	; 62
    555a:	e8 97       	sbiw	r28, 0x38	; 56
    555c:	0f b6       	in	r0, 0x3f	; 63
    555e:	f8 94       	cli
    5560:	de bf       	out	0x3e, r29	; 62
    5562:	0f be       	out	0x3f, r0	; 63
    5564:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_BLUE, DIO_u8PIN_HIGH);
    5566:	82 e0       	ldi	r24, 0x02	; 2
    5568:	60 e0       	ldi	r22, 0x00	; 0
    556a:	41 e0       	ldi	r20, 0x01	; 1
    556c:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_PINK, DIO_u8PIN_LOW);
    5570:	82 e0       	ldi	r24, 0x02	; 2
    5572:	61 e0       	ldi	r22, 0x01	; 1
    5574:	40 e0       	ldi	r20, 0x00	; 0
    5576:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_ORANGE, DIO_u8PIN_LOW);
    557a:	82 e0       	ldi	r24, 0x02	; 2
    557c:	63 e0       	ldi	r22, 0x03	; 3
    557e:	40 e0       	ldi	r20, 0x00	; 0
    5580:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_YELLOW, DIO_u8PIN_LOW);
    5584:	82 e0       	ldi	r24, 0x02	; 2
    5586:	62 e0       	ldi	r22, 0x02	; 2
    5588:	40 e0       	ldi	r20, 0x00	; 0
    558a:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
    558e:	80 e0       	ldi	r24, 0x00	; 0
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	a0 e2       	ldi	r26, 0x20	; 32
    5594:	b1 e4       	ldi	r27, 0x41	; 65
    5596:	8d ab       	std	Y+53, r24	; 0x35
    5598:	9e ab       	std	Y+54, r25	; 0x36
    559a:	af ab       	std	Y+55, r26	; 0x37
    559c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    559e:	6d a9       	ldd	r22, Y+53	; 0x35
    55a0:	7e a9       	ldd	r23, Y+54	; 0x36
    55a2:	8f a9       	ldd	r24, Y+55	; 0x37
    55a4:	98 ad       	ldd	r25, Y+56	; 0x38
    55a6:	20 e0       	ldi	r18, 0x00	; 0
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	4a ef       	ldi	r20, 0xFA	; 250
    55ac:	54 e4       	ldi	r21, 0x44	; 68
    55ae:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    55b2:	dc 01       	movw	r26, r24
    55b4:	cb 01       	movw	r24, r22
    55b6:	89 ab       	std	Y+49, r24	; 0x31
    55b8:	9a ab       	std	Y+50, r25	; 0x32
    55ba:	ab ab       	std	Y+51, r26	; 0x33
    55bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    55be:	69 a9       	ldd	r22, Y+49	; 0x31
    55c0:	7a a9       	ldd	r23, Y+50	; 0x32
    55c2:	8b a9       	ldd	r24, Y+51	; 0x33
    55c4:	9c a9       	ldd	r25, Y+52	; 0x34
    55c6:	20 e0       	ldi	r18, 0x00	; 0
    55c8:	30 e0       	ldi	r19, 0x00	; 0
    55ca:	40 e8       	ldi	r20, 0x80	; 128
    55cc:	5f e3       	ldi	r21, 0x3F	; 63
    55ce:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    55d2:	88 23       	and	r24, r24
    55d4:	2c f4       	brge	.+10     	; 0x55e0 <STEPPER_voidRotateClockWise+0x8e>
		__ticks = 1;
    55d6:	81 e0       	ldi	r24, 0x01	; 1
    55d8:	90 e0       	ldi	r25, 0x00	; 0
    55da:	98 ab       	std	Y+48, r25	; 0x30
    55dc:	8f a7       	std	Y+47, r24	; 0x2f
    55de:	3f c0       	rjmp	.+126    	; 0x565e <STEPPER_voidRotateClockWise+0x10c>
	else if (__tmp > 65535)
    55e0:	69 a9       	ldd	r22, Y+49	; 0x31
    55e2:	7a a9       	ldd	r23, Y+50	; 0x32
    55e4:	8b a9       	ldd	r24, Y+51	; 0x33
    55e6:	9c a9       	ldd	r25, Y+52	; 0x34
    55e8:	20 e0       	ldi	r18, 0x00	; 0
    55ea:	3f ef       	ldi	r19, 0xFF	; 255
    55ec:	4f e7       	ldi	r20, 0x7F	; 127
    55ee:	57 e4       	ldi	r21, 0x47	; 71
    55f0:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    55f4:	18 16       	cp	r1, r24
    55f6:	4c f5       	brge	.+82     	; 0x564a <STEPPER_voidRotateClockWise+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55f8:	6d a9       	ldd	r22, Y+53	; 0x35
    55fa:	7e a9       	ldd	r23, Y+54	; 0x36
    55fc:	8f a9       	ldd	r24, Y+55	; 0x37
    55fe:	98 ad       	ldd	r25, Y+56	; 0x38
    5600:	20 e0       	ldi	r18, 0x00	; 0
    5602:	30 e0       	ldi	r19, 0x00	; 0
    5604:	40 e2       	ldi	r20, 0x20	; 32
    5606:	51 e4       	ldi	r21, 0x41	; 65
    5608:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    560c:	dc 01       	movw	r26, r24
    560e:	cb 01       	movw	r24, r22
    5610:	bc 01       	movw	r22, r24
    5612:	cd 01       	movw	r24, r26
    5614:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5618:	dc 01       	movw	r26, r24
    561a:	cb 01       	movw	r24, r22
    561c:	98 ab       	std	Y+48, r25	; 0x30
    561e:	8f a7       	std	Y+47, r24	; 0x2f
    5620:	0f c0       	rjmp	.+30     	; 0x5640 <STEPPER_voidRotateClockWise+0xee>
    5622:	88 ec       	ldi	r24, 0xC8	; 200
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	9e a7       	std	Y+46, r25	; 0x2e
    5628:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    562a:	8d a5       	ldd	r24, Y+45	; 0x2d
    562c:	9e a5       	ldd	r25, Y+46	; 0x2e
    562e:	01 97       	sbiw	r24, 0x01	; 1
    5630:	f1 f7       	brne	.-4      	; 0x562e <STEPPER_voidRotateClockWise+0xdc>
    5632:	9e a7       	std	Y+46, r25	; 0x2e
    5634:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5636:	8f a5       	ldd	r24, Y+47	; 0x2f
    5638:	98 a9       	ldd	r25, Y+48	; 0x30
    563a:	01 97       	sbiw	r24, 0x01	; 1
    563c:	98 ab       	std	Y+48, r25	; 0x30
    563e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5640:	8f a5       	ldd	r24, Y+47	; 0x2f
    5642:	98 a9       	ldd	r25, Y+48	; 0x30
    5644:	00 97       	sbiw	r24, 0x00	; 0
    5646:	69 f7       	brne	.-38     	; 0x5622 <STEPPER_voidRotateClockWise+0xd0>
    5648:	14 c0       	rjmp	.+40     	; 0x5672 <STEPPER_voidRotateClockWise+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    564a:	69 a9       	ldd	r22, Y+49	; 0x31
    564c:	7a a9       	ldd	r23, Y+50	; 0x32
    564e:	8b a9       	ldd	r24, Y+51	; 0x33
    5650:	9c a9       	ldd	r25, Y+52	; 0x34
    5652:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5656:	dc 01       	movw	r26, r24
    5658:	cb 01       	movw	r24, r22
    565a:	98 ab       	std	Y+48, r25	; 0x30
    565c:	8f a7       	std	Y+47, r24	; 0x2f
    565e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5660:	98 a9       	ldd	r25, Y+48	; 0x30
    5662:	9c a7       	std	Y+44, r25	; 0x2c
    5664:	8b a7       	std	Y+43, r24	; 0x2b
    5666:	8b a5       	ldd	r24, Y+43	; 0x2b
    5668:	9c a5       	ldd	r25, Y+44	; 0x2c
    566a:	01 97       	sbiw	r24, 0x01	; 1
    566c:	f1 f7       	brne	.-4      	; 0x566a <STEPPER_voidRotateClockWise+0x118>
    566e:	9c a7       	std	Y+44, r25	; 0x2c
    5670:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_BLUE, DIO_u8PIN_LOW);
    5672:	82 e0       	ldi	r24, 0x02	; 2
    5674:	60 e0       	ldi	r22, 0x00	; 0
    5676:	40 e0       	ldi	r20, 0x00	; 0
    5678:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_PINK, DIO_u8PIN_HIGH);
    567c:	82 e0       	ldi	r24, 0x02	; 2
    567e:	61 e0       	ldi	r22, 0x01	; 1
    5680:	41 e0       	ldi	r20, 0x01	; 1
    5682:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_ORANGE, DIO_u8PIN_LOW);
    5686:	82 e0       	ldi	r24, 0x02	; 2
    5688:	63 e0       	ldi	r22, 0x03	; 3
    568a:	40 e0       	ldi	r20, 0x00	; 0
    568c:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_YELLOW, DIO_u8PIN_LOW);
    5690:	82 e0       	ldi	r24, 0x02	; 2
    5692:	62 e0       	ldi	r22, 0x02	; 2
    5694:	40 e0       	ldi	r20, 0x00	; 0
    5696:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
    569a:	80 e0       	ldi	r24, 0x00	; 0
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	a0 e2       	ldi	r26, 0x20	; 32
    56a0:	b1 e4       	ldi	r27, 0x41	; 65
    56a2:	8f a3       	std	Y+39, r24	; 0x27
    56a4:	98 a7       	std	Y+40, r25	; 0x28
    56a6:	a9 a7       	std	Y+41, r26	; 0x29
    56a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56aa:	6f a1       	ldd	r22, Y+39	; 0x27
    56ac:	78 a5       	ldd	r23, Y+40	; 0x28
    56ae:	89 a5       	ldd	r24, Y+41	; 0x29
    56b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    56b2:	20 e0       	ldi	r18, 0x00	; 0
    56b4:	30 e0       	ldi	r19, 0x00	; 0
    56b6:	4a ef       	ldi	r20, 0xFA	; 250
    56b8:	54 e4       	ldi	r21, 0x44	; 68
    56ba:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    56be:	dc 01       	movw	r26, r24
    56c0:	cb 01       	movw	r24, r22
    56c2:	8b a3       	std	Y+35, r24	; 0x23
    56c4:	9c a3       	std	Y+36, r25	; 0x24
    56c6:	ad a3       	std	Y+37, r26	; 0x25
    56c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    56ca:	6b a1       	ldd	r22, Y+35	; 0x23
    56cc:	7c a1       	ldd	r23, Y+36	; 0x24
    56ce:	8d a1       	ldd	r24, Y+37	; 0x25
    56d0:	9e a1       	ldd	r25, Y+38	; 0x26
    56d2:	20 e0       	ldi	r18, 0x00	; 0
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	40 e8       	ldi	r20, 0x80	; 128
    56d8:	5f e3       	ldi	r21, 0x3F	; 63
    56da:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    56de:	88 23       	and	r24, r24
    56e0:	2c f4       	brge	.+10     	; 0x56ec <STEPPER_voidRotateClockWise+0x19a>
		__ticks = 1;
    56e2:	81 e0       	ldi	r24, 0x01	; 1
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	9a a3       	std	Y+34, r25	; 0x22
    56e8:	89 a3       	std	Y+33, r24	; 0x21
    56ea:	3f c0       	rjmp	.+126    	; 0x576a <STEPPER_voidRotateClockWise+0x218>
	else if (__tmp > 65535)
    56ec:	6b a1       	ldd	r22, Y+35	; 0x23
    56ee:	7c a1       	ldd	r23, Y+36	; 0x24
    56f0:	8d a1       	ldd	r24, Y+37	; 0x25
    56f2:	9e a1       	ldd	r25, Y+38	; 0x26
    56f4:	20 e0       	ldi	r18, 0x00	; 0
    56f6:	3f ef       	ldi	r19, 0xFF	; 255
    56f8:	4f e7       	ldi	r20, 0x7F	; 127
    56fa:	57 e4       	ldi	r21, 0x47	; 71
    56fc:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    5700:	18 16       	cp	r1, r24
    5702:	4c f5       	brge	.+82     	; 0x5756 <STEPPER_voidRotateClockWise+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5704:	6f a1       	ldd	r22, Y+39	; 0x27
    5706:	78 a5       	ldd	r23, Y+40	; 0x28
    5708:	89 a5       	ldd	r24, Y+41	; 0x29
    570a:	9a a5       	ldd	r25, Y+42	; 0x2a
    570c:	20 e0       	ldi	r18, 0x00	; 0
    570e:	30 e0       	ldi	r19, 0x00	; 0
    5710:	40 e2       	ldi	r20, 0x20	; 32
    5712:	51 e4       	ldi	r21, 0x41	; 65
    5714:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    5718:	dc 01       	movw	r26, r24
    571a:	cb 01       	movw	r24, r22
    571c:	bc 01       	movw	r22, r24
    571e:	cd 01       	movw	r24, r26
    5720:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5724:	dc 01       	movw	r26, r24
    5726:	cb 01       	movw	r24, r22
    5728:	9a a3       	std	Y+34, r25	; 0x22
    572a:	89 a3       	std	Y+33, r24	; 0x21
    572c:	0f c0       	rjmp	.+30     	; 0x574c <STEPPER_voidRotateClockWise+0x1fa>
    572e:	88 ec       	ldi	r24, 0xC8	; 200
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	98 a3       	std	Y+32, r25	; 0x20
    5734:	8f 8f       	std	Y+31, r24	; 0x1f
    5736:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5738:	98 a1       	ldd	r25, Y+32	; 0x20
    573a:	01 97       	sbiw	r24, 0x01	; 1
    573c:	f1 f7       	brne	.-4      	; 0x573a <STEPPER_voidRotateClockWise+0x1e8>
    573e:	98 a3       	std	Y+32, r25	; 0x20
    5740:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5742:	89 a1       	ldd	r24, Y+33	; 0x21
    5744:	9a a1       	ldd	r25, Y+34	; 0x22
    5746:	01 97       	sbiw	r24, 0x01	; 1
    5748:	9a a3       	std	Y+34, r25	; 0x22
    574a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    574c:	89 a1       	ldd	r24, Y+33	; 0x21
    574e:	9a a1       	ldd	r25, Y+34	; 0x22
    5750:	00 97       	sbiw	r24, 0x00	; 0
    5752:	69 f7       	brne	.-38     	; 0x572e <STEPPER_voidRotateClockWise+0x1dc>
    5754:	14 c0       	rjmp	.+40     	; 0x577e <STEPPER_voidRotateClockWise+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5756:	6b a1       	ldd	r22, Y+35	; 0x23
    5758:	7c a1       	ldd	r23, Y+36	; 0x24
    575a:	8d a1       	ldd	r24, Y+37	; 0x25
    575c:	9e a1       	ldd	r25, Y+38	; 0x26
    575e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5762:	dc 01       	movw	r26, r24
    5764:	cb 01       	movw	r24, r22
    5766:	9a a3       	std	Y+34, r25	; 0x22
    5768:	89 a3       	std	Y+33, r24	; 0x21
    576a:	89 a1       	ldd	r24, Y+33	; 0x21
    576c:	9a a1       	ldd	r25, Y+34	; 0x22
    576e:	9e 8f       	std	Y+30, r25	; 0x1e
    5770:	8d 8f       	std	Y+29, r24	; 0x1d
    5772:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5774:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5776:	01 97       	sbiw	r24, 0x01	; 1
    5778:	f1 f7       	brne	.-4      	; 0x5776 <STEPPER_voidRotateClockWise+0x224>
    577a:	9e 8f       	std	Y+30, r25	; 0x1e
    577c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_BLUE, DIO_u8PIN_LOW);
    577e:	82 e0       	ldi	r24, 0x02	; 2
    5780:	60 e0       	ldi	r22, 0x00	; 0
    5782:	40 e0       	ldi	r20, 0x00	; 0
    5784:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_PINK, DIO_u8PIN_LOW);
    5788:	82 e0       	ldi	r24, 0x02	; 2
    578a:	61 e0       	ldi	r22, 0x01	; 1
    578c:	40 e0       	ldi	r20, 0x00	; 0
    578e:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_ORANGE, DIO_u8PIN_HIGH);
    5792:	82 e0       	ldi	r24, 0x02	; 2
    5794:	63 e0       	ldi	r22, 0x03	; 3
    5796:	41 e0       	ldi	r20, 0x01	; 1
    5798:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_YELLOW, DIO_u8PIN_LOW);
    579c:	82 e0       	ldi	r24, 0x02	; 2
    579e:	62 e0       	ldi	r22, 0x02	; 2
    57a0:	40 e0       	ldi	r20, 0x00	; 0
    57a2:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
    57a6:	80 e0       	ldi	r24, 0x00	; 0
    57a8:	90 e0       	ldi	r25, 0x00	; 0
    57aa:	a0 e2       	ldi	r26, 0x20	; 32
    57ac:	b1 e4       	ldi	r27, 0x41	; 65
    57ae:	89 8f       	std	Y+25, r24	; 0x19
    57b0:	9a 8f       	std	Y+26, r25	; 0x1a
    57b2:	ab 8f       	std	Y+27, r26	; 0x1b
    57b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57b6:	69 8d       	ldd	r22, Y+25	; 0x19
    57b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57be:	20 e0       	ldi	r18, 0x00	; 0
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	4a ef       	ldi	r20, 0xFA	; 250
    57c4:	54 e4       	ldi	r21, 0x44	; 68
    57c6:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    57ca:	dc 01       	movw	r26, r24
    57cc:	cb 01       	movw	r24, r22
    57ce:	8d 8b       	std	Y+21, r24	; 0x15
    57d0:	9e 8b       	std	Y+22, r25	; 0x16
    57d2:	af 8b       	std	Y+23, r26	; 0x17
    57d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    57d6:	6d 89       	ldd	r22, Y+21	; 0x15
    57d8:	7e 89       	ldd	r23, Y+22	; 0x16
    57da:	8f 89       	ldd	r24, Y+23	; 0x17
    57dc:	98 8d       	ldd	r25, Y+24	; 0x18
    57de:	20 e0       	ldi	r18, 0x00	; 0
    57e0:	30 e0       	ldi	r19, 0x00	; 0
    57e2:	40 e8       	ldi	r20, 0x80	; 128
    57e4:	5f e3       	ldi	r21, 0x3F	; 63
    57e6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    57ea:	88 23       	and	r24, r24
    57ec:	2c f4       	brge	.+10     	; 0x57f8 <STEPPER_voidRotateClockWise+0x2a6>
		__ticks = 1;
    57ee:	81 e0       	ldi	r24, 0x01	; 1
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	9c 8b       	std	Y+20, r25	; 0x14
    57f4:	8b 8b       	std	Y+19, r24	; 0x13
    57f6:	3f c0       	rjmp	.+126    	; 0x5876 <STEPPER_voidRotateClockWise+0x324>
	else if (__tmp > 65535)
    57f8:	6d 89       	ldd	r22, Y+21	; 0x15
    57fa:	7e 89       	ldd	r23, Y+22	; 0x16
    57fc:	8f 89       	ldd	r24, Y+23	; 0x17
    57fe:	98 8d       	ldd	r25, Y+24	; 0x18
    5800:	20 e0       	ldi	r18, 0x00	; 0
    5802:	3f ef       	ldi	r19, 0xFF	; 255
    5804:	4f e7       	ldi	r20, 0x7F	; 127
    5806:	57 e4       	ldi	r21, 0x47	; 71
    5808:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    580c:	18 16       	cp	r1, r24
    580e:	4c f5       	brge	.+82     	; 0x5862 <STEPPER_voidRotateClockWise+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5810:	69 8d       	ldd	r22, Y+25	; 0x19
    5812:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5814:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5816:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5818:	20 e0       	ldi	r18, 0x00	; 0
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	40 e2       	ldi	r20, 0x20	; 32
    581e:	51 e4       	ldi	r21, 0x41	; 65
    5820:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    5824:	dc 01       	movw	r26, r24
    5826:	cb 01       	movw	r24, r22
    5828:	bc 01       	movw	r22, r24
    582a:	cd 01       	movw	r24, r26
    582c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5830:	dc 01       	movw	r26, r24
    5832:	cb 01       	movw	r24, r22
    5834:	9c 8b       	std	Y+20, r25	; 0x14
    5836:	8b 8b       	std	Y+19, r24	; 0x13
    5838:	0f c0       	rjmp	.+30     	; 0x5858 <STEPPER_voidRotateClockWise+0x306>
    583a:	88 ec       	ldi	r24, 0xC8	; 200
    583c:	90 e0       	ldi	r25, 0x00	; 0
    583e:	9a 8b       	std	Y+18, r25	; 0x12
    5840:	89 8b       	std	Y+17, r24	; 0x11
    5842:	89 89       	ldd	r24, Y+17	; 0x11
    5844:	9a 89       	ldd	r25, Y+18	; 0x12
    5846:	01 97       	sbiw	r24, 0x01	; 1
    5848:	f1 f7       	brne	.-4      	; 0x5846 <STEPPER_voidRotateClockWise+0x2f4>
    584a:	9a 8b       	std	Y+18, r25	; 0x12
    584c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    584e:	8b 89       	ldd	r24, Y+19	; 0x13
    5850:	9c 89       	ldd	r25, Y+20	; 0x14
    5852:	01 97       	sbiw	r24, 0x01	; 1
    5854:	9c 8b       	std	Y+20, r25	; 0x14
    5856:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5858:	8b 89       	ldd	r24, Y+19	; 0x13
    585a:	9c 89       	ldd	r25, Y+20	; 0x14
    585c:	00 97       	sbiw	r24, 0x00	; 0
    585e:	69 f7       	brne	.-38     	; 0x583a <STEPPER_voidRotateClockWise+0x2e8>
    5860:	14 c0       	rjmp	.+40     	; 0x588a <STEPPER_voidRotateClockWise+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5862:	6d 89       	ldd	r22, Y+21	; 0x15
    5864:	7e 89       	ldd	r23, Y+22	; 0x16
    5866:	8f 89       	ldd	r24, Y+23	; 0x17
    5868:	98 8d       	ldd	r25, Y+24	; 0x18
    586a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    586e:	dc 01       	movw	r26, r24
    5870:	cb 01       	movw	r24, r22
    5872:	9c 8b       	std	Y+20, r25	; 0x14
    5874:	8b 8b       	std	Y+19, r24	; 0x13
    5876:	8b 89       	ldd	r24, Y+19	; 0x13
    5878:	9c 89       	ldd	r25, Y+20	; 0x14
    587a:	98 8b       	std	Y+16, r25	; 0x10
    587c:	8f 87       	std	Y+15, r24	; 0x0f
    587e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5880:	98 89       	ldd	r25, Y+16	; 0x10
    5882:	01 97       	sbiw	r24, 0x01	; 1
    5884:	f1 f7       	brne	.-4      	; 0x5882 <STEPPER_voidRotateClockWise+0x330>
    5886:	98 8b       	std	Y+16, r25	; 0x10
    5888:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_BLUE, DIO_u8PIN_LOW);
    588a:	82 e0       	ldi	r24, 0x02	; 2
    588c:	60 e0       	ldi	r22, 0x00	; 0
    588e:	40 e0       	ldi	r20, 0x00	; 0
    5890:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_PINK, DIO_u8PIN_LOW);
    5894:	82 e0       	ldi	r24, 0x02	; 2
    5896:	61 e0       	ldi	r22, 0x01	; 1
    5898:	40 e0       	ldi	r20, 0x00	; 0
    589a:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_ORANGE, DIO_u8PIN_LOW);
    589e:	82 e0       	ldi	r24, 0x02	; 2
    58a0:	63 e0       	ldi	r22, 0x03	; 3
    58a2:	40 e0       	ldi	r20, 0x00	; 0
    58a4:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_YELLOW, DIO_u8PIN_HIGH);
    58a8:	82 e0       	ldi	r24, 0x02	; 2
    58aa:	62 e0       	ldi	r22, 0x02	; 2
    58ac:	41 e0       	ldi	r20, 0x01	; 1
    58ae:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
    58b2:	80 e0       	ldi	r24, 0x00	; 0
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	a0 e2       	ldi	r26, 0x20	; 32
    58b8:	b1 e4       	ldi	r27, 0x41	; 65
    58ba:	8b 87       	std	Y+11, r24	; 0x0b
    58bc:	9c 87       	std	Y+12, r25	; 0x0c
    58be:	ad 87       	std	Y+13, r26	; 0x0d
    58c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    58c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    58c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    58c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	4a ef       	ldi	r20, 0xFA	; 250
    58d0:	54 e4       	ldi	r21, 0x44	; 68
    58d2:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    58d6:	dc 01       	movw	r26, r24
    58d8:	cb 01       	movw	r24, r22
    58da:	8f 83       	std	Y+7, r24	; 0x07
    58dc:	98 87       	std	Y+8, r25	; 0x08
    58de:	a9 87       	std	Y+9, r26	; 0x09
    58e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    58e2:	6f 81       	ldd	r22, Y+7	; 0x07
    58e4:	78 85       	ldd	r23, Y+8	; 0x08
    58e6:	89 85       	ldd	r24, Y+9	; 0x09
    58e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    58ea:	20 e0       	ldi	r18, 0x00	; 0
    58ec:	30 e0       	ldi	r19, 0x00	; 0
    58ee:	40 e8       	ldi	r20, 0x80	; 128
    58f0:	5f e3       	ldi	r21, 0x3F	; 63
    58f2:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    58f6:	88 23       	and	r24, r24
    58f8:	2c f4       	brge	.+10     	; 0x5904 <STEPPER_voidRotateClockWise+0x3b2>
		__ticks = 1;
    58fa:	81 e0       	ldi	r24, 0x01	; 1
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	9e 83       	std	Y+6, r25	; 0x06
    5900:	8d 83       	std	Y+5, r24	; 0x05
    5902:	3f c0       	rjmp	.+126    	; 0x5982 <STEPPER_voidRotateClockWise+0x430>
	else if (__tmp > 65535)
    5904:	6f 81       	ldd	r22, Y+7	; 0x07
    5906:	78 85       	ldd	r23, Y+8	; 0x08
    5908:	89 85       	ldd	r24, Y+9	; 0x09
    590a:	9a 85       	ldd	r25, Y+10	; 0x0a
    590c:	20 e0       	ldi	r18, 0x00	; 0
    590e:	3f ef       	ldi	r19, 0xFF	; 255
    5910:	4f e7       	ldi	r20, 0x7F	; 127
    5912:	57 e4       	ldi	r21, 0x47	; 71
    5914:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    5918:	18 16       	cp	r1, r24
    591a:	4c f5       	brge	.+82     	; 0x596e <STEPPER_voidRotateClockWise+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    591c:	6b 85       	ldd	r22, Y+11	; 0x0b
    591e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5920:	8d 85       	ldd	r24, Y+13	; 0x0d
    5922:	9e 85       	ldd	r25, Y+14	; 0x0e
    5924:	20 e0       	ldi	r18, 0x00	; 0
    5926:	30 e0       	ldi	r19, 0x00	; 0
    5928:	40 e2       	ldi	r20, 0x20	; 32
    592a:	51 e4       	ldi	r21, 0x41	; 65
    592c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    5930:	dc 01       	movw	r26, r24
    5932:	cb 01       	movw	r24, r22
    5934:	bc 01       	movw	r22, r24
    5936:	cd 01       	movw	r24, r26
    5938:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    593c:	dc 01       	movw	r26, r24
    593e:	cb 01       	movw	r24, r22
    5940:	9e 83       	std	Y+6, r25	; 0x06
    5942:	8d 83       	std	Y+5, r24	; 0x05
    5944:	0f c0       	rjmp	.+30     	; 0x5964 <STEPPER_voidRotateClockWise+0x412>
    5946:	88 ec       	ldi	r24, 0xC8	; 200
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	9c 83       	std	Y+4, r25	; 0x04
    594c:	8b 83       	std	Y+3, r24	; 0x03
    594e:	8b 81       	ldd	r24, Y+3	; 0x03
    5950:	9c 81       	ldd	r25, Y+4	; 0x04
    5952:	01 97       	sbiw	r24, 0x01	; 1
    5954:	f1 f7       	brne	.-4      	; 0x5952 <STEPPER_voidRotateClockWise+0x400>
    5956:	9c 83       	std	Y+4, r25	; 0x04
    5958:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    595a:	8d 81       	ldd	r24, Y+5	; 0x05
    595c:	9e 81       	ldd	r25, Y+6	; 0x06
    595e:	01 97       	sbiw	r24, 0x01	; 1
    5960:	9e 83       	std	Y+6, r25	; 0x06
    5962:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5964:	8d 81       	ldd	r24, Y+5	; 0x05
    5966:	9e 81       	ldd	r25, Y+6	; 0x06
    5968:	00 97       	sbiw	r24, 0x00	; 0
    596a:	69 f7       	brne	.-38     	; 0x5946 <STEPPER_voidRotateClockWise+0x3f4>
    596c:	14 c0       	rjmp	.+40     	; 0x5996 <STEPPER_voidRotateClockWise+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    596e:	6f 81       	ldd	r22, Y+7	; 0x07
    5970:	78 85       	ldd	r23, Y+8	; 0x08
    5972:	89 85       	ldd	r24, Y+9	; 0x09
    5974:	9a 85       	ldd	r25, Y+10	; 0x0a
    5976:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    597a:	dc 01       	movw	r26, r24
    597c:	cb 01       	movw	r24, r22
    597e:	9e 83       	std	Y+6, r25	; 0x06
    5980:	8d 83       	std	Y+5, r24	; 0x05
    5982:	8d 81       	ldd	r24, Y+5	; 0x05
    5984:	9e 81       	ldd	r25, Y+6	; 0x06
    5986:	9a 83       	std	Y+2, r25	; 0x02
    5988:	89 83       	std	Y+1, r24	; 0x01
    598a:	89 81       	ldd	r24, Y+1	; 0x01
    598c:	9a 81       	ldd	r25, Y+2	; 0x02
    598e:	01 97       	sbiw	r24, 0x01	; 1
    5990:	f1 f7       	brne	.-4      	; 0x598e <STEPPER_voidRotateClockWise+0x43c>
    5992:	9a 83       	std	Y+2, r25	; 0x02
    5994:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    5996:	e8 96       	adiw	r28, 0x38	; 56
    5998:	0f b6       	in	r0, 0x3f	; 63
    599a:	f8 94       	cli
    599c:	de bf       	out	0x3e, r29	; 62
    599e:	0f be       	out	0x3f, r0	; 63
    59a0:	cd bf       	out	0x3d, r28	; 61
    59a2:	cf 91       	pop	r28
    59a4:	df 91       	pop	r29
    59a6:	08 95       	ret

000059a8 <STEPPER_voidRotateCOUNTERClockWise>:

void STEPPER_voidRotateCOUNTERClockWise() {
    59a8:	df 93       	push	r29
    59aa:	cf 93       	push	r28
    59ac:	cd b7       	in	r28, 0x3d	; 61
    59ae:	de b7       	in	r29, 0x3e	; 62
    59b0:	e8 97       	sbiw	r28, 0x38	; 56
    59b2:	0f b6       	in	r0, 0x3f	; 63
    59b4:	f8 94       	cli
    59b6:	de bf       	out	0x3e, r29	; 62
    59b8:	0f be       	out	0x3f, r0	; 63
    59ba:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_BLUE, DIO_u8PIN_HIGH);
    59bc:	82 e0       	ldi	r24, 0x02	; 2
    59be:	60 e0       	ldi	r22, 0x00	; 0
    59c0:	41 e0       	ldi	r20, 0x01	; 1
    59c2:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_YELLOW, DIO_u8PIN_LOW);
    59c6:	82 e0       	ldi	r24, 0x02	; 2
    59c8:	62 e0       	ldi	r22, 0x02	; 2
    59ca:	40 e0       	ldi	r20, 0x00	; 0
    59cc:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_ORANGE, DIO_u8PIN_LOW);
    59d0:	82 e0       	ldi	r24, 0x02	; 2
    59d2:	63 e0       	ldi	r22, 0x03	; 3
    59d4:	40 e0       	ldi	r20, 0x00	; 0
    59d6:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_PINK, DIO_u8PIN_LOW);
    59da:	82 e0       	ldi	r24, 0x02	; 2
    59dc:	61 e0       	ldi	r22, 0x01	; 1
    59de:	40 e0       	ldi	r20, 0x00	; 0
    59e0:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
    59e4:	80 e0       	ldi	r24, 0x00	; 0
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	a0 e2       	ldi	r26, 0x20	; 32
    59ea:	b1 e4       	ldi	r27, 0x41	; 65
    59ec:	8d ab       	std	Y+53, r24	; 0x35
    59ee:	9e ab       	std	Y+54, r25	; 0x36
    59f0:	af ab       	std	Y+55, r26	; 0x37
    59f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59f4:	6d a9       	ldd	r22, Y+53	; 0x35
    59f6:	7e a9       	ldd	r23, Y+54	; 0x36
    59f8:	8f a9       	ldd	r24, Y+55	; 0x37
    59fa:	98 ad       	ldd	r25, Y+56	; 0x38
    59fc:	20 e0       	ldi	r18, 0x00	; 0
    59fe:	30 e0       	ldi	r19, 0x00	; 0
    5a00:	4a ef       	ldi	r20, 0xFA	; 250
    5a02:	54 e4       	ldi	r21, 0x44	; 68
    5a04:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    5a08:	dc 01       	movw	r26, r24
    5a0a:	cb 01       	movw	r24, r22
    5a0c:	89 ab       	std	Y+49, r24	; 0x31
    5a0e:	9a ab       	std	Y+50, r25	; 0x32
    5a10:	ab ab       	std	Y+51, r26	; 0x33
    5a12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5a14:	69 a9       	ldd	r22, Y+49	; 0x31
    5a16:	7a a9       	ldd	r23, Y+50	; 0x32
    5a18:	8b a9       	ldd	r24, Y+51	; 0x33
    5a1a:	9c a9       	ldd	r25, Y+52	; 0x34
    5a1c:	20 e0       	ldi	r18, 0x00	; 0
    5a1e:	30 e0       	ldi	r19, 0x00	; 0
    5a20:	40 e8       	ldi	r20, 0x80	; 128
    5a22:	5f e3       	ldi	r21, 0x3F	; 63
    5a24:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    5a28:	88 23       	and	r24, r24
    5a2a:	2c f4       	brge	.+10     	; 0x5a36 <STEPPER_voidRotateCOUNTERClockWise+0x8e>
		__ticks = 1;
    5a2c:	81 e0       	ldi	r24, 0x01	; 1
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	98 ab       	std	Y+48, r25	; 0x30
    5a32:	8f a7       	std	Y+47, r24	; 0x2f
    5a34:	3f c0       	rjmp	.+126    	; 0x5ab4 <STEPPER_voidRotateCOUNTERClockWise+0x10c>
	else if (__tmp > 65535)
    5a36:	69 a9       	ldd	r22, Y+49	; 0x31
    5a38:	7a a9       	ldd	r23, Y+50	; 0x32
    5a3a:	8b a9       	ldd	r24, Y+51	; 0x33
    5a3c:	9c a9       	ldd	r25, Y+52	; 0x34
    5a3e:	20 e0       	ldi	r18, 0x00	; 0
    5a40:	3f ef       	ldi	r19, 0xFF	; 255
    5a42:	4f e7       	ldi	r20, 0x7F	; 127
    5a44:	57 e4       	ldi	r21, 0x47	; 71
    5a46:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    5a4a:	18 16       	cp	r1, r24
    5a4c:	4c f5       	brge	.+82     	; 0x5aa0 <STEPPER_voidRotateCOUNTERClockWise+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a4e:	6d a9       	ldd	r22, Y+53	; 0x35
    5a50:	7e a9       	ldd	r23, Y+54	; 0x36
    5a52:	8f a9       	ldd	r24, Y+55	; 0x37
    5a54:	98 ad       	ldd	r25, Y+56	; 0x38
    5a56:	20 e0       	ldi	r18, 0x00	; 0
    5a58:	30 e0       	ldi	r19, 0x00	; 0
    5a5a:	40 e2       	ldi	r20, 0x20	; 32
    5a5c:	51 e4       	ldi	r21, 0x41	; 65
    5a5e:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    5a62:	dc 01       	movw	r26, r24
    5a64:	cb 01       	movw	r24, r22
    5a66:	bc 01       	movw	r22, r24
    5a68:	cd 01       	movw	r24, r26
    5a6a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5a6e:	dc 01       	movw	r26, r24
    5a70:	cb 01       	movw	r24, r22
    5a72:	98 ab       	std	Y+48, r25	; 0x30
    5a74:	8f a7       	std	Y+47, r24	; 0x2f
    5a76:	0f c0       	rjmp	.+30     	; 0x5a96 <STEPPER_voidRotateCOUNTERClockWise+0xee>
    5a78:	88 ec       	ldi	r24, 0xC8	; 200
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
    5a7c:	9e a7       	std	Y+46, r25	; 0x2e
    5a7e:	8d a7       	std	Y+45, r24	; 0x2d
    5a80:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a82:	9e a5       	ldd	r25, Y+46	; 0x2e
    5a84:	01 97       	sbiw	r24, 0x01	; 1
    5a86:	f1 f7       	brne	.-4      	; 0x5a84 <STEPPER_voidRotateCOUNTERClockWise+0xdc>
    5a88:	9e a7       	std	Y+46, r25	; 0x2e
    5a8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a8e:	98 a9       	ldd	r25, Y+48	; 0x30
    5a90:	01 97       	sbiw	r24, 0x01	; 1
    5a92:	98 ab       	std	Y+48, r25	; 0x30
    5a94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a96:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a98:	98 a9       	ldd	r25, Y+48	; 0x30
    5a9a:	00 97       	sbiw	r24, 0x00	; 0
    5a9c:	69 f7       	brne	.-38     	; 0x5a78 <STEPPER_voidRotateCOUNTERClockWise+0xd0>
    5a9e:	14 c0       	rjmp	.+40     	; 0x5ac8 <STEPPER_voidRotateCOUNTERClockWise+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5aa0:	69 a9       	ldd	r22, Y+49	; 0x31
    5aa2:	7a a9       	ldd	r23, Y+50	; 0x32
    5aa4:	8b a9       	ldd	r24, Y+51	; 0x33
    5aa6:	9c a9       	ldd	r25, Y+52	; 0x34
    5aa8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5aac:	dc 01       	movw	r26, r24
    5aae:	cb 01       	movw	r24, r22
    5ab0:	98 ab       	std	Y+48, r25	; 0x30
    5ab2:	8f a7       	std	Y+47, r24	; 0x2f
    5ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ab6:	98 a9       	ldd	r25, Y+48	; 0x30
    5ab8:	9c a7       	std	Y+44, r25	; 0x2c
    5aba:	8b a7       	std	Y+43, r24	; 0x2b
    5abc:	8b a5       	ldd	r24, Y+43	; 0x2b
    5abe:	9c a5       	ldd	r25, Y+44	; 0x2c
    5ac0:	01 97       	sbiw	r24, 0x01	; 1
    5ac2:	f1 f7       	brne	.-4      	; 0x5ac0 <STEPPER_voidRotateCOUNTERClockWise+0x118>
    5ac4:	9c a7       	std	Y+44, r25	; 0x2c
    5ac6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_BLUE, DIO_u8PIN_LOW);
    5ac8:	82 e0       	ldi	r24, 0x02	; 2
    5aca:	60 e0       	ldi	r22, 0x00	; 0
    5acc:	40 e0       	ldi	r20, 0x00	; 0
    5ace:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_YELLOW, DIO_u8PIN_HIGH);
    5ad2:	82 e0       	ldi	r24, 0x02	; 2
    5ad4:	62 e0       	ldi	r22, 0x02	; 2
    5ad6:	41 e0       	ldi	r20, 0x01	; 1
    5ad8:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_ORANGE, DIO_u8PIN_LOW);
    5adc:	82 e0       	ldi	r24, 0x02	; 2
    5ade:	63 e0       	ldi	r22, 0x03	; 3
    5ae0:	40 e0       	ldi	r20, 0x00	; 0
    5ae2:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_PINK, DIO_u8PIN_LOW);
    5ae6:	82 e0       	ldi	r24, 0x02	; 2
    5ae8:	61 e0       	ldi	r22, 0x01	; 1
    5aea:	40 e0       	ldi	r20, 0x00	; 0
    5aec:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
    5af0:	80 e0       	ldi	r24, 0x00	; 0
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	a0 e2       	ldi	r26, 0x20	; 32
    5af6:	b1 e4       	ldi	r27, 0x41	; 65
    5af8:	8f a3       	std	Y+39, r24	; 0x27
    5afa:	98 a7       	std	Y+40, r25	; 0x28
    5afc:	a9 a7       	std	Y+41, r26	; 0x29
    5afe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b00:	6f a1       	ldd	r22, Y+39	; 0x27
    5b02:	78 a5       	ldd	r23, Y+40	; 0x28
    5b04:	89 a5       	ldd	r24, Y+41	; 0x29
    5b06:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b08:	20 e0       	ldi	r18, 0x00	; 0
    5b0a:	30 e0       	ldi	r19, 0x00	; 0
    5b0c:	4a ef       	ldi	r20, 0xFA	; 250
    5b0e:	54 e4       	ldi	r21, 0x44	; 68
    5b10:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    5b14:	dc 01       	movw	r26, r24
    5b16:	cb 01       	movw	r24, r22
    5b18:	8b a3       	std	Y+35, r24	; 0x23
    5b1a:	9c a3       	std	Y+36, r25	; 0x24
    5b1c:	ad a3       	std	Y+37, r26	; 0x25
    5b1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5b20:	6b a1       	ldd	r22, Y+35	; 0x23
    5b22:	7c a1       	ldd	r23, Y+36	; 0x24
    5b24:	8d a1       	ldd	r24, Y+37	; 0x25
    5b26:	9e a1       	ldd	r25, Y+38	; 0x26
    5b28:	20 e0       	ldi	r18, 0x00	; 0
    5b2a:	30 e0       	ldi	r19, 0x00	; 0
    5b2c:	40 e8       	ldi	r20, 0x80	; 128
    5b2e:	5f e3       	ldi	r21, 0x3F	; 63
    5b30:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    5b34:	88 23       	and	r24, r24
    5b36:	2c f4       	brge	.+10     	; 0x5b42 <STEPPER_voidRotateCOUNTERClockWise+0x19a>
		__ticks = 1;
    5b38:	81 e0       	ldi	r24, 0x01	; 1
    5b3a:	90 e0       	ldi	r25, 0x00	; 0
    5b3c:	9a a3       	std	Y+34, r25	; 0x22
    5b3e:	89 a3       	std	Y+33, r24	; 0x21
    5b40:	3f c0       	rjmp	.+126    	; 0x5bc0 <STEPPER_voidRotateCOUNTERClockWise+0x218>
	else if (__tmp > 65535)
    5b42:	6b a1       	ldd	r22, Y+35	; 0x23
    5b44:	7c a1       	ldd	r23, Y+36	; 0x24
    5b46:	8d a1       	ldd	r24, Y+37	; 0x25
    5b48:	9e a1       	ldd	r25, Y+38	; 0x26
    5b4a:	20 e0       	ldi	r18, 0x00	; 0
    5b4c:	3f ef       	ldi	r19, 0xFF	; 255
    5b4e:	4f e7       	ldi	r20, 0x7F	; 127
    5b50:	57 e4       	ldi	r21, 0x47	; 71
    5b52:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    5b56:	18 16       	cp	r1, r24
    5b58:	4c f5       	brge	.+82     	; 0x5bac <STEPPER_voidRotateCOUNTERClockWise+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b5a:	6f a1       	ldd	r22, Y+39	; 0x27
    5b5c:	78 a5       	ldd	r23, Y+40	; 0x28
    5b5e:	89 a5       	ldd	r24, Y+41	; 0x29
    5b60:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b62:	20 e0       	ldi	r18, 0x00	; 0
    5b64:	30 e0       	ldi	r19, 0x00	; 0
    5b66:	40 e2       	ldi	r20, 0x20	; 32
    5b68:	51 e4       	ldi	r21, 0x41	; 65
    5b6a:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    5b6e:	dc 01       	movw	r26, r24
    5b70:	cb 01       	movw	r24, r22
    5b72:	bc 01       	movw	r22, r24
    5b74:	cd 01       	movw	r24, r26
    5b76:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5b7a:	dc 01       	movw	r26, r24
    5b7c:	cb 01       	movw	r24, r22
    5b7e:	9a a3       	std	Y+34, r25	; 0x22
    5b80:	89 a3       	std	Y+33, r24	; 0x21
    5b82:	0f c0       	rjmp	.+30     	; 0x5ba2 <STEPPER_voidRotateCOUNTERClockWise+0x1fa>
    5b84:	88 ec       	ldi	r24, 0xC8	; 200
    5b86:	90 e0       	ldi	r25, 0x00	; 0
    5b88:	98 a3       	std	Y+32, r25	; 0x20
    5b8a:	8f 8f       	std	Y+31, r24	; 0x1f
    5b8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b8e:	98 a1       	ldd	r25, Y+32	; 0x20
    5b90:	01 97       	sbiw	r24, 0x01	; 1
    5b92:	f1 f7       	brne	.-4      	; 0x5b90 <STEPPER_voidRotateCOUNTERClockWise+0x1e8>
    5b94:	98 a3       	std	Y+32, r25	; 0x20
    5b96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b98:	89 a1       	ldd	r24, Y+33	; 0x21
    5b9a:	9a a1       	ldd	r25, Y+34	; 0x22
    5b9c:	01 97       	sbiw	r24, 0x01	; 1
    5b9e:	9a a3       	std	Y+34, r25	; 0x22
    5ba0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ba2:	89 a1       	ldd	r24, Y+33	; 0x21
    5ba4:	9a a1       	ldd	r25, Y+34	; 0x22
    5ba6:	00 97       	sbiw	r24, 0x00	; 0
    5ba8:	69 f7       	brne	.-38     	; 0x5b84 <STEPPER_voidRotateCOUNTERClockWise+0x1dc>
    5baa:	14 c0       	rjmp	.+40     	; 0x5bd4 <STEPPER_voidRotateCOUNTERClockWise+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bac:	6b a1       	ldd	r22, Y+35	; 0x23
    5bae:	7c a1       	ldd	r23, Y+36	; 0x24
    5bb0:	8d a1       	ldd	r24, Y+37	; 0x25
    5bb2:	9e a1       	ldd	r25, Y+38	; 0x26
    5bb4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5bb8:	dc 01       	movw	r26, r24
    5bba:	cb 01       	movw	r24, r22
    5bbc:	9a a3       	std	Y+34, r25	; 0x22
    5bbe:	89 a3       	std	Y+33, r24	; 0x21
    5bc0:	89 a1       	ldd	r24, Y+33	; 0x21
    5bc2:	9a a1       	ldd	r25, Y+34	; 0x22
    5bc4:	9e 8f       	std	Y+30, r25	; 0x1e
    5bc6:	8d 8f       	std	Y+29, r24	; 0x1d
    5bc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5bca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5bcc:	01 97       	sbiw	r24, 0x01	; 1
    5bce:	f1 f7       	brne	.-4      	; 0x5bcc <STEPPER_voidRotateCOUNTERClockWise+0x224>
    5bd0:	9e 8f       	std	Y+30, r25	; 0x1e
    5bd2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_BLUE, DIO_u8PIN_LOW);
    5bd4:	82 e0       	ldi	r24, 0x02	; 2
    5bd6:	60 e0       	ldi	r22, 0x00	; 0
    5bd8:	40 e0       	ldi	r20, 0x00	; 0
    5bda:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_YELLOW, DIO_u8PIN_LOW);
    5bde:	82 e0       	ldi	r24, 0x02	; 2
    5be0:	62 e0       	ldi	r22, 0x02	; 2
    5be2:	40 e0       	ldi	r20, 0x00	; 0
    5be4:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_ORANGE, DIO_u8PIN_HIGH);
    5be8:	82 e0       	ldi	r24, 0x02	; 2
    5bea:	63 e0       	ldi	r22, 0x03	; 3
    5bec:	41 e0       	ldi	r20, 0x01	; 1
    5bee:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_PINK, DIO_u8PIN_LOW);
    5bf2:	82 e0       	ldi	r24, 0x02	; 2
    5bf4:	61 e0       	ldi	r22, 0x01	; 1
    5bf6:	40 e0       	ldi	r20, 0x00	; 0
    5bf8:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
    5bfc:	80 e0       	ldi	r24, 0x00	; 0
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	a0 e2       	ldi	r26, 0x20	; 32
    5c02:	b1 e4       	ldi	r27, 0x41	; 65
    5c04:	89 8f       	std	Y+25, r24	; 0x19
    5c06:	9a 8f       	std	Y+26, r25	; 0x1a
    5c08:	ab 8f       	std	Y+27, r26	; 0x1b
    5c0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c0c:	69 8d       	ldd	r22, Y+25	; 0x19
    5c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c14:	20 e0       	ldi	r18, 0x00	; 0
    5c16:	30 e0       	ldi	r19, 0x00	; 0
    5c18:	4a ef       	ldi	r20, 0xFA	; 250
    5c1a:	54 e4       	ldi	r21, 0x44	; 68
    5c1c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    5c20:	dc 01       	movw	r26, r24
    5c22:	cb 01       	movw	r24, r22
    5c24:	8d 8b       	std	Y+21, r24	; 0x15
    5c26:	9e 8b       	std	Y+22, r25	; 0x16
    5c28:	af 8b       	std	Y+23, r26	; 0x17
    5c2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    5c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    5c30:	8f 89       	ldd	r24, Y+23	; 0x17
    5c32:	98 8d       	ldd	r25, Y+24	; 0x18
    5c34:	20 e0       	ldi	r18, 0x00	; 0
    5c36:	30 e0       	ldi	r19, 0x00	; 0
    5c38:	40 e8       	ldi	r20, 0x80	; 128
    5c3a:	5f e3       	ldi	r21, 0x3F	; 63
    5c3c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    5c40:	88 23       	and	r24, r24
    5c42:	2c f4       	brge	.+10     	; 0x5c4e <STEPPER_voidRotateCOUNTERClockWise+0x2a6>
		__ticks = 1;
    5c44:	81 e0       	ldi	r24, 0x01	; 1
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	9c 8b       	std	Y+20, r25	; 0x14
    5c4a:	8b 8b       	std	Y+19, r24	; 0x13
    5c4c:	3f c0       	rjmp	.+126    	; 0x5ccc <STEPPER_voidRotateCOUNTERClockWise+0x324>
	else if (__tmp > 65535)
    5c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    5c50:	7e 89       	ldd	r23, Y+22	; 0x16
    5c52:	8f 89       	ldd	r24, Y+23	; 0x17
    5c54:	98 8d       	ldd	r25, Y+24	; 0x18
    5c56:	20 e0       	ldi	r18, 0x00	; 0
    5c58:	3f ef       	ldi	r19, 0xFF	; 255
    5c5a:	4f e7       	ldi	r20, 0x7F	; 127
    5c5c:	57 e4       	ldi	r21, 0x47	; 71
    5c5e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    5c62:	18 16       	cp	r1, r24
    5c64:	4c f5       	brge	.+82     	; 0x5cb8 <STEPPER_voidRotateCOUNTERClockWise+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c66:	69 8d       	ldd	r22, Y+25	; 0x19
    5c68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c6e:	20 e0       	ldi	r18, 0x00	; 0
    5c70:	30 e0       	ldi	r19, 0x00	; 0
    5c72:	40 e2       	ldi	r20, 0x20	; 32
    5c74:	51 e4       	ldi	r21, 0x41	; 65
    5c76:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    5c7a:	dc 01       	movw	r26, r24
    5c7c:	cb 01       	movw	r24, r22
    5c7e:	bc 01       	movw	r22, r24
    5c80:	cd 01       	movw	r24, r26
    5c82:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5c86:	dc 01       	movw	r26, r24
    5c88:	cb 01       	movw	r24, r22
    5c8a:	9c 8b       	std	Y+20, r25	; 0x14
    5c8c:	8b 8b       	std	Y+19, r24	; 0x13
    5c8e:	0f c0       	rjmp	.+30     	; 0x5cae <STEPPER_voidRotateCOUNTERClockWise+0x306>
    5c90:	88 ec       	ldi	r24, 0xC8	; 200
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	9a 8b       	std	Y+18, r25	; 0x12
    5c96:	89 8b       	std	Y+17, r24	; 0x11
    5c98:	89 89       	ldd	r24, Y+17	; 0x11
    5c9a:	9a 89       	ldd	r25, Y+18	; 0x12
    5c9c:	01 97       	sbiw	r24, 0x01	; 1
    5c9e:	f1 f7       	brne	.-4      	; 0x5c9c <STEPPER_voidRotateCOUNTERClockWise+0x2f4>
    5ca0:	9a 8b       	std	Y+18, r25	; 0x12
    5ca2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    5ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    5ca8:	01 97       	sbiw	r24, 0x01	; 1
    5caa:	9c 8b       	std	Y+20, r25	; 0x14
    5cac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cae:	8b 89       	ldd	r24, Y+19	; 0x13
    5cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    5cb2:	00 97       	sbiw	r24, 0x00	; 0
    5cb4:	69 f7       	brne	.-38     	; 0x5c90 <STEPPER_voidRotateCOUNTERClockWise+0x2e8>
    5cb6:	14 c0       	rjmp	.+40     	; 0x5ce0 <STEPPER_voidRotateCOUNTERClockWise+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cb8:	6d 89       	ldd	r22, Y+21	; 0x15
    5cba:	7e 89       	ldd	r23, Y+22	; 0x16
    5cbc:	8f 89       	ldd	r24, Y+23	; 0x17
    5cbe:	98 8d       	ldd	r25, Y+24	; 0x18
    5cc0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5cc4:	dc 01       	movw	r26, r24
    5cc6:	cb 01       	movw	r24, r22
    5cc8:	9c 8b       	std	Y+20, r25	; 0x14
    5cca:	8b 8b       	std	Y+19, r24	; 0x13
    5ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    5cce:	9c 89       	ldd	r25, Y+20	; 0x14
    5cd0:	98 8b       	std	Y+16, r25	; 0x10
    5cd2:	8f 87       	std	Y+15, r24	; 0x0f
    5cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5cd6:	98 89       	ldd	r25, Y+16	; 0x10
    5cd8:	01 97       	sbiw	r24, 0x01	; 1
    5cda:	f1 f7       	brne	.-4      	; 0x5cd8 <STEPPER_voidRotateCOUNTERClockWise+0x330>
    5cdc:	98 8b       	std	Y+16, r25	; 0x10
    5cde:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_BLUE, DIO_u8PIN_LOW);
    5ce0:	82 e0       	ldi	r24, 0x02	; 2
    5ce2:	60 e0       	ldi	r22, 0x00	; 0
    5ce4:	40 e0       	ldi	r20, 0x00	; 0
    5ce6:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_YELLOW, DIO_u8PIN_LOW);
    5cea:	82 e0       	ldi	r24, 0x02	; 2
    5cec:	62 e0       	ldi	r22, 0x02	; 2
    5cee:	40 e0       	ldi	r20, 0x00	; 0
    5cf0:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_ORANGE, DIO_u8PIN_LOW);
    5cf4:	82 e0       	ldi	r24, 0x02	; 2
    5cf6:	63 e0       	ldi	r22, 0x03	; 3
    5cf8:	40 e0       	ldi	r20, 0x00	; 0
    5cfa:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_DATA_PORT, STEPPER_COIL_PINK, DIO_u8PIN_HIGH);
    5cfe:	82 e0       	ldi	r24, 0x02	; 2
    5d00:	61 e0       	ldi	r22, 0x01	; 1
    5d02:	41 e0       	ldi	r20, 0x01	; 1
    5d04:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
    5d08:	80 e0       	ldi	r24, 0x00	; 0
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	a0 e2       	ldi	r26, 0x20	; 32
    5d0e:	b1 e4       	ldi	r27, 0x41	; 65
    5d10:	8b 87       	std	Y+11, r24	; 0x0b
    5d12:	9c 87       	std	Y+12, r25	; 0x0c
    5d14:	ad 87       	std	Y+13, r26	; 0x0d
    5d16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d20:	20 e0       	ldi	r18, 0x00	; 0
    5d22:	30 e0       	ldi	r19, 0x00	; 0
    5d24:	4a ef       	ldi	r20, 0xFA	; 250
    5d26:	54 e4       	ldi	r21, 0x44	; 68
    5d28:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	cb 01       	movw	r24, r22
    5d30:	8f 83       	std	Y+7, r24	; 0x07
    5d32:	98 87       	std	Y+8, r25	; 0x08
    5d34:	a9 87       	std	Y+9, r26	; 0x09
    5d36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d38:	6f 81       	ldd	r22, Y+7	; 0x07
    5d3a:	78 85       	ldd	r23, Y+8	; 0x08
    5d3c:	89 85       	ldd	r24, Y+9	; 0x09
    5d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d40:	20 e0       	ldi	r18, 0x00	; 0
    5d42:	30 e0       	ldi	r19, 0x00	; 0
    5d44:	40 e8       	ldi	r20, 0x80	; 128
    5d46:	5f e3       	ldi	r21, 0x3F	; 63
    5d48:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    5d4c:	88 23       	and	r24, r24
    5d4e:	2c f4       	brge	.+10     	; 0x5d5a <STEPPER_voidRotateCOUNTERClockWise+0x3b2>
		__ticks = 1;
    5d50:	81 e0       	ldi	r24, 0x01	; 1
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	9e 83       	std	Y+6, r25	; 0x06
    5d56:	8d 83       	std	Y+5, r24	; 0x05
    5d58:	3f c0       	rjmp	.+126    	; 0x5dd8 <STEPPER_voidRotateCOUNTERClockWise+0x430>
	else if (__tmp > 65535)
    5d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    5d5c:	78 85       	ldd	r23, Y+8	; 0x08
    5d5e:	89 85       	ldd	r24, Y+9	; 0x09
    5d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d62:	20 e0       	ldi	r18, 0x00	; 0
    5d64:	3f ef       	ldi	r19, 0xFF	; 255
    5d66:	4f e7       	ldi	r20, 0x7F	; 127
    5d68:	57 e4       	ldi	r21, 0x47	; 71
    5d6a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    5d6e:	18 16       	cp	r1, r24
    5d70:	4c f5       	brge	.+82     	; 0x5dc4 <STEPPER_voidRotateCOUNTERClockWise+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d7a:	20 e0       	ldi	r18, 0x00	; 0
    5d7c:	30 e0       	ldi	r19, 0x00	; 0
    5d7e:	40 e2       	ldi	r20, 0x20	; 32
    5d80:	51 e4       	ldi	r21, 0x41	; 65
    5d82:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    5d86:	dc 01       	movw	r26, r24
    5d88:	cb 01       	movw	r24, r22
    5d8a:	bc 01       	movw	r22, r24
    5d8c:	cd 01       	movw	r24, r26
    5d8e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5d92:	dc 01       	movw	r26, r24
    5d94:	cb 01       	movw	r24, r22
    5d96:	9e 83       	std	Y+6, r25	; 0x06
    5d98:	8d 83       	std	Y+5, r24	; 0x05
    5d9a:	0f c0       	rjmp	.+30     	; 0x5dba <STEPPER_voidRotateCOUNTERClockWise+0x412>
    5d9c:	88 ec       	ldi	r24, 0xC8	; 200
    5d9e:	90 e0       	ldi	r25, 0x00	; 0
    5da0:	9c 83       	std	Y+4, r25	; 0x04
    5da2:	8b 83       	std	Y+3, r24	; 0x03
    5da4:	8b 81       	ldd	r24, Y+3	; 0x03
    5da6:	9c 81       	ldd	r25, Y+4	; 0x04
    5da8:	01 97       	sbiw	r24, 0x01	; 1
    5daa:	f1 f7       	brne	.-4      	; 0x5da8 <STEPPER_voidRotateCOUNTERClockWise+0x400>
    5dac:	9c 83       	std	Y+4, r25	; 0x04
    5dae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5db0:	8d 81       	ldd	r24, Y+5	; 0x05
    5db2:	9e 81       	ldd	r25, Y+6	; 0x06
    5db4:	01 97       	sbiw	r24, 0x01	; 1
    5db6:	9e 83       	std	Y+6, r25	; 0x06
    5db8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dba:	8d 81       	ldd	r24, Y+5	; 0x05
    5dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    5dbe:	00 97       	sbiw	r24, 0x00	; 0
    5dc0:	69 f7       	brne	.-38     	; 0x5d9c <STEPPER_voidRotateCOUNTERClockWise+0x3f4>
    5dc2:	14 c0       	rjmp	.+40     	; 0x5dec <STEPPER_voidRotateCOUNTERClockWise+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    5dc6:	78 85       	ldd	r23, Y+8	; 0x08
    5dc8:	89 85       	ldd	r24, Y+9	; 0x09
    5dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dcc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5dd0:	dc 01       	movw	r26, r24
    5dd2:	cb 01       	movw	r24, r22
    5dd4:	9e 83       	std	Y+6, r25	; 0x06
    5dd6:	8d 83       	std	Y+5, r24	; 0x05
    5dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    5dda:	9e 81       	ldd	r25, Y+6	; 0x06
    5ddc:	9a 83       	std	Y+2, r25	; 0x02
    5dde:	89 83       	std	Y+1, r24	; 0x01
    5de0:	89 81       	ldd	r24, Y+1	; 0x01
    5de2:	9a 81       	ldd	r25, Y+2	; 0x02
    5de4:	01 97       	sbiw	r24, 0x01	; 1
    5de6:	f1 f7       	brne	.-4      	; 0x5de4 <STEPPER_voidRotateCOUNTERClockWise+0x43c>
    5de8:	9a 83       	std	Y+2, r25	; 0x02
    5dea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    5dec:	e8 96       	adiw	r28, 0x38	; 56
    5dee:	0f b6       	in	r0, 0x3f	; 63
    5df0:	f8 94       	cli
    5df2:	de bf       	out	0x3e, r29	; 62
    5df4:	0f be       	out	0x3f, r0	; 63
    5df6:	cd bf       	out	0x3d, r28	; 61
    5df8:	cf 91       	pop	r28
    5dfa:	df 91       	pop	r29
    5dfc:	08 95       	ret

00005dfe <STEPPER_u8RotateByDegrees>:

u8 STEPPER_u8RotateByDegrees(u32 Copy_u32Degree, u8 Copy_u8Direction) {
    5dfe:	df 93       	push	r29
    5e00:	cf 93       	push	r28
    5e02:	cd b7       	in	r28, 0x3d	; 61
    5e04:	de b7       	in	r29, 0x3e	; 62
    5e06:	62 97       	sbiw	r28, 0x12	; 18
    5e08:	0f b6       	in	r0, 0x3f	; 63
    5e0a:	f8 94       	cli
    5e0c:	de bf       	out	0x3e, r29	; 62
    5e0e:	0f be       	out	0x3f, r0	; 63
    5e10:	cd bf       	out	0x3d, r28	; 61
    5e12:	6d 87       	std	Y+13, r22	; 0x0d
    5e14:	7e 87       	std	Y+14, r23	; 0x0e
    5e16:	8f 87       	std	Y+15, r24	; 0x0f
    5e18:	98 8b       	std	Y+16, r25	; 0x10
    5e1a:	49 8b       	std	Y+17, r20	; 0x11
	u32 Local_u32Revolution = Copy_u32Degree / (STEPPER_MIN_DEGREE * 4);
    5e1c:	6d 85       	ldd	r22, Y+13	; 0x0d
    5e1e:	7e 85       	ldd	r23, Y+14	; 0x0e
    5e20:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e22:	98 89       	ldd	r25, Y+16	; 0x10
    5e24:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__floatunsisf>
    5e28:	dc 01       	movw	r26, r24
    5e2a:	cb 01       	movw	r24, r22
    5e2c:	bc 01       	movw	r22, r24
    5e2e:	cd 01       	movw	r24, r26
    5e30:	23 e3       	ldi	r18, 0x33	; 51
    5e32:	33 e3       	ldi	r19, 0x33	; 51
    5e34:	43 e3       	ldi	r20, 0x33	; 51
    5e36:	5f e3       	ldi	r21, 0x3F	; 63
    5e38:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__divsf3>
    5e3c:	dc 01       	movw	r26, r24
    5e3e:	cb 01       	movw	r24, r22
    5e40:	bc 01       	movw	r22, r24
    5e42:	cd 01       	movw	r24, r26
    5e44:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5e48:	dc 01       	movw	r26, r24
    5e4a:	cb 01       	movw	r24, r22
    5e4c:	89 87       	std	Y+9, r24	; 0x09
    5e4e:	9a 87       	std	Y+10, r25	; 0x0a
    5e50:	ab 87       	std	Y+11, r26	; 0x0b
    5e52:	bc 87       	std	Y+12, r27	; 0x0c
	if (Copy_u8Direction == STEPPER_CW_DIR)
    5e54:	89 89       	ldd	r24, Y+17	; 0x11
    5e56:	88 23       	and	r24, r24
    5e58:	01 f5       	brne	.+64     	; 0x5e9a <STEPPER_u8RotateByDegrees+0x9c>
		for (u32 i = 0; i < Local_u32Revolution; ++i)
    5e5a:	1d 82       	std	Y+5, r1	; 0x05
    5e5c:	1e 82       	std	Y+6, r1	; 0x06
    5e5e:	1f 82       	std	Y+7, r1	; 0x07
    5e60:	18 86       	std	Y+8, r1	; 0x08
    5e62:	0d c0       	rjmp	.+26     	; 0x5e7e <STEPPER_u8RotateByDegrees+0x80>
			STEPPER_voidRotateClockWise();
    5e64:	0e 94 a9 2a 	call	0x5552	; 0x5552 <STEPPER_voidRotateClockWise>
}

u8 STEPPER_u8RotateByDegrees(u32 Copy_u32Degree, u8 Copy_u8Direction) {
	u32 Local_u32Revolution = Copy_u32Degree / (STEPPER_MIN_DEGREE * 4);
	if (Copy_u8Direction == STEPPER_CW_DIR)
		for (u32 i = 0; i < Local_u32Revolution; ++i)
    5e68:	8d 81       	ldd	r24, Y+5	; 0x05
    5e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    5e6c:	af 81       	ldd	r26, Y+7	; 0x07
    5e6e:	b8 85       	ldd	r27, Y+8	; 0x08
    5e70:	01 96       	adiw	r24, 0x01	; 1
    5e72:	a1 1d       	adc	r26, r1
    5e74:	b1 1d       	adc	r27, r1
    5e76:	8d 83       	std	Y+5, r24	; 0x05
    5e78:	9e 83       	std	Y+6, r25	; 0x06
    5e7a:	af 83       	std	Y+7, r26	; 0x07
    5e7c:	b8 87       	std	Y+8, r27	; 0x08
    5e7e:	2d 81       	ldd	r18, Y+5	; 0x05
    5e80:	3e 81       	ldd	r19, Y+6	; 0x06
    5e82:	4f 81       	ldd	r20, Y+7	; 0x07
    5e84:	58 85       	ldd	r21, Y+8	; 0x08
    5e86:	89 85       	ldd	r24, Y+9	; 0x09
    5e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e8a:	ab 85       	ldd	r26, Y+11	; 0x0b
    5e8c:	bc 85       	ldd	r27, Y+12	; 0x0c
    5e8e:	28 17       	cp	r18, r24
    5e90:	39 07       	cpc	r19, r25
    5e92:	4a 07       	cpc	r20, r26
    5e94:	5b 07       	cpc	r21, r27
    5e96:	30 f3       	brcs	.-52     	; 0x5e64 <STEPPER_u8RotateByDegrees+0x66>
    5e98:	26 c0       	rjmp	.+76     	; 0x5ee6 <STEPPER_u8RotateByDegrees+0xe8>
			STEPPER_voidRotateClockWise();
	else if (Copy_u8Direction == STEPPER_CCW_DIR)
    5e9a:	89 89       	ldd	r24, Y+17	; 0x11
    5e9c:	81 30       	cpi	r24, 0x01	; 1
    5e9e:	01 f5       	brne	.+64     	; 0x5ee0 <STEPPER_u8RotateByDegrees+0xe2>
		for (u32 i = 0; i < Local_u32Revolution; ++i)
    5ea0:	19 82       	std	Y+1, r1	; 0x01
    5ea2:	1a 82       	std	Y+2, r1	; 0x02
    5ea4:	1b 82       	std	Y+3, r1	; 0x03
    5ea6:	1c 82       	std	Y+4, r1	; 0x04
    5ea8:	0d c0       	rjmp	.+26     	; 0x5ec4 <STEPPER_u8RotateByDegrees+0xc6>
			STEPPER_voidRotateCOUNTERClockWise();
    5eaa:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <STEPPER_voidRotateCOUNTERClockWise>
	u32 Local_u32Revolution = Copy_u32Degree / (STEPPER_MIN_DEGREE * 4);
	if (Copy_u8Direction == STEPPER_CW_DIR)
		for (u32 i = 0; i < Local_u32Revolution; ++i)
			STEPPER_voidRotateClockWise();
	else if (Copy_u8Direction == STEPPER_CCW_DIR)
		for (u32 i = 0; i < Local_u32Revolution; ++i)
    5eae:	89 81       	ldd	r24, Y+1	; 0x01
    5eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    5eb2:	ab 81       	ldd	r26, Y+3	; 0x03
    5eb4:	bc 81       	ldd	r27, Y+4	; 0x04
    5eb6:	01 96       	adiw	r24, 0x01	; 1
    5eb8:	a1 1d       	adc	r26, r1
    5eba:	b1 1d       	adc	r27, r1
    5ebc:	89 83       	std	Y+1, r24	; 0x01
    5ebe:	9a 83       	std	Y+2, r25	; 0x02
    5ec0:	ab 83       	std	Y+3, r26	; 0x03
    5ec2:	bc 83       	std	Y+4, r27	; 0x04
    5ec4:	29 81       	ldd	r18, Y+1	; 0x01
    5ec6:	3a 81       	ldd	r19, Y+2	; 0x02
    5ec8:	4b 81       	ldd	r20, Y+3	; 0x03
    5eca:	5c 81       	ldd	r21, Y+4	; 0x04
    5ecc:	89 85       	ldd	r24, Y+9	; 0x09
    5ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ed0:	ab 85       	ldd	r26, Y+11	; 0x0b
    5ed2:	bc 85       	ldd	r27, Y+12	; 0x0c
    5ed4:	28 17       	cp	r18, r24
    5ed6:	39 07       	cpc	r19, r25
    5ed8:	4a 07       	cpc	r20, r26
    5eda:	5b 07       	cpc	r21, r27
    5edc:	30 f3       	brcs	.-52     	; 0x5eaa <STEPPER_u8RotateByDegrees+0xac>
    5ede:	03 c0       	rjmp	.+6      	; 0x5ee6 <STEPPER_u8RotateByDegrees+0xe8>
			STEPPER_voidRotateCOUNTERClockWise();
	else
		return 1;
    5ee0:	81 e0       	ldi	r24, 0x01	; 1
    5ee2:	8a 8b       	std	Y+18, r24	; 0x12
    5ee4:	01 c0       	rjmp	.+2      	; 0x5ee8 <STEPPER_u8RotateByDegrees+0xea>
	return 0;
    5ee6:	1a 8a       	std	Y+18, r1	; 0x12
    5ee8:	8a 89       	ldd	r24, Y+18	; 0x12
}
    5eea:	62 96       	adiw	r28, 0x12	; 18
    5eec:	0f b6       	in	r0, 0x3f	; 63
    5eee:	f8 94       	cli
    5ef0:	de bf       	out	0x3e, r29	; 62
    5ef2:	0f be       	out	0x3f, r0	; 63
    5ef4:	cd bf       	out	0x3d, r28	; 61
    5ef6:	cf 91       	pop	r28
    5ef8:	df 91       	pop	r29
    5efa:	08 95       	ret

00005efc <STEPPER_u8RotateBySeconds>:

u8 STEPPER_u8RotateBySeconds(u32 Copy_u32Second, u8 Copy_u8Direction) {
    5efc:	df 93       	push	r29
    5efe:	cf 93       	push	r28
    5f00:	cd b7       	in	r28, 0x3d	; 61
    5f02:	de b7       	in	r29, 0x3e	; 62
    5f04:	62 97       	sbiw	r28, 0x12	; 18
    5f06:	0f b6       	in	r0, 0x3f	; 63
    5f08:	f8 94       	cli
    5f0a:	de bf       	out	0x3e, r29	; 62
    5f0c:	0f be       	out	0x3f, r0	; 63
    5f0e:	cd bf       	out	0x3d, r28	; 61
    5f10:	6d 87       	std	Y+13, r22	; 0x0d
    5f12:	7e 87       	std	Y+14, r23	; 0x0e
    5f14:	8f 87       	std	Y+15, r24	; 0x0f
    5f16:	98 8b       	std	Y+16, r25	; 0x10
    5f18:	49 8b       	std	Y+17, r20	; 0x11
	u32 Local_u32Revolution = Copy_u32Second * (STEPPER_FREQUENCY / 4);
    5f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f1e:	af 85       	ldd	r26, Y+15	; 0x0f
    5f20:	b8 89       	ldd	r27, Y+16	; 0x10
    5f22:	29 e1       	ldi	r18, 0x19	; 25
    5f24:	30 e0       	ldi	r19, 0x00	; 0
    5f26:	40 e0       	ldi	r20, 0x00	; 0
    5f28:	50 e0       	ldi	r21, 0x00	; 0
    5f2a:	bc 01       	movw	r22, r24
    5f2c:	cd 01       	movw	r24, r26
    5f2e:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    5f32:	dc 01       	movw	r26, r24
    5f34:	cb 01       	movw	r24, r22
    5f36:	89 87       	std	Y+9, r24	; 0x09
    5f38:	9a 87       	std	Y+10, r25	; 0x0a
    5f3a:	ab 87       	std	Y+11, r26	; 0x0b
    5f3c:	bc 87       	std	Y+12, r27	; 0x0c
	if (Copy_u8Direction == STEPPER_CW_DIR)
    5f3e:	89 89       	ldd	r24, Y+17	; 0x11
    5f40:	88 23       	and	r24, r24
    5f42:	01 f5       	brne	.+64     	; 0x5f84 <STEPPER_u8RotateBySeconds+0x88>
		for (u32 i = 0; i < Local_u32Revolution; ++i)
    5f44:	1d 82       	std	Y+5, r1	; 0x05
    5f46:	1e 82       	std	Y+6, r1	; 0x06
    5f48:	1f 82       	std	Y+7, r1	; 0x07
    5f4a:	18 86       	std	Y+8, r1	; 0x08
    5f4c:	0d c0       	rjmp	.+26     	; 0x5f68 <STEPPER_u8RotateBySeconds+0x6c>
			STEPPER_voidRotateClockWise();
    5f4e:	0e 94 a9 2a 	call	0x5552	; 0x5552 <STEPPER_voidRotateClockWise>
}

u8 STEPPER_u8RotateBySeconds(u32 Copy_u32Second, u8 Copy_u8Direction) {
	u32 Local_u32Revolution = Copy_u32Second * (STEPPER_FREQUENCY / 4);
	if (Copy_u8Direction == STEPPER_CW_DIR)
		for (u32 i = 0; i < Local_u32Revolution; ++i)
    5f52:	8d 81       	ldd	r24, Y+5	; 0x05
    5f54:	9e 81       	ldd	r25, Y+6	; 0x06
    5f56:	af 81       	ldd	r26, Y+7	; 0x07
    5f58:	b8 85       	ldd	r27, Y+8	; 0x08
    5f5a:	01 96       	adiw	r24, 0x01	; 1
    5f5c:	a1 1d       	adc	r26, r1
    5f5e:	b1 1d       	adc	r27, r1
    5f60:	8d 83       	std	Y+5, r24	; 0x05
    5f62:	9e 83       	std	Y+6, r25	; 0x06
    5f64:	af 83       	std	Y+7, r26	; 0x07
    5f66:	b8 87       	std	Y+8, r27	; 0x08
    5f68:	2d 81       	ldd	r18, Y+5	; 0x05
    5f6a:	3e 81       	ldd	r19, Y+6	; 0x06
    5f6c:	4f 81       	ldd	r20, Y+7	; 0x07
    5f6e:	58 85       	ldd	r21, Y+8	; 0x08
    5f70:	89 85       	ldd	r24, Y+9	; 0x09
    5f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f74:	ab 85       	ldd	r26, Y+11	; 0x0b
    5f76:	bc 85       	ldd	r27, Y+12	; 0x0c
    5f78:	28 17       	cp	r18, r24
    5f7a:	39 07       	cpc	r19, r25
    5f7c:	4a 07       	cpc	r20, r26
    5f7e:	5b 07       	cpc	r21, r27
    5f80:	30 f3       	brcs	.-52     	; 0x5f4e <STEPPER_u8RotateBySeconds+0x52>
    5f82:	26 c0       	rjmp	.+76     	; 0x5fd0 <STEPPER_u8RotateBySeconds+0xd4>
			STEPPER_voidRotateClockWise();
	else if (Copy_u8Direction == STEPPER_CCW_DIR)
    5f84:	89 89       	ldd	r24, Y+17	; 0x11
    5f86:	81 30       	cpi	r24, 0x01	; 1
    5f88:	01 f5       	brne	.+64     	; 0x5fca <STEPPER_u8RotateBySeconds+0xce>
		for (u32 i = 0; i < Local_u32Revolution; ++i)
    5f8a:	19 82       	std	Y+1, r1	; 0x01
    5f8c:	1a 82       	std	Y+2, r1	; 0x02
    5f8e:	1b 82       	std	Y+3, r1	; 0x03
    5f90:	1c 82       	std	Y+4, r1	; 0x04
    5f92:	0d c0       	rjmp	.+26     	; 0x5fae <STEPPER_u8RotateBySeconds+0xb2>
			STEPPER_voidRotateCOUNTERClockWise();
    5f94:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <STEPPER_voidRotateCOUNTERClockWise>
	u32 Local_u32Revolution = Copy_u32Second * (STEPPER_FREQUENCY / 4);
	if (Copy_u8Direction == STEPPER_CW_DIR)
		for (u32 i = 0; i < Local_u32Revolution; ++i)
			STEPPER_voidRotateClockWise();
	else if (Copy_u8Direction == STEPPER_CCW_DIR)
		for (u32 i = 0; i < Local_u32Revolution; ++i)
    5f98:	89 81       	ldd	r24, Y+1	; 0x01
    5f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5f9c:	ab 81       	ldd	r26, Y+3	; 0x03
    5f9e:	bc 81       	ldd	r27, Y+4	; 0x04
    5fa0:	01 96       	adiw	r24, 0x01	; 1
    5fa2:	a1 1d       	adc	r26, r1
    5fa4:	b1 1d       	adc	r27, r1
    5fa6:	89 83       	std	Y+1, r24	; 0x01
    5fa8:	9a 83       	std	Y+2, r25	; 0x02
    5faa:	ab 83       	std	Y+3, r26	; 0x03
    5fac:	bc 83       	std	Y+4, r27	; 0x04
    5fae:	29 81       	ldd	r18, Y+1	; 0x01
    5fb0:	3a 81       	ldd	r19, Y+2	; 0x02
    5fb2:	4b 81       	ldd	r20, Y+3	; 0x03
    5fb4:	5c 81       	ldd	r21, Y+4	; 0x04
    5fb6:	89 85       	ldd	r24, Y+9	; 0x09
    5fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fba:	ab 85       	ldd	r26, Y+11	; 0x0b
    5fbc:	bc 85       	ldd	r27, Y+12	; 0x0c
    5fbe:	28 17       	cp	r18, r24
    5fc0:	39 07       	cpc	r19, r25
    5fc2:	4a 07       	cpc	r20, r26
    5fc4:	5b 07       	cpc	r21, r27
    5fc6:	30 f3       	brcs	.-52     	; 0x5f94 <STEPPER_u8RotateBySeconds+0x98>
    5fc8:	03 c0       	rjmp	.+6      	; 0x5fd0 <STEPPER_u8RotateBySeconds+0xd4>
			STEPPER_voidRotateCOUNTERClockWise();
	else
		return 1;
    5fca:	81 e0       	ldi	r24, 0x01	; 1
    5fcc:	8a 8b       	std	Y+18, r24	; 0x12
    5fce:	01 c0       	rjmp	.+2      	; 0x5fd2 <STEPPER_u8RotateBySeconds+0xd6>
	return 0;
    5fd0:	1a 8a       	std	Y+18, r1	; 0x12
    5fd2:	8a 89       	ldd	r24, Y+18	; 0x12

}
    5fd4:	62 96       	adiw	r28, 0x12	; 18
    5fd6:	0f b6       	in	r0, 0x3f	; 63
    5fd8:	f8 94       	cli
    5fda:	de bf       	out	0x3e, r29	; 62
    5fdc:	0f be       	out	0x3f, r0	; 63
    5fde:	cd bf       	out	0x3d, r28	; 61
    5fe0:	cf 91       	pop	r28
    5fe2:	df 91       	pop	r29
    5fe4:	08 95       	ret

00005fe6 <LCD_voidSendCommand>:
#include <util/delay.h>
#include "LCD_config.h"
#include "LCD_interface.h"
#include "../../MCAL/DIO/DIO_interface.h"

void LCD_voidSendCommand(u8 Copy_u8Command) {
    5fe6:	df 93       	push	r29
    5fe8:	cf 93       	push	r28
    5fea:	cd b7       	in	r28, 0x3d	; 61
    5fec:	de b7       	in	r29, 0x3e	; 62
    5fee:	2f 97       	sbiw	r28, 0x0f	; 15
    5ff0:	0f b6       	in	r0, 0x3f	; 63
    5ff2:	f8 94       	cli
    5ff4:	de bf       	out	0x3e, r29	; 62
    5ff6:	0f be       	out	0x3f, r0	; 63
    5ff8:	cd bf       	out	0x3d, r28	; 61
    5ffa:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CTR_PORT, LCD_RS_PIN, DIO_u8PIN_LOW);
    5ffc:	81 e0       	ldi	r24, 0x01	; 1
    5ffe:	60 e0       	ldi	r22, 0x00	; 0
    6000:	40 e0       	ldi	r20, 0x00	; 0
    6002:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CTR_PORT, LCD_RW_PIN, DIO_u8PIN_LOW);
    6006:	81 e0       	ldi	r24, 0x01	; 1
    6008:	61 e0       	ldi	r22, 0x01	; 1
    600a:	40 e0       	ldi	r20, 0x00	; 0
    600c:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Command);
    6010:	82 e0       	ldi	r24, 0x02	; 2
    6012:	6f 85       	ldd	r22, Y+15	; 0x0f
    6014:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_CTR_PORT, LCD_E_PIN, DIO_u8PIN_HIGH);
    6018:	81 e0       	ldi	r24, 0x01	; 1
    601a:	62 e0       	ldi	r22, 0x02	; 2
    601c:	41 e0       	ldi	r20, 0x01	; 1
    601e:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
    6022:	80 e0       	ldi	r24, 0x00	; 0
    6024:	90 e0       	ldi	r25, 0x00	; 0
    6026:	a0 e8       	ldi	r26, 0x80	; 128
    6028:	b0 e4       	ldi	r27, 0x40	; 64
    602a:	8b 87       	std	Y+11, r24	; 0x0b
    602c:	9c 87       	std	Y+12, r25	; 0x0c
    602e:	ad 87       	std	Y+13, r26	; 0x0d
    6030:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6032:	6b 85       	ldd	r22, Y+11	; 0x0b
    6034:	7c 85       	ldd	r23, Y+12	; 0x0c
    6036:	8d 85       	ldd	r24, Y+13	; 0x0d
    6038:	9e 85       	ldd	r25, Y+14	; 0x0e
    603a:	20 e0       	ldi	r18, 0x00	; 0
    603c:	30 e0       	ldi	r19, 0x00	; 0
    603e:	4a ef       	ldi	r20, 0xFA	; 250
    6040:	54 e4       	ldi	r21, 0x44	; 68
    6042:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    6046:	dc 01       	movw	r26, r24
    6048:	cb 01       	movw	r24, r22
    604a:	8f 83       	std	Y+7, r24	; 0x07
    604c:	98 87       	std	Y+8, r25	; 0x08
    604e:	a9 87       	std	Y+9, r26	; 0x09
    6050:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6052:	6f 81       	ldd	r22, Y+7	; 0x07
    6054:	78 85       	ldd	r23, Y+8	; 0x08
    6056:	89 85       	ldd	r24, Y+9	; 0x09
    6058:	9a 85       	ldd	r25, Y+10	; 0x0a
    605a:	20 e0       	ldi	r18, 0x00	; 0
    605c:	30 e0       	ldi	r19, 0x00	; 0
    605e:	40 e8       	ldi	r20, 0x80	; 128
    6060:	5f e3       	ldi	r21, 0x3F	; 63
    6062:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    6066:	88 23       	and	r24, r24
    6068:	2c f4       	brge	.+10     	; 0x6074 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    606a:	81 e0       	ldi	r24, 0x01	; 1
    606c:	90 e0       	ldi	r25, 0x00	; 0
    606e:	9e 83       	std	Y+6, r25	; 0x06
    6070:	8d 83       	std	Y+5, r24	; 0x05
    6072:	3f c0       	rjmp	.+126    	; 0x60f2 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    6074:	6f 81       	ldd	r22, Y+7	; 0x07
    6076:	78 85       	ldd	r23, Y+8	; 0x08
    6078:	89 85       	ldd	r24, Y+9	; 0x09
    607a:	9a 85       	ldd	r25, Y+10	; 0x0a
    607c:	20 e0       	ldi	r18, 0x00	; 0
    607e:	3f ef       	ldi	r19, 0xFF	; 255
    6080:	4f e7       	ldi	r20, 0x7F	; 127
    6082:	57 e4       	ldi	r21, 0x47	; 71
    6084:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    6088:	18 16       	cp	r1, r24
    608a:	4c f5       	brge	.+82     	; 0x60de <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    608c:	6b 85       	ldd	r22, Y+11	; 0x0b
    608e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6090:	8d 85       	ldd	r24, Y+13	; 0x0d
    6092:	9e 85       	ldd	r25, Y+14	; 0x0e
    6094:	20 e0       	ldi	r18, 0x00	; 0
    6096:	30 e0       	ldi	r19, 0x00	; 0
    6098:	40 e2       	ldi	r20, 0x20	; 32
    609a:	51 e4       	ldi	r21, 0x41	; 65
    609c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    60a0:	dc 01       	movw	r26, r24
    60a2:	cb 01       	movw	r24, r22
    60a4:	bc 01       	movw	r22, r24
    60a6:	cd 01       	movw	r24, r26
    60a8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    60ac:	dc 01       	movw	r26, r24
    60ae:	cb 01       	movw	r24, r22
    60b0:	9e 83       	std	Y+6, r25	; 0x06
    60b2:	8d 83       	std	Y+5, r24	; 0x05
    60b4:	0f c0       	rjmp	.+30     	; 0x60d4 <LCD_voidSendCommand+0xee>
    60b6:	88 ec       	ldi	r24, 0xC8	; 200
    60b8:	90 e0       	ldi	r25, 0x00	; 0
    60ba:	9c 83       	std	Y+4, r25	; 0x04
    60bc:	8b 83       	std	Y+3, r24	; 0x03
    60be:	8b 81       	ldd	r24, Y+3	; 0x03
    60c0:	9c 81       	ldd	r25, Y+4	; 0x04
    60c2:	01 97       	sbiw	r24, 0x01	; 1
    60c4:	f1 f7       	brne	.-4      	; 0x60c2 <LCD_voidSendCommand+0xdc>
    60c6:	9c 83       	std	Y+4, r25	; 0x04
    60c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60ca:	8d 81       	ldd	r24, Y+5	; 0x05
    60cc:	9e 81       	ldd	r25, Y+6	; 0x06
    60ce:	01 97       	sbiw	r24, 0x01	; 1
    60d0:	9e 83       	std	Y+6, r25	; 0x06
    60d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60d4:	8d 81       	ldd	r24, Y+5	; 0x05
    60d6:	9e 81       	ldd	r25, Y+6	; 0x06
    60d8:	00 97       	sbiw	r24, 0x00	; 0
    60da:	69 f7       	brne	.-38     	; 0x60b6 <LCD_voidSendCommand+0xd0>
    60dc:	14 c0       	rjmp	.+40     	; 0x6106 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60de:	6f 81       	ldd	r22, Y+7	; 0x07
    60e0:	78 85       	ldd	r23, Y+8	; 0x08
    60e2:	89 85       	ldd	r24, Y+9	; 0x09
    60e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    60e6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    60ea:	dc 01       	movw	r26, r24
    60ec:	cb 01       	movw	r24, r22
    60ee:	9e 83       	std	Y+6, r25	; 0x06
    60f0:	8d 83       	std	Y+5, r24	; 0x05
    60f2:	8d 81       	ldd	r24, Y+5	; 0x05
    60f4:	9e 81       	ldd	r25, Y+6	; 0x06
    60f6:	9a 83       	std	Y+2, r25	; 0x02
    60f8:	89 83       	std	Y+1, r24	; 0x01
    60fa:	89 81       	ldd	r24, Y+1	; 0x01
    60fc:	9a 81       	ldd	r25, Y+2	; 0x02
    60fe:	01 97       	sbiw	r24, 0x01	; 1
    6100:	f1 f7       	brne	.-4      	; 0x60fe <LCD_voidSendCommand+0x118>
    6102:	9a 83       	std	Y+2, r25	; 0x02
    6104:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);
	DIO_u8SetPinValue(LCD_CTR_PORT, LCD_E_PIN, DIO_u8PIN_LOW);
    6106:	81 e0       	ldi	r24, 0x01	; 1
    6108:	62 e0       	ldi	r22, 0x02	; 2
    610a:	40 e0       	ldi	r20, 0x00	; 0
    610c:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>

}
    6110:	2f 96       	adiw	r28, 0x0f	; 15
    6112:	0f b6       	in	r0, 0x3f	; 63
    6114:	f8 94       	cli
    6116:	de bf       	out	0x3e, r29	; 62
    6118:	0f be       	out	0x3f, r0	; 63
    611a:	cd bf       	out	0x3d, r28	; 61
    611c:	cf 91       	pop	r28
    611e:	df 91       	pop	r29
    6120:	08 95       	ret

00006122 <LCD_voidSendData>:
;

void LCD_voidSendData(u8 Copy_u8Data) {
    6122:	df 93       	push	r29
    6124:	cf 93       	push	r28
    6126:	cd b7       	in	r28, 0x3d	; 61
    6128:	de b7       	in	r29, 0x3e	; 62
    612a:	2f 97       	sbiw	r28, 0x0f	; 15
    612c:	0f b6       	in	r0, 0x3f	; 63
    612e:	f8 94       	cli
    6130:	de bf       	out	0x3e, r29	; 62
    6132:	0f be       	out	0x3f, r0	; 63
    6134:	cd bf       	out	0x3d, r28	; 61
    6136:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CTR_PORT, LCD_RS_PIN, DIO_u8PIN_HIGH);
    6138:	81 e0       	ldi	r24, 0x01	; 1
    613a:	60 e0       	ldi	r22, 0x00	; 0
    613c:	41 e0       	ldi	r20, 0x01	; 1
    613e:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CTR_PORT, LCD_RW_PIN, DIO_u8PIN_LOW);
    6142:	81 e0       	ldi	r24, 0x01	; 1
    6144:	61 e0       	ldi	r22, 0x01	; 1
    6146:	40 e0       	ldi	r20, 0x00	; 0
    6148:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Data);
    614c:	82 e0       	ldi	r24, 0x02	; 2
    614e:	6f 85       	ldd	r22, Y+15	; 0x0f
    6150:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_CTR_PORT, LCD_E_PIN, DIO_u8PIN_HIGH);
    6154:	81 e0       	ldi	r24, 0x01	; 1
    6156:	62 e0       	ldi	r22, 0x02	; 2
    6158:	41 e0       	ldi	r20, 0x01	; 1
    615a:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
    615e:	80 e0       	ldi	r24, 0x00	; 0
    6160:	90 e0       	ldi	r25, 0x00	; 0
    6162:	a0 e8       	ldi	r26, 0x80	; 128
    6164:	b0 e4       	ldi	r27, 0x40	; 64
    6166:	8b 87       	std	Y+11, r24	; 0x0b
    6168:	9c 87       	std	Y+12, r25	; 0x0c
    616a:	ad 87       	std	Y+13, r26	; 0x0d
    616c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    616e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6170:	7c 85       	ldd	r23, Y+12	; 0x0c
    6172:	8d 85       	ldd	r24, Y+13	; 0x0d
    6174:	9e 85       	ldd	r25, Y+14	; 0x0e
    6176:	20 e0       	ldi	r18, 0x00	; 0
    6178:	30 e0       	ldi	r19, 0x00	; 0
    617a:	4a ef       	ldi	r20, 0xFA	; 250
    617c:	54 e4       	ldi	r21, 0x44	; 68
    617e:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    6182:	dc 01       	movw	r26, r24
    6184:	cb 01       	movw	r24, r22
    6186:	8f 83       	std	Y+7, r24	; 0x07
    6188:	98 87       	std	Y+8, r25	; 0x08
    618a:	a9 87       	std	Y+9, r26	; 0x09
    618c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    618e:	6f 81       	ldd	r22, Y+7	; 0x07
    6190:	78 85       	ldd	r23, Y+8	; 0x08
    6192:	89 85       	ldd	r24, Y+9	; 0x09
    6194:	9a 85       	ldd	r25, Y+10	; 0x0a
    6196:	20 e0       	ldi	r18, 0x00	; 0
    6198:	30 e0       	ldi	r19, 0x00	; 0
    619a:	40 e8       	ldi	r20, 0x80	; 128
    619c:	5f e3       	ldi	r21, 0x3F	; 63
    619e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    61a2:	88 23       	and	r24, r24
    61a4:	2c f4       	brge	.+10     	; 0x61b0 <LCD_voidSendData+0x8e>
		__ticks = 1;
    61a6:	81 e0       	ldi	r24, 0x01	; 1
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	9e 83       	std	Y+6, r25	; 0x06
    61ac:	8d 83       	std	Y+5, r24	; 0x05
    61ae:	3f c0       	rjmp	.+126    	; 0x622e <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    61b0:	6f 81       	ldd	r22, Y+7	; 0x07
    61b2:	78 85       	ldd	r23, Y+8	; 0x08
    61b4:	89 85       	ldd	r24, Y+9	; 0x09
    61b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    61b8:	20 e0       	ldi	r18, 0x00	; 0
    61ba:	3f ef       	ldi	r19, 0xFF	; 255
    61bc:	4f e7       	ldi	r20, 0x7F	; 127
    61be:	57 e4       	ldi	r21, 0x47	; 71
    61c0:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    61c4:	18 16       	cp	r1, r24
    61c6:	4c f5       	brge	.+82     	; 0x621a <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    61ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    61cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    61ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    61d0:	20 e0       	ldi	r18, 0x00	; 0
    61d2:	30 e0       	ldi	r19, 0x00	; 0
    61d4:	40 e2       	ldi	r20, 0x20	; 32
    61d6:	51 e4       	ldi	r21, 0x41	; 65
    61d8:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    61dc:	dc 01       	movw	r26, r24
    61de:	cb 01       	movw	r24, r22
    61e0:	bc 01       	movw	r22, r24
    61e2:	cd 01       	movw	r24, r26
    61e4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    61e8:	dc 01       	movw	r26, r24
    61ea:	cb 01       	movw	r24, r22
    61ec:	9e 83       	std	Y+6, r25	; 0x06
    61ee:	8d 83       	std	Y+5, r24	; 0x05
    61f0:	0f c0       	rjmp	.+30     	; 0x6210 <LCD_voidSendData+0xee>
    61f2:	88 ec       	ldi	r24, 0xC8	; 200
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	9c 83       	std	Y+4, r25	; 0x04
    61f8:	8b 83       	std	Y+3, r24	; 0x03
    61fa:	8b 81       	ldd	r24, Y+3	; 0x03
    61fc:	9c 81       	ldd	r25, Y+4	; 0x04
    61fe:	01 97       	sbiw	r24, 0x01	; 1
    6200:	f1 f7       	brne	.-4      	; 0x61fe <LCD_voidSendData+0xdc>
    6202:	9c 83       	std	Y+4, r25	; 0x04
    6204:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6206:	8d 81       	ldd	r24, Y+5	; 0x05
    6208:	9e 81       	ldd	r25, Y+6	; 0x06
    620a:	01 97       	sbiw	r24, 0x01	; 1
    620c:	9e 83       	std	Y+6, r25	; 0x06
    620e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6210:	8d 81       	ldd	r24, Y+5	; 0x05
    6212:	9e 81       	ldd	r25, Y+6	; 0x06
    6214:	00 97       	sbiw	r24, 0x00	; 0
    6216:	69 f7       	brne	.-38     	; 0x61f2 <LCD_voidSendData+0xd0>
    6218:	14 c0       	rjmp	.+40     	; 0x6242 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    621a:	6f 81       	ldd	r22, Y+7	; 0x07
    621c:	78 85       	ldd	r23, Y+8	; 0x08
    621e:	89 85       	ldd	r24, Y+9	; 0x09
    6220:	9a 85       	ldd	r25, Y+10	; 0x0a
    6222:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6226:	dc 01       	movw	r26, r24
    6228:	cb 01       	movw	r24, r22
    622a:	9e 83       	std	Y+6, r25	; 0x06
    622c:	8d 83       	std	Y+5, r24	; 0x05
    622e:	8d 81       	ldd	r24, Y+5	; 0x05
    6230:	9e 81       	ldd	r25, Y+6	; 0x06
    6232:	9a 83       	std	Y+2, r25	; 0x02
    6234:	89 83       	std	Y+1, r24	; 0x01
    6236:	89 81       	ldd	r24, Y+1	; 0x01
    6238:	9a 81       	ldd	r25, Y+2	; 0x02
    623a:	01 97       	sbiw	r24, 0x01	; 1
    623c:	f1 f7       	brne	.-4      	; 0x623a <LCD_voidSendData+0x118>
    623e:	9a 83       	std	Y+2, r25	; 0x02
    6240:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);
	DIO_u8SetPinValue(LCD_CTR_PORT, LCD_E_PIN, DIO_u8PIN_LOW);
    6242:	81 e0       	ldi	r24, 0x01	; 1
    6244:	62 e0       	ldi	r22, 0x02	; 2
    6246:	40 e0       	ldi	r20, 0x00	; 0
    6248:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>

}
    624c:	2f 96       	adiw	r28, 0x0f	; 15
    624e:	0f b6       	in	r0, 0x3f	; 63
    6250:	f8 94       	cli
    6252:	de bf       	out	0x3e, r29	; 62
    6254:	0f be       	out	0x3f, r0	; 63
    6256:	cd bf       	out	0x3d, r28	; 61
    6258:	cf 91       	pop	r28
    625a:	df 91       	pop	r29
    625c:	08 95       	ret

0000625e <LCD_voidSendString>:
;

void LCD_voidSendString(pu8 Copy_pu8Data) {
    625e:	df 93       	push	r29
    6260:	cf 93       	push	r28
    6262:	00 d0       	rcall	.+0      	; 0x6264 <LCD_voidSendString+0x6>
    6264:	0f 92       	push	r0
    6266:	cd b7       	in	r28, 0x3d	; 61
    6268:	de b7       	in	r29, 0x3e	; 62
    626a:	9b 83       	std	Y+3, r25	; 0x03
    626c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    626e:	19 82       	std	Y+1, r1	; 0x01
    6270:	0e c0       	rjmp	.+28     	; 0x628e <LCD_voidSendString+0x30>
	while (Copy_pu8Data[i] != '\0') {
		LCD_voidSendData(Copy_pu8Data[i]);
    6272:	89 81       	ldd	r24, Y+1	; 0x01
    6274:	28 2f       	mov	r18, r24
    6276:	30 e0       	ldi	r19, 0x00	; 0
    6278:	8a 81       	ldd	r24, Y+2	; 0x02
    627a:	9b 81       	ldd	r25, Y+3	; 0x03
    627c:	fc 01       	movw	r30, r24
    627e:	e2 0f       	add	r30, r18
    6280:	f3 1f       	adc	r31, r19
    6282:	80 81       	ld	r24, Z
    6284:	0e 94 91 30 	call	0x6122	; 0x6122 <LCD_voidSendData>
		i++;
    6288:	89 81       	ldd	r24, Y+1	; 0x01
    628a:	8f 5f       	subi	r24, 0xFF	; 255
    628c:	89 83       	std	Y+1, r24	; 0x01
}
;

void LCD_voidSendString(pu8 Copy_pu8Data) {
	u8 i = 0;
	while (Copy_pu8Data[i] != '\0') {
    628e:	89 81       	ldd	r24, Y+1	; 0x01
    6290:	28 2f       	mov	r18, r24
    6292:	30 e0       	ldi	r19, 0x00	; 0
    6294:	8a 81       	ldd	r24, Y+2	; 0x02
    6296:	9b 81       	ldd	r25, Y+3	; 0x03
    6298:	fc 01       	movw	r30, r24
    629a:	e2 0f       	add	r30, r18
    629c:	f3 1f       	adc	r31, r19
    629e:	80 81       	ld	r24, Z
    62a0:	88 23       	and	r24, r24
    62a2:	39 f7       	brne	.-50     	; 0x6272 <LCD_voidSendString+0x14>
		LCD_voidSendData(Copy_pu8Data[i]);
		i++;
	}
}
    62a4:	0f 90       	pop	r0
    62a6:	0f 90       	pop	r0
    62a8:	0f 90       	pop	r0
    62aa:	cf 91       	pop	r28
    62ac:	df 91       	pop	r29
    62ae:	08 95       	ret

000062b0 <LCD_voidInit>:
;

void LCD_voidInit() {
    62b0:	df 93       	push	r29
    62b2:	cf 93       	push	r28
    62b4:	cd b7       	in	r28, 0x3d	; 61
    62b6:	de b7       	in	r29, 0x3e	; 62
    62b8:	2e 97       	sbiw	r28, 0x0e	; 14
    62ba:	0f b6       	in	r0, 0x3f	; 63
    62bc:	f8 94       	cli
    62be:	de bf       	out	0x3e, r29	; 62
    62c0:	0f be       	out	0x3f, r0	; 63
    62c2:	cd bf       	out	0x3d, r28	; 61
    62c4:	80 e0       	ldi	r24, 0x00	; 0
    62c6:	90 e0       	ldi	r25, 0x00	; 0
    62c8:	a0 e2       	ldi	r26, 0x20	; 32
    62ca:	b2 e4       	ldi	r27, 0x42	; 66
    62cc:	8b 87       	std	Y+11, r24	; 0x0b
    62ce:	9c 87       	std	Y+12, r25	; 0x0c
    62d0:	ad 87       	std	Y+13, r26	; 0x0d
    62d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    62d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    62d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    62da:	9e 85       	ldd	r25, Y+14	; 0x0e
    62dc:	20 e0       	ldi	r18, 0x00	; 0
    62de:	30 e0       	ldi	r19, 0x00	; 0
    62e0:	4a ef       	ldi	r20, 0xFA	; 250
    62e2:	54 e4       	ldi	r21, 0x44	; 68
    62e4:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    62e8:	dc 01       	movw	r26, r24
    62ea:	cb 01       	movw	r24, r22
    62ec:	8f 83       	std	Y+7, r24	; 0x07
    62ee:	98 87       	std	Y+8, r25	; 0x08
    62f0:	a9 87       	std	Y+9, r26	; 0x09
    62f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    62f4:	6f 81       	ldd	r22, Y+7	; 0x07
    62f6:	78 85       	ldd	r23, Y+8	; 0x08
    62f8:	89 85       	ldd	r24, Y+9	; 0x09
    62fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    62fc:	20 e0       	ldi	r18, 0x00	; 0
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	40 e8       	ldi	r20, 0x80	; 128
    6302:	5f e3       	ldi	r21, 0x3F	; 63
    6304:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    6308:	88 23       	and	r24, r24
    630a:	2c f4       	brge	.+10     	; 0x6316 <LCD_voidInit+0x66>
		__ticks = 1;
    630c:	81 e0       	ldi	r24, 0x01	; 1
    630e:	90 e0       	ldi	r25, 0x00	; 0
    6310:	9e 83       	std	Y+6, r25	; 0x06
    6312:	8d 83       	std	Y+5, r24	; 0x05
    6314:	3f c0       	rjmp	.+126    	; 0x6394 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    6316:	6f 81       	ldd	r22, Y+7	; 0x07
    6318:	78 85       	ldd	r23, Y+8	; 0x08
    631a:	89 85       	ldd	r24, Y+9	; 0x09
    631c:	9a 85       	ldd	r25, Y+10	; 0x0a
    631e:	20 e0       	ldi	r18, 0x00	; 0
    6320:	3f ef       	ldi	r19, 0xFF	; 255
    6322:	4f e7       	ldi	r20, 0x7F	; 127
    6324:	57 e4       	ldi	r21, 0x47	; 71
    6326:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    632a:	18 16       	cp	r1, r24
    632c:	4c f5       	brge	.+82     	; 0x6380 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    632e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6330:	7c 85       	ldd	r23, Y+12	; 0x0c
    6332:	8d 85       	ldd	r24, Y+13	; 0x0d
    6334:	9e 85       	ldd	r25, Y+14	; 0x0e
    6336:	20 e0       	ldi	r18, 0x00	; 0
    6338:	30 e0       	ldi	r19, 0x00	; 0
    633a:	40 e2       	ldi	r20, 0x20	; 32
    633c:	51 e4       	ldi	r21, 0x41	; 65
    633e:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    6342:	dc 01       	movw	r26, r24
    6344:	cb 01       	movw	r24, r22
    6346:	bc 01       	movw	r22, r24
    6348:	cd 01       	movw	r24, r26
    634a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    634e:	dc 01       	movw	r26, r24
    6350:	cb 01       	movw	r24, r22
    6352:	9e 83       	std	Y+6, r25	; 0x06
    6354:	8d 83       	std	Y+5, r24	; 0x05
    6356:	0f c0       	rjmp	.+30     	; 0x6376 <LCD_voidInit+0xc6>
    6358:	88 ec       	ldi	r24, 0xC8	; 200
    635a:	90 e0       	ldi	r25, 0x00	; 0
    635c:	9c 83       	std	Y+4, r25	; 0x04
    635e:	8b 83       	std	Y+3, r24	; 0x03
    6360:	8b 81       	ldd	r24, Y+3	; 0x03
    6362:	9c 81       	ldd	r25, Y+4	; 0x04
    6364:	01 97       	sbiw	r24, 0x01	; 1
    6366:	f1 f7       	brne	.-4      	; 0x6364 <LCD_voidInit+0xb4>
    6368:	9c 83       	std	Y+4, r25	; 0x04
    636a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    636c:	8d 81       	ldd	r24, Y+5	; 0x05
    636e:	9e 81       	ldd	r25, Y+6	; 0x06
    6370:	01 97       	sbiw	r24, 0x01	; 1
    6372:	9e 83       	std	Y+6, r25	; 0x06
    6374:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6376:	8d 81       	ldd	r24, Y+5	; 0x05
    6378:	9e 81       	ldd	r25, Y+6	; 0x06
    637a:	00 97       	sbiw	r24, 0x00	; 0
    637c:	69 f7       	brne	.-38     	; 0x6358 <LCD_voidInit+0xa8>
    637e:	14 c0       	rjmp	.+40     	; 0x63a8 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6380:	6f 81       	ldd	r22, Y+7	; 0x07
    6382:	78 85       	ldd	r23, Y+8	; 0x08
    6384:	89 85       	ldd	r24, Y+9	; 0x09
    6386:	9a 85       	ldd	r25, Y+10	; 0x0a
    6388:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    638c:	dc 01       	movw	r26, r24
    638e:	cb 01       	movw	r24, r22
    6390:	9e 83       	std	Y+6, r25	; 0x06
    6392:	8d 83       	std	Y+5, r24	; 0x05
    6394:	8d 81       	ldd	r24, Y+5	; 0x05
    6396:	9e 81       	ldd	r25, Y+6	; 0x06
    6398:	9a 83       	std	Y+2, r25	; 0x02
    639a:	89 83       	std	Y+1, r24	; 0x01
    639c:	89 81       	ldd	r24, Y+1	; 0x01
    639e:	9a 81       	ldd	r25, Y+2	; 0x02
    63a0:	01 97       	sbiw	r24, 0x01	; 1
    63a2:	f1 f7       	brne	.-4      	; 0x63a0 <LCD_voidInit+0xf0>
    63a4:	9a 83       	std	Y+2, r25	; 0x02
    63a6:	89 83       	std	Y+1, r24	; 0x01
//	DIO_u8SetPinDirection(LCD_CTR_PORT, LCD_RW_PIN, DIO_u8PIN_OUTPUT);
//	DIO_u8SetPinDirection(LCD_CTR_PORT, LCD_RS_PIN, DIO_u8PIN_OUTPUT);
//	DIO_u8SetPinDirection(LCD_CTR_PORT, LCD_E_PIN, DIO_u8PIN_OUTPUT);

	_delay_ms(40);
	LCD_voidSendCommand(FUNC_SET_SMALL_TWO_LINE);
    63a8:	88 e3       	ldi	r24, 0x38	; 56
    63aa:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <LCD_voidSendCommand>
	LCD_voidSendCommand(DISPLAY_ON_NO_CURSOR);
    63ae:	8c e0       	ldi	r24, 0x0C	; 12
    63b0:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <LCD_voidSendCommand>
	LCD_voidSendCommand(DISPLAY_CLEAR);
    63b4:	81 e0       	ldi	r24, 0x01	; 1
    63b6:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <LCD_voidSendCommand>
}
    63ba:	2e 96       	adiw	r28, 0x0e	; 14
    63bc:	0f b6       	in	r0, 0x3f	; 63
    63be:	f8 94       	cli
    63c0:	de bf       	out	0x3e, r29	; 62
    63c2:	0f be       	out	0x3f, r0	; 63
    63c4:	cd bf       	out	0x3d, r28	; 61
    63c6:	cf 91       	pop	r28
    63c8:	df 91       	pop	r29
    63ca:	08 95       	ret

000063cc <LCD_voidShiftDisplayRight>:
;

void LCD_voidShiftDisplayRight(u8 Copy_u8ShiftingNumber) {
    63cc:	df 93       	push	r29
    63ce:	cf 93       	push	r28
    63d0:	cd b7       	in	r28, 0x3d	; 61
    63d2:	de b7       	in	r29, 0x3e	; 62
    63d4:	60 97       	sbiw	r28, 0x10	; 16
    63d6:	0f b6       	in	r0, 0x3f	; 63
    63d8:	f8 94       	cli
    63da:	de bf       	out	0x3e, r29	; 62
    63dc:	0f be       	out	0x3f, r0	; 63
    63de:	cd bf       	out	0x3d, r28	; 61
    63e0:	88 8b       	std	Y+16, r24	; 0x10
	for (u8 i = 0; i < Copy_u8ShiftingNumber; i++) {
    63e2:	1f 86       	std	Y+15, r1	; 0x0f
    63e4:	78 c0       	rjmp	.+240    	; 0x64d6 <LCD_voidShiftDisplayRight+0x10a>
    63e6:	80 e0       	ldi	r24, 0x00	; 0
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	a8 ec       	ldi	r26, 0xC8	; 200
    63ec:	b2 e4       	ldi	r27, 0x42	; 66
    63ee:	8b 87       	std	Y+11, r24	; 0x0b
    63f0:	9c 87       	std	Y+12, r25	; 0x0c
    63f2:	ad 87       	std	Y+13, r26	; 0x0d
    63f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    63f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    63fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    63fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    63fe:	20 e0       	ldi	r18, 0x00	; 0
    6400:	30 e0       	ldi	r19, 0x00	; 0
    6402:	4a ef       	ldi	r20, 0xFA	; 250
    6404:	54 e4       	ldi	r21, 0x44	; 68
    6406:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    640a:	dc 01       	movw	r26, r24
    640c:	cb 01       	movw	r24, r22
    640e:	8f 83       	std	Y+7, r24	; 0x07
    6410:	98 87       	std	Y+8, r25	; 0x08
    6412:	a9 87       	std	Y+9, r26	; 0x09
    6414:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6416:	6f 81       	ldd	r22, Y+7	; 0x07
    6418:	78 85       	ldd	r23, Y+8	; 0x08
    641a:	89 85       	ldd	r24, Y+9	; 0x09
    641c:	9a 85       	ldd	r25, Y+10	; 0x0a
    641e:	20 e0       	ldi	r18, 0x00	; 0
    6420:	30 e0       	ldi	r19, 0x00	; 0
    6422:	40 e8       	ldi	r20, 0x80	; 128
    6424:	5f e3       	ldi	r21, 0x3F	; 63
    6426:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    642a:	88 23       	and	r24, r24
    642c:	2c f4       	brge	.+10     	; 0x6438 <LCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    642e:	81 e0       	ldi	r24, 0x01	; 1
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	9e 83       	std	Y+6, r25	; 0x06
    6434:	8d 83       	std	Y+5, r24	; 0x05
    6436:	3f c0       	rjmp	.+126    	; 0x64b6 <LCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    6438:	6f 81       	ldd	r22, Y+7	; 0x07
    643a:	78 85       	ldd	r23, Y+8	; 0x08
    643c:	89 85       	ldd	r24, Y+9	; 0x09
    643e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6440:	20 e0       	ldi	r18, 0x00	; 0
    6442:	3f ef       	ldi	r19, 0xFF	; 255
    6444:	4f e7       	ldi	r20, 0x7F	; 127
    6446:	57 e4       	ldi	r21, 0x47	; 71
    6448:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    644c:	18 16       	cp	r1, r24
    644e:	4c f5       	brge	.+82     	; 0x64a2 <LCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6450:	6b 85       	ldd	r22, Y+11	; 0x0b
    6452:	7c 85       	ldd	r23, Y+12	; 0x0c
    6454:	8d 85       	ldd	r24, Y+13	; 0x0d
    6456:	9e 85       	ldd	r25, Y+14	; 0x0e
    6458:	20 e0       	ldi	r18, 0x00	; 0
    645a:	30 e0       	ldi	r19, 0x00	; 0
    645c:	40 e2       	ldi	r20, 0x20	; 32
    645e:	51 e4       	ldi	r21, 0x41	; 65
    6460:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    6464:	dc 01       	movw	r26, r24
    6466:	cb 01       	movw	r24, r22
    6468:	bc 01       	movw	r22, r24
    646a:	cd 01       	movw	r24, r26
    646c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6470:	dc 01       	movw	r26, r24
    6472:	cb 01       	movw	r24, r22
    6474:	9e 83       	std	Y+6, r25	; 0x06
    6476:	8d 83       	std	Y+5, r24	; 0x05
    6478:	0f c0       	rjmp	.+30     	; 0x6498 <LCD_voidShiftDisplayRight+0xcc>
    647a:	88 ec       	ldi	r24, 0xC8	; 200
    647c:	90 e0       	ldi	r25, 0x00	; 0
    647e:	9c 83       	std	Y+4, r25	; 0x04
    6480:	8b 83       	std	Y+3, r24	; 0x03
    6482:	8b 81       	ldd	r24, Y+3	; 0x03
    6484:	9c 81       	ldd	r25, Y+4	; 0x04
    6486:	01 97       	sbiw	r24, 0x01	; 1
    6488:	f1 f7       	brne	.-4      	; 0x6486 <LCD_voidShiftDisplayRight+0xba>
    648a:	9c 83       	std	Y+4, r25	; 0x04
    648c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    648e:	8d 81       	ldd	r24, Y+5	; 0x05
    6490:	9e 81       	ldd	r25, Y+6	; 0x06
    6492:	01 97       	sbiw	r24, 0x01	; 1
    6494:	9e 83       	std	Y+6, r25	; 0x06
    6496:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6498:	8d 81       	ldd	r24, Y+5	; 0x05
    649a:	9e 81       	ldd	r25, Y+6	; 0x06
    649c:	00 97       	sbiw	r24, 0x00	; 0
    649e:	69 f7       	brne	.-38     	; 0x647a <LCD_voidShiftDisplayRight+0xae>
    64a0:	14 c0       	rjmp	.+40     	; 0x64ca <LCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64a2:	6f 81       	ldd	r22, Y+7	; 0x07
    64a4:	78 85       	ldd	r23, Y+8	; 0x08
    64a6:	89 85       	ldd	r24, Y+9	; 0x09
    64a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    64aa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    64ae:	dc 01       	movw	r26, r24
    64b0:	cb 01       	movw	r24, r22
    64b2:	9e 83       	std	Y+6, r25	; 0x06
    64b4:	8d 83       	std	Y+5, r24	; 0x05
    64b6:	8d 81       	ldd	r24, Y+5	; 0x05
    64b8:	9e 81       	ldd	r25, Y+6	; 0x06
    64ba:	9a 83       	std	Y+2, r25	; 0x02
    64bc:	89 83       	std	Y+1, r24	; 0x01
    64be:	89 81       	ldd	r24, Y+1	; 0x01
    64c0:	9a 81       	ldd	r25, Y+2	; 0x02
    64c2:	01 97       	sbiw	r24, 0x01	; 1
    64c4:	f1 f7       	brne	.-4      	; 0x64c2 <LCD_voidShiftDisplayRight+0xf6>
    64c6:	9a 83       	std	Y+2, r25	; 0x02
    64c8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		LCD_voidSendCommand(SHIFT_DISPLAY_RIGHT);
    64ca:	8c e1       	ldi	r24, 0x1C	; 28
    64cc:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <LCD_voidSendCommand>
	LCD_voidSendCommand(DISPLAY_CLEAR);
}
;

void LCD_voidShiftDisplayRight(u8 Copy_u8ShiftingNumber) {
	for (u8 i = 0; i < Copy_u8ShiftingNumber; i++) {
    64d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    64d2:	8f 5f       	subi	r24, 0xFF	; 255
    64d4:	8f 87       	std	Y+15, r24	; 0x0f
    64d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    64d8:	88 89       	ldd	r24, Y+16	; 0x10
    64da:	98 17       	cp	r25, r24
    64dc:	08 f4       	brcc	.+2      	; 0x64e0 <LCD_voidShiftDisplayRight+0x114>
    64de:	83 cf       	rjmp	.-250    	; 0x63e6 <LCD_voidShiftDisplayRight+0x1a>
		_delay_ms(100);
		LCD_voidSendCommand(SHIFT_DISPLAY_RIGHT);
	}
}
    64e0:	60 96       	adiw	r28, 0x10	; 16
    64e2:	0f b6       	in	r0, 0x3f	; 63
    64e4:	f8 94       	cli
    64e6:	de bf       	out	0x3e, r29	; 62
    64e8:	0f be       	out	0x3f, r0	; 63
    64ea:	cd bf       	out	0x3d, r28	; 61
    64ec:	cf 91       	pop	r28
    64ee:	df 91       	pop	r29
    64f0:	08 95       	ret

000064f2 <LCD_voidShiftDisplayLeft>:

void LCD_voidShiftDisplayLeft(u8 Copy_u8ShiftingNumber) {
    64f2:	df 93       	push	r29
    64f4:	cf 93       	push	r28
    64f6:	cd b7       	in	r28, 0x3d	; 61
    64f8:	de b7       	in	r29, 0x3e	; 62
    64fa:	60 97       	sbiw	r28, 0x10	; 16
    64fc:	0f b6       	in	r0, 0x3f	; 63
    64fe:	f8 94       	cli
    6500:	de bf       	out	0x3e, r29	; 62
    6502:	0f be       	out	0x3f, r0	; 63
    6504:	cd bf       	out	0x3d, r28	; 61
    6506:	88 8b       	std	Y+16, r24	; 0x10
	for (u8 i = 0; i < Copy_u8ShiftingNumber; i++) {
    6508:	1f 86       	std	Y+15, r1	; 0x0f
    650a:	78 c0       	rjmp	.+240    	; 0x65fc <LCD_voidShiftDisplayLeft+0x10a>
    650c:	80 e0       	ldi	r24, 0x00	; 0
    650e:	90 e0       	ldi	r25, 0x00	; 0
    6510:	a8 ec       	ldi	r26, 0xC8	; 200
    6512:	b2 e4       	ldi	r27, 0x42	; 66
    6514:	8b 87       	std	Y+11, r24	; 0x0b
    6516:	9c 87       	std	Y+12, r25	; 0x0c
    6518:	ad 87       	std	Y+13, r26	; 0x0d
    651a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    651c:	6b 85       	ldd	r22, Y+11	; 0x0b
    651e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6520:	8d 85       	ldd	r24, Y+13	; 0x0d
    6522:	9e 85       	ldd	r25, Y+14	; 0x0e
    6524:	20 e0       	ldi	r18, 0x00	; 0
    6526:	30 e0       	ldi	r19, 0x00	; 0
    6528:	4a ef       	ldi	r20, 0xFA	; 250
    652a:	54 e4       	ldi	r21, 0x44	; 68
    652c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    6530:	dc 01       	movw	r26, r24
    6532:	cb 01       	movw	r24, r22
    6534:	8f 83       	std	Y+7, r24	; 0x07
    6536:	98 87       	std	Y+8, r25	; 0x08
    6538:	a9 87       	std	Y+9, r26	; 0x09
    653a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    653c:	6f 81       	ldd	r22, Y+7	; 0x07
    653e:	78 85       	ldd	r23, Y+8	; 0x08
    6540:	89 85       	ldd	r24, Y+9	; 0x09
    6542:	9a 85       	ldd	r25, Y+10	; 0x0a
    6544:	20 e0       	ldi	r18, 0x00	; 0
    6546:	30 e0       	ldi	r19, 0x00	; 0
    6548:	40 e8       	ldi	r20, 0x80	; 128
    654a:	5f e3       	ldi	r21, 0x3F	; 63
    654c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    6550:	88 23       	and	r24, r24
    6552:	2c f4       	brge	.+10     	; 0x655e <LCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    6554:	81 e0       	ldi	r24, 0x01	; 1
    6556:	90 e0       	ldi	r25, 0x00	; 0
    6558:	9e 83       	std	Y+6, r25	; 0x06
    655a:	8d 83       	std	Y+5, r24	; 0x05
    655c:	3f c0       	rjmp	.+126    	; 0x65dc <LCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    655e:	6f 81       	ldd	r22, Y+7	; 0x07
    6560:	78 85       	ldd	r23, Y+8	; 0x08
    6562:	89 85       	ldd	r24, Y+9	; 0x09
    6564:	9a 85       	ldd	r25, Y+10	; 0x0a
    6566:	20 e0       	ldi	r18, 0x00	; 0
    6568:	3f ef       	ldi	r19, 0xFF	; 255
    656a:	4f e7       	ldi	r20, 0x7F	; 127
    656c:	57 e4       	ldi	r21, 0x47	; 71
    656e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    6572:	18 16       	cp	r1, r24
    6574:	4c f5       	brge	.+82     	; 0x65c8 <LCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6576:	6b 85       	ldd	r22, Y+11	; 0x0b
    6578:	7c 85       	ldd	r23, Y+12	; 0x0c
    657a:	8d 85       	ldd	r24, Y+13	; 0x0d
    657c:	9e 85       	ldd	r25, Y+14	; 0x0e
    657e:	20 e0       	ldi	r18, 0x00	; 0
    6580:	30 e0       	ldi	r19, 0x00	; 0
    6582:	40 e2       	ldi	r20, 0x20	; 32
    6584:	51 e4       	ldi	r21, 0x41	; 65
    6586:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    658a:	dc 01       	movw	r26, r24
    658c:	cb 01       	movw	r24, r22
    658e:	bc 01       	movw	r22, r24
    6590:	cd 01       	movw	r24, r26
    6592:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6596:	dc 01       	movw	r26, r24
    6598:	cb 01       	movw	r24, r22
    659a:	9e 83       	std	Y+6, r25	; 0x06
    659c:	8d 83       	std	Y+5, r24	; 0x05
    659e:	0f c0       	rjmp	.+30     	; 0x65be <LCD_voidShiftDisplayLeft+0xcc>
    65a0:	88 ec       	ldi	r24, 0xC8	; 200
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	9c 83       	std	Y+4, r25	; 0x04
    65a6:	8b 83       	std	Y+3, r24	; 0x03
    65a8:	8b 81       	ldd	r24, Y+3	; 0x03
    65aa:	9c 81       	ldd	r25, Y+4	; 0x04
    65ac:	01 97       	sbiw	r24, 0x01	; 1
    65ae:	f1 f7       	brne	.-4      	; 0x65ac <LCD_voidShiftDisplayLeft+0xba>
    65b0:	9c 83       	std	Y+4, r25	; 0x04
    65b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65b4:	8d 81       	ldd	r24, Y+5	; 0x05
    65b6:	9e 81       	ldd	r25, Y+6	; 0x06
    65b8:	01 97       	sbiw	r24, 0x01	; 1
    65ba:	9e 83       	std	Y+6, r25	; 0x06
    65bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65be:	8d 81       	ldd	r24, Y+5	; 0x05
    65c0:	9e 81       	ldd	r25, Y+6	; 0x06
    65c2:	00 97       	sbiw	r24, 0x00	; 0
    65c4:	69 f7       	brne	.-38     	; 0x65a0 <LCD_voidShiftDisplayLeft+0xae>
    65c6:	14 c0       	rjmp	.+40     	; 0x65f0 <LCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65c8:	6f 81       	ldd	r22, Y+7	; 0x07
    65ca:	78 85       	ldd	r23, Y+8	; 0x08
    65cc:	89 85       	ldd	r24, Y+9	; 0x09
    65ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    65d0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    65d4:	dc 01       	movw	r26, r24
    65d6:	cb 01       	movw	r24, r22
    65d8:	9e 83       	std	Y+6, r25	; 0x06
    65da:	8d 83       	std	Y+5, r24	; 0x05
    65dc:	8d 81       	ldd	r24, Y+5	; 0x05
    65de:	9e 81       	ldd	r25, Y+6	; 0x06
    65e0:	9a 83       	std	Y+2, r25	; 0x02
    65e2:	89 83       	std	Y+1, r24	; 0x01
    65e4:	89 81       	ldd	r24, Y+1	; 0x01
    65e6:	9a 81       	ldd	r25, Y+2	; 0x02
    65e8:	01 97       	sbiw	r24, 0x01	; 1
    65ea:	f1 f7       	brne	.-4      	; 0x65e8 <LCD_voidShiftDisplayLeft+0xf6>
    65ec:	9a 83       	std	Y+2, r25	; 0x02
    65ee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		LCD_voidSendCommand(SHIFT_DISPLAY_LEFT);
    65f0:	88 e1       	ldi	r24, 0x18	; 24
    65f2:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <LCD_voidSendCommand>
		LCD_voidSendCommand(SHIFT_DISPLAY_RIGHT);
	}
}

void LCD_voidShiftDisplayLeft(u8 Copy_u8ShiftingNumber) {
	for (u8 i = 0; i < Copy_u8ShiftingNumber; i++) {
    65f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    65f8:	8f 5f       	subi	r24, 0xFF	; 255
    65fa:	8f 87       	std	Y+15, r24	; 0x0f
    65fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    65fe:	88 89       	ldd	r24, Y+16	; 0x10
    6600:	98 17       	cp	r25, r24
    6602:	08 f4       	brcc	.+2      	; 0x6606 <LCD_voidShiftDisplayLeft+0x114>
    6604:	83 cf       	rjmp	.-250    	; 0x650c <LCD_voidShiftDisplayLeft+0x1a>
		_delay_ms(100);
		LCD_voidSendCommand(SHIFT_DISPLAY_LEFT);
	}
}
    6606:	60 96       	adiw	r28, 0x10	; 16
    6608:	0f b6       	in	r0, 0x3f	; 63
    660a:	f8 94       	cli
    660c:	de bf       	out	0x3e, r29	; 62
    660e:	0f be       	out	0x3f, r0	; 63
    6610:	cd bf       	out	0x3d, r28	; 61
    6612:	cf 91       	pop	r28
    6614:	df 91       	pop	r29
    6616:	08 95       	ret

00006618 <LCD_voidSetDDRAMAddress>:

void LCD_voidSetDDRAMAddress(u8 Copy_u8Y, u8 Copy_u8X) {
    6618:	df 93       	push	r29
    661a:	cf 93       	push	r28
    661c:	00 d0       	rcall	.+0      	; 0x661e <LCD_voidSetDDRAMAddress+0x6>
    661e:	0f 92       	push	r0
    6620:	cd b7       	in	r28, 0x3d	; 61
    6622:	de b7       	in	r29, 0x3e	; 62
    6624:	8a 83       	std	Y+2, r24	; 0x02
    6626:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8NewAddress = 0b10000000;
    6628:	80 e8       	ldi	r24, 0x80	; 128
    662a:	89 83       	std	Y+1, r24	; 0x01
	Local_u8NewAddress += ((Copy_u8Y * 0x40) + Copy_u8X);
    662c:	8a 81       	ldd	r24, Y+2	; 0x02
    662e:	88 2f       	mov	r24, r24
    6630:	90 e0       	ldi	r25, 0x00	; 0
    6632:	00 24       	eor	r0, r0
    6634:	96 95       	lsr	r25
    6636:	87 95       	ror	r24
    6638:	07 94       	ror	r0
    663a:	96 95       	lsr	r25
    663c:	87 95       	ror	r24
    663e:	07 94       	ror	r0
    6640:	98 2f       	mov	r25, r24
    6642:	80 2d       	mov	r24, r0
    6644:	98 2f       	mov	r25, r24
    6646:	8b 81       	ldd	r24, Y+3	; 0x03
    6648:	98 0f       	add	r25, r24
    664a:	89 81       	ldd	r24, Y+1	; 0x01
    664c:	89 0f       	add	r24, r25
    664e:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_u8NewAddress);
    6650:	89 81       	ldd	r24, Y+1	; 0x01
    6652:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <LCD_voidSendCommand>
}
    6656:	0f 90       	pop	r0
    6658:	0f 90       	pop	r0
    665a:	0f 90       	pop	r0
    665c:	cf 91       	pop	r28
    665e:	df 91       	pop	r29
    6660:	08 95       	ret

00006662 <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(pu8 Copy_pu8Character,
		u8 Copy_u8CharacterPos, u8 Copy_u8X, u8 Copy_u8Y, u8 Copy_u8Direction) {
    6662:	0f 93       	push	r16
    6664:	df 93       	push	r29
    6666:	cf 93       	push	r28
    6668:	cd b7       	in	r28, 0x3d	; 61
    666a:	de b7       	in	r29, 0x3e	; 62
    666c:	29 97       	sbiw	r28, 0x09	; 9
    666e:	0f b6       	in	r0, 0x3f	; 63
    6670:	f8 94       	cli
    6672:	de bf       	out	0x3e, r29	; 62
    6674:	0f be       	out	0x3f, r0	; 63
    6676:	cd bf       	out	0x3d, r28	; 61
    6678:	9d 83       	std	Y+5, r25	; 0x05
    667a:	8c 83       	std	Y+4, r24	; 0x04
    667c:	6e 83       	std	Y+6, r22	; 0x06
    667e:	4f 83       	std	Y+7, r20	; 0x07
    6680:	28 87       	std	Y+8, r18	; 0x08
    6682:	09 87       	std	Y+9, r16	; 0x09
	u8 Local_u8NewAddress = 0b01000000;
    6684:	80 e4       	ldi	r24, 0x40	; 64
    6686:	8b 83       	std	Y+3, r24	; 0x03
	LCD_voidSendCommand(Local_u8NewAddress + (8 * Copy_u8CharacterPos));
    6688:	8e 81       	ldd	r24, Y+6	; 0x06
    668a:	88 2f       	mov	r24, r24
    668c:	90 e0       	ldi	r25, 0x00	; 0
    668e:	88 0f       	add	r24, r24
    6690:	99 1f       	adc	r25, r25
    6692:	88 0f       	add	r24, r24
    6694:	99 1f       	adc	r25, r25
    6696:	88 0f       	add	r24, r24
    6698:	99 1f       	adc	r25, r25
    669a:	98 2f       	mov	r25, r24
    669c:	8b 81       	ldd	r24, Y+3	; 0x03
    669e:	89 0f       	add	r24, r25
    66a0:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <LCD_voidSendCommand>

	for (int i = 0; i < 8; ++i)
    66a4:	1a 82       	std	Y+2, r1	; 0x02
    66a6:	19 82       	std	Y+1, r1	; 0x01
    66a8:	0f c0       	rjmp	.+30     	; 0x66c8 <LCD_voidWriteSpecialCharacter+0x66>
		LCD_voidSendData(Copy_pu8Character[i]);
    66aa:	29 81       	ldd	r18, Y+1	; 0x01
    66ac:	3a 81       	ldd	r19, Y+2	; 0x02
    66ae:	8c 81       	ldd	r24, Y+4	; 0x04
    66b0:	9d 81       	ldd	r25, Y+5	; 0x05
    66b2:	fc 01       	movw	r30, r24
    66b4:	e2 0f       	add	r30, r18
    66b6:	f3 1f       	adc	r31, r19
    66b8:	80 81       	ld	r24, Z
    66ba:	0e 94 91 30 	call	0x6122	; 0x6122 <LCD_voidSendData>
void LCD_voidWriteSpecialCharacter(pu8 Copy_pu8Character,
		u8 Copy_u8CharacterPos, u8 Copy_u8X, u8 Copy_u8Y, u8 Copy_u8Direction) {
	u8 Local_u8NewAddress = 0b01000000;
	LCD_voidSendCommand(Local_u8NewAddress + (8 * Copy_u8CharacterPos));

	for (int i = 0; i < 8; ++i)
    66be:	89 81       	ldd	r24, Y+1	; 0x01
    66c0:	9a 81       	ldd	r25, Y+2	; 0x02
    66c2:	01 96       	adiw	r24, 0x01	; 1
    66c4:	9a 83       	std	Y+2, r25	; 0x02
    66c6:	89 83       	std	Y+1, r24	; 0x01
    66c8:	89 81       	ldd	r24, Y+1	; 0x01
    66ca:	9a 81       	ldd	r25, Y+2	; 0x02
    66cc:	88 30       	cpi	r24, 0x08	; 8
    66ce:	91 05       	cpc	r25, r1
    66d0:	64 f3       	brlt	.-40     	; 0x66aa <LCD_voidWriteSpecialCharacter+0x48>
		LCD_voidSendData(Copy_pu8Character[i]);

	if (Copy_u8Direction == LCD_WRITE_FROM_LEFT)
    66d2:	89 85       	ldd	r24, Y+9	; 0x09
    66d4:	88 23       	and	r24, r24
    66d6:	29 f4       	brne	.+10     	; 0x66e2 <LCD_voidWriteSpecialCharacter+0x80>
		LCD_voidSetDDRAMAddress(Copy_u8Y, Copy_u8X);
    66d8:	88 85       	ldd	r24, Y+8	; 0x08
    66da:	6f 81       	ldd	r22, Y+7	; 0x07
    66dc:	0e 94 0c 33 	call	0x6618	; 0x6618 <LCD_voidSetDDRAMAddress>
    66e0:	09 c0       	rjmp	.+18     	; 0x66f4 <LCD_voidWriteSpecialCharacter+0x92>
	else
		LCD_voidSetDDRAMAddress(Copy_u8Y, 15 - Copy_u8X);
    66e2:	8f e0       	ldi	r24, 0x0F	; 15
    66e4:	9f 81       	ldd	r25, Y+7	; 0x07
    66e6:	28 2f       	mov	r18, r24
    66e8:	29 1b       	sub	r18, r25
    66ea:	92 2f       	mov	r25, r18
    66ec:	88 85       	ldd	r24, Y+8	; 0x08
    66ee:	69 2f       	mov	r22, r25
    66f0:	0e 94 0c 33 	call	0x6618	; 0x6618 <LCD_voidSetDDRAMAddress>
	LCD_voidSendData(Copy_u8CharacterPos);
    66f4:	8e 81       	ldd	r24, Y+6	; 0x06
    66f6:	0e 94 91 30 	call	0x6122	; 0x6122 <LCD_voidSendData>
}
    66fa:	29 96       	adiw	r28, 0x09	; 9
    66fc:	0f b6       	in	r0, 0x3f	; 63
    66fe:	f8 94       	cli
    6700:	de bf       	out	0x3e, r29	; 62
    6702:	0f be       	out	0x3f, r0	; 63
    6704:	cd bf       	out	0x3d, r28	; 61
    6706:	cf 91       	pop	r28
    6708:	df 91       	pop	r29
    670a:	0f 91       	pop	r16
    670c:	08 95       	ret

0000670e <LCD_voidWriteSpecialString>:

void LCD_voidWriteSpecialString(u8 Copy_pu8String[][8],
		u8 Copy_u8NumberOfCharacters, u8 Copy_u8Direction, u8 Copy_u8X,
		u8 Copy_u8Y) {
    670e:	0f 93       	push	r16
    6710:	df 93       	push	r29
    6712:	cf 93       	push	r28
    6714:	cd b7       	in	r28, 0x3d	; 61
    6716:	de b7       	in	r29, 0x3e	; 62
    6718:	28 97       	sbiw	r28, 0x08	; 8
    671a:	0f b6       	in	r0, 0x3f	; 63
    671c:	f8 94       	cli
    671e:	de bf       	out	0x3e, r29	; 62
    6720:	0f be       	out	0x3f, r0	; 63
    6722:	cd bf       	out	0x3d, r28	; 61
    6724:	9c 83       	std	Y+4, r25	; 0x04
    6726:	8b 83       	std	Y+3, r24	; 0x03
    6728:	6d 83       	std	Y+5, r22	; 0x05
    672a:	4e 83       	std	Y+6, r20	; 0x06
    672c:	2f 83       	std	Y+7, r18	; 0x07
    672e:	08 87       	std	Y+8, r16	; 0x08
	for (int i = 0; i < Copy_u8NumberOfCharacters; ++i) {
    6730:	1a 82       	std	Y+2, r1	; 0x02
    6732:	19 82       	std	Y+1, r1	; 0x01
    6734:	1c c0       	rjmp	.+56     	; 0x676e <LCD_voidWriteSpecialString+0x60>
		LCD_voidWriteSpecialCharacter(Copy_pu8String[i], i, Copy_u8X + i,
    6736:	2b 81       	ldd	r18, Y+3	; 0x03
    6738:	3c 81       	ldd	r19, Y+4	; 0x04
    673a:	89 81       	ldd	r24, Y+1	; 0x01
    673c:	9a 81       	ldd	r25, Y+2	; 0x02
    673e:	88 0f       	add	r24, r24
    6740:	99 1f       	adc	r25, r25
    6742:	88 0f       	add	r24, r24
    6744:	99 1f       	adc	r25, r25
    6746:	88 0f       	add	r24, r24
    6748:	99 1f       	adc	r25, r25
    674a:	28 0f       	add	r18, r24
    674c:	39 1f       	adc	r19, r25
    674e:	59 81       	ldd	r21, Y+1	; 0x01
    6750:	99 81       	ldd	r25, Y+1	; 0x01
    6752:	8f 81       	ldd	r24, Y+7	; 0x07
    6754:	49 2f       	mov	r20, r25
    6756:	48 0f       	add	r20, r24
    6758:	c9 01       	movw	r24, r18
    675a:	65 2f       	mov	r22, r21
    675c:	28 85       	ldd	r18, Y+8	; 0x08
    675e:	0e 81       	ldd	r16, Y+6	; 0x06
    6760:	0e 94 31 33 	call	0x6662	; 0x6662 <LCD_voidWriteSpecialCharacter>
}

void LCD_voidWriteSpecialString(u8 Copy_pu8String[][8],
		u8 Copy_u8NumberOfCharacters, u8 Copy_u8Direction, u8 Copy_u8X,
		u8 Copy_u8Y) {
	for (int i = 0; i < Copy_u8NumberOfCharacters; ++i) {
    6764:	89 81       	ldd	r24, Y+1	; 0x01
    6766:	9a 81       	ldd	r25, Y+2	; 0x02
    6768:	01 96       	adiw	r24, 0x01	; 1
    676a:	9a 83       	std	Y+2, r25	; 0x02
    676c:	89 83       	std	Y+1, r24	; 0x01
    676e:	8d 81       	ldd	r24, Y+5	; 0x05
    6770:	28 2f       	mov	r18, r24
    6772:	30 e0       	ldi	r19, 0x00	; 0
    6774:	89 81       	ldd	r24, Y+1	; 0x01
    6776:	9a 81       	ldd	r25, Y+2	; 0x02
    6778:	82 17       	cp	r24, r18
    677a:	93 07       	cpc	r25, r19
    677c:	e4 f2       	brlt	.-72     	; 0x6736 <LCD_voidWriteSpecialString+0x28>
		LCD_voidWriteSpecialCharacter(Copy_pu8String[i], i, Copy_u8X + i,
				Copy_u8Y, Copy_u8Direction);
	}
}
    677e:	28 96       	adiw	r28, 0x08	; 8
    6780:	0f b6       	in	r0, 0x3f	; 63
    6782:	f8 94       	cli
    6784:	de bf       	out	0x3e, r29	; 62
    6786:	0f be       	out	0x3f, r0	; 63
    6788:	cd bf       	out	0x3d, r28	; 61
    678a:	cf 91       	pop	r28
    678c:	df 91       	pop	r29
    678e:	0f 91       	pop	r16
    6790:	08 95       	ret

00006792 <LCD_voidWriteNumber>:
void LCD_voidWriteNumber(f64 Copy_f64Number) {
    6792:	6f 92       	push	r6
    6794:	7f 92       	push	r7
    6796:	8f 92       	push	r8
    6798:	9f 92       	push	r9
    679a:	af 92       	push	r10
    679c:	bf 92       	push	r11
    679e:	cf 92       	push	r12
    67a0:	df 92       	push	r13
    67a2:	ef 92       	push	r14
    67a4:	ff 92       	push	r15
    67a6:	0f 93       	push	r16
    67a8:	1f 93       	push	r17
    67aa:	df 93       	push	r29
    67ac:	cf 93       	push	r28
    67ae:	cd b7       	in	r28, 0x3d	; 61
    67b0:	de b7       	in	r29, 0x3e	; 62
    67b2:	c3 59       	subi	r28, 0x93	; 147
    67b4:	d0 40       	sbci	r29, 0x00	; 0
    67b6:	0f b6       	in	r0, 0x3f	; 63
    67b8:	f8 94       	cli
    67ba:	de bf       	out	0x3e, r29	; 62
    67bc:	0f be       	out	0x3f, r0	; 63
    67be:	cd bf       	out	0x3d, r28	; 61
    67c0:	69 8b       	std	Y+17, r22	; 0x11
    67c2:	7a 8b       	std	Y+18, r23	; 0x12
    67c4:	8b 8b       	std	Y+19, r24	; 0x13
    67c6:	9c 8b       	std	Y+20, r25	; 0x14
			LCD_voidSendData((Local_u8Temp % 10) + '0');
			Local_u8Temp /= 10;
		}
//		LCD_voidSendString(Local_u8arrStringData);
	}
}
    67c8:	2d b7       	in	r18, 0x3d	; 61
    67ca:	3e b7       	in	r19, 0x3e	; 62
    67cc:	ce 56       	subi	r28, 0x6E	; 110
    67ce:	df 4f       	sbci	r29, 0xFF	; 255
    67d0:	39 83       	std	Y+1, r19	; 0x01
    67d2:	28 83       	st	Y, r18
    67d4:	c2 59       	subi	r28, 0x92	; 146
    67d6:	d0 40       	sbci	r29, 0x00	; 0
	for (int i = 0; i < Copy_u8NumberOfCharacters; ++i) {
		LCD_voidWriteSpecialCharacter(Copy_pu8String[i], i, Copy_u8X + i,
				Copy_u8Y, Copy_u8Direction);
	}
}
void LCD_voidWriteNumber(f64 Copy_f64Number) {
    67d8:	8d b7       	in	r24, 0x3d	; 61
    67da:	9e b7       	in	r25, 0x3e	; 62
    67dc:	9e 8b       	std	Y+22, r25	; 0x16
    67de:	8d 8b       	std	Y+21, r24	; 0x15
	if (Copy_f64Number < 0) {
    67e0:	69 89       	ldd	r22, Y+17	; 0x11
    67e2:	7a 89       	ldd	r23, Y+18	; 0x12
    67e4:	8b 89       	ldd	r24, Y+19	; 0x13
    67e6:	9c 89       	ldd	r25, Y+20	; 0x14
    67e8:	20 e0       	ldi	r18, 0x00	; 0
    67ea:	30 e0       	ldi	r19, 0x00	; 0
    67ec:	40 e0       	ldi	r20, 0x00	; 0
    67ee:	50 e0       	ldi	r21, 0x00	; 0
    67f0:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    67f4:	88 23       	and	r24, r24
    67f6:	6c f4       	brge	.+26     	; 0x6812 <LCD_voidWriteNumber+0x80>
		LCD_voidSendData('-');
    67f8:	8d e2       	ldi	r24, 0x2D	; 45
    67fa:	0e 94 91 30 	call	0x6122	; 0x6122 <LCD_voidSendData>
		Copy_f64Number *= -1;
    67fe:	89 89       	ldd	r24, Y+17	; 0x11
    6800:	9a 89       	ldd	r25, Y+18	; 0x12
    6802:	ab 89       	ldd	r26, Y+19	; 0x13
    6804:	bc 89       	ldd	r27, Y+20	; 0x14
    6806:	b0 58       	subi	r27, 0x80	; 128
    6808:	89 8b       	std	Y+17, r24	; 0x11
    680a:	9a 8b       	std	Y+18, r25	; 0x12
    680c:	ab 8b       	std	Y+19, r26	; 0x13
    680e:	bc 8b       	std	Y+20, r27	; 0x14
    6810:	11 c0       	rjmp	.+34     	; 0x6834 <LCD_voidWriteNumber+0xa2>
	} else if (Copy_f64Number == 0) {
    6812:	69 89       	ldd	r22, Y+17	; 0x11
    6814:	7a 89       	ldd	r23, Y+18	; 0x12
    6816:	8b 89       	ldd	r24, Y+19	; 0x13
    6818:	9c 89       	ldd	r25, Y+20	; 0x14
    681a:	20 e0       	ldi	r18, 0x00	; 0
    681c:	30 e0       	ldi	r19, 0x00	; 0
    681e:	40 e0       	ldi	r20, 0x00	; 0
    6820:	50 e0       	ldi	r21, 0x00	; 0
    6822:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__eqsf2>
    6826:	88 23       	and	r24, r24
    6828:	29 f4       	brne	.+10     	; 0x6834 <LCD_voidWriteNumber+0xa2>
		LCD_voidSendData('0');
    682a:	80 e3       	ldi	r24, 0x30	; 48
    682c:	0e 94 91 30 	call	0x6122	; 0x6122 <LCD_voidSendData>
    6830:	0c 94 fc 3b 	jmp	0x77f8	; 0x77f8 <LCD_voidWriteNumber+0x1066>
		return;
	}
	s64 Local_s64CopyNumber = (s64) Copy_f64Number;
    6834:	69 89       	ldd	r22, Y+17	; 0x11
    6836:	7a 89       	ldd	r23, Y+18	; 0x12
    6838:	8b 89       	ldd	r24, Y+19	; 0x13
    683a:	9c 89       	ldd	r25, Y+20	; 0x14
    683c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__fixsfdi>
    6840:	a2 2e       	mov	r10, r18
    6842:	b3 2e       	mov	r11, r19
    6844:	c4 2e       	mov	r12, r20
    6846:	d5 2e       	mov	r13, r21
    6848:	e6 2e       	mov	r14, r22
    684a:	f7 2e       	mov	r15, r23
    684c:	08 2f       	mov	r16, r24
    684e:	19 2f       	mov	r17, r25
    6850:	af 82       	std	Y+7, r10	; 0x07
    6852:	b8 86       	std	Y+8, r11	; 0x08
    6854:	c9 86       	std	Y+9, r12	; 0x09
    6856:	da 86       	std	Y+10, r13	; 0x0a
    6858:	eb 86       	std	Y+11, r14	; 0x0b
    685a:	fc 86       	std	Y+12, r15	; 0x0c
    685c:	0d 87       	std	Y+13, r16	; 0x0d
    685e:	1e 87       	std	Y+14, r17	; 0x0e
	u8 Local_u8NumberDigits = 0;
    6860:	1e 82       	std	Y+6, r1	; 0x06
    6862:	30 c0       	rjmp	.+96     	; 0x68c4 <LCD_voidWriteNumber+0x132>
	while (Local_s64CopyNumber != 0) {
		Local_u8NumberDigits++;
    6864:	8e 81       	ldd	r24, Y+6	; 0x06
    6866:	8f 5f       	subi	r24, 0xFF	; 255
    6868:	8e 83       	std	Y+6, r24	; 0x06
		Local_s64CopyNumber /= 10;
    686a:	af 80       	ldd	r10, Y+7	; 0x07
    686c:	b8 84       	ldd	r11, Y+8	; 0x08
    686e:	c9 84       	ldd	r12, Y+9	; 0x09
    6870:	da 84       	ldd	r13, Y+10	; 0x0a
    6872:	eb 84       	ldd	r14, Y+11	; 0x0b
    6874:	fc 84       	ldd	r15, Y+12	; 0x0c
    6876:	0d 85       	ldd	r16, Y+13	; 0x0d
    6878:	1e 85       	ldd	r17, Y+14	; 0x0e
    687a:	2a 2d       	mov	r18, r10
    687c:	3b 2d       	mov	r19, r11
    687e:	4c 2d       	mov	r20, r12
    6880:	5d 2d       	mov	r21, r13
    6882:	6e 2d       	mov	r22, r14
    6884:	7f 2d       	mov	r23, r15
    6886:	80 2f       	mov	r24, r16
    6888:	91 2f       	mov	r25, r17
    688a:	0f 2e       	mov	r0, r31
    688c:	fa e0       	ldi	r31, 0x0A	; 10
    688e:	af 2e       	mov	r10, r31
    6890:	f0 2d       	mov	r31, r0
    6892:	bb 24       	eor	r11, r11
    6894:	cc 24       	eor	r12, r12
    6896:	dd 24       	eor	r13, r13
    6898:	ee 24       	eor	r14, r14
    689a:	ff 24       	eor	r15, r15
    689c:	00 e0       	ldi	r16, 0x00	; 0
    689e:	10 e0       	ldi	r17, 0x00	; 0
    68a0:	0e 94 0b 03 	call	0x616	; 0x616 <__divdi3>
    68a4:	a2 2e       	mov	r10, r18
    68a6:	b3 2e       	mov	r11, r19
    68a8:	c4 2e       	mov	r12, r20
    68aa:	d5 2e       	mov	r13, r21
    68ac:	e6 2e       	mov	r14, r22
    68ae:	f7 2e       	mov	r15, r23
    68b0:	08 2f       	mov	r16, r24
    68b2:	19 2f       	mov	r17, r25
    68b4:	af 82       	std	Y+7, r10	; 0x07
    68b6:	b8 86       	std	Y+8, r11	; 0x08
    68b8:	c9 86       	std	Y+9, r12	; 0x09
    68ba:	da 86       	std	Y+10, r13	; 0x0a
    68bc:	eb 86       	std	Y+11, r14	; 0x0b
    68be:	fc 86       	std	Y+12, r15	; 0x0c
    68c0:	0d 87       	std	Y+13, r16	; 0x0d
    68c2:	1e 87       	std	Y+14, r17	; 0x0e
		LCD_voidSendData('0');
		return;
	}
	s64 Local_s64CopyNumber = (s64) Copy_f64Number;
	u8 Local_u8NumberDigits = 0;
	while (Local_s64CopyNumber != 0) {
    68c4:	8f 81       	ldd	r24, Y+7	; 0x07
    68c6:	98 85       	ldd	r25, Y+8	; 0x08
    68c8:	89 2b       	or	r24, r25
    68ca:	99 85       	ldd	r25, Y+9	; 0x09
    68cc:	89 2b       	or	r24, r25
    68ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    68d0:	89 2b       	or	r24, r25
    68d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    68d4:	89 2b       	or	r24, r25
    68d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    68d8:	89 2b       	or	r24, r25
    68da:	9d 85       	ldd	r25, Y+13	; 0x0d
    68dc:	89 2b       	or	r24, r25
    68de:	9e 85       	ldd	r25, Y+14	; 0x0e
    68e0:	89 2b       	or	r24, r25
    68e2:	88 23       	and	r24, r24
    68e4:	09 f0       	breq	.+2      	; 0x68e8 <LCD_voidWriteNumber+0x156>
    68e6:	be cf       	rjmp	.-132    	; 0x6864 <LCD_voidWriteNumber+0xd2>
		Local_u8NumberDigits++;
		Local_s64CopyNumber /= 10;
	}
	Local_s64CopyNumber = (s64) Copy_f64Number;
    68e8:	69 89       	ldd	r22, Y+17	; 0x11
    68ea:	7a 89       	ldd	r23, Y+18	; 0x12
    68ec:	8b 89       	ldd	r24, Y+19	; 0x13
    68ee:	9c 89       	ldd	r25, Y+20	; 0x14
    68f0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__fixsfdi>
    68f4:	a2 2e       	mov	r10, r18
    68f6:	b3 2e       	mov	r11, r19
    68f8:	c4 2e       	mov	r12, r20
    68fa:	d5 2e       	mov	r13, r21
    68fc:	e6 2e       	mov	r14, r22
    68fe:	f7 2e       	mov	r15, r23
    6900:	08 2f       	mov	r16, r24
    6902:	19 2f       	mov	r17, r25
    6904:	af 82       	std	Y+7, r10	; 0x07
    6906:	b8 86       	std	Y+8, r11	; 0x08
    6908:	c9 86       	std	Y+9, r12	; 0x09
    690a:	da 86       	std	Y+10, r13	; 0x0a
    690c:	eb 86       	std	Y+11, r14	; 0x0b
    690e:	fc 86       	std	Y+12, r15	; 0x0c
    6910:	0d 87       	std	Y+13, r16	; 0x0d
    6912:	1e 87       	std	Y+14, r17	; 0x0e
	u8 Local_u8arrStringData[Local_u8NumberDigits];
    6914:	8e 81       	ldd	r24, Y+6	; 0x06
    6916:	88 2f       	mov	r24, r24
    6918:	90 e0       	ldi	r25, 0x00	; 0
    691a:	2d b7       	in	r18, 0x3d	; 61
    691c:	3e b7       	in	r19, 0x3e	; 62
    691e:	28 1b       	sub	r18, r24
    6920:	39 0b       	sbc	r19, r25
    6922:	0f b6       	in	r0, 0x3f	; 63
    6924:	f8 94       	cli
    6926:	3e bf       	out	0x3e, r19	; 62
    6928:	0f be       	out	0x3f, r0	; 63
    692a:	2d bf       	out	0x3d, r18	; 61
    692c:	8d b7       	in	r24, 0x3d	; 61
    692e:	9e b7       	in	r25, 0x3e	; 62
    6930:	01 96       	adiw	r24, 0x01	; 1
    6932:	98 a3       	std	Y+32, r25	; 0x20
    6934:	8f 8f       	std	Y+31, r24	; 0x1f
    6936:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6938:	98 a1       	ldd	r25, Y+32	; 0x20
    693a:	00 96       	adiw	r24, 0x00	; 0
    693c:	98 a3       	std	Y+32, r25	; 0x20
    693e:	8f 8f       	std	Y+31, r24	; 0x1f
    6940:	2f 8d       	ldd	r18, Y+31	; 0x1f
    6942:	38 a1       	ldd	r19, Y+32	; 0x20
    6944:	38 8b       	std	Y+16, r19	; 0x10
    6946:	2f 87       	std	Y+15, r18	; 0x0f
	if (Local_s64CopyNumber != 0) {
    6948:	8f 81       	ldd	r24, Y+7	; 0x07
    694a:	98 85       	ldd	r25, Y+8	; 0x08
    694c:	89 2b       	or	r24, r25
    694e:	99 85       	ldd	r25, Y+9	; 0x09
    6950:	89 2b       	or	r24, r25
    6952:	9a 85       	ldd	r25, Y+10	; 0x0a
    6954:	89 2b       	or	r24, r25
    6956:	9b 85       	ldd	r25, Y+11	; 0x0b
    6958:	89 2b       	or	r24, r25
    695a:	9c 85       	ldd	r25, Y+12	; 0x0c
    695c:	89 2b       	or	r24, r25
    695e:	9d 85       	ldd	r25, Y+13	; 0x0d
    6960:	89 2b       	or	r24, r25
    6962:	9e 85       	ldd	r25, Y+14	; 0x0e
    6964:	89 2b       	or	r24, r25
    6966:	88 23       	and	r24, r24
    6968:	09 f4       	brne	.+2      	; 0x696c <LCD_voidWriteNumber+0x1da>
    696a:	81 c0       	rjmp	.+258    	; 0x6a6e <LCD_voidWriteNumber+0x2dc>
    696c:	69 c0       	rjmp	.+210    	; 0x6a40 <LCD_voidWriteNumber+0x2ae>
		while (Local_s64CopyNumber != 0) {
			Local_u8arrStringData[--Local_u8NumberDigits] = (Local_s64CopyNumber
    696e:	8e 81       	ldd	r24, Y+6	; 0x06
    6970:	81 50       	subi	r24, 0x01	; 1
    6972:	8e 83       	std	Y+6, r24	; 0x06
    6974:	8e 81       	ldd	r24, Y+6	; 0x06
    6976:	88 2e       	mov	r8, r24
    6978:	99 24       	eor	r9, r9
    697a:	af 80       	ldd	r10, Y+7	; 0x07
    697c:	b8 84       	ldd	r11, Y+8	; 0x08
    697e:	c9 84       	ldd	r12, Y+9	; 0x09
    6980:	da 84       	ldd	r13, Y+10	; 0x0a
    6982:	eb 84       	ldd	r14, Y+11	; 0x0b
    6984:	fc 84       	ldd	r15, Y+12	; 0x0c
    6986:	0d 85       	ldd	r16, Y+13	; 0x0d
    6988:	1e 85       	ldd	r17, Y+14	; 0x0e
    698a:	2a 2d       	mov	r18, r10
    698c:	3b 2d       	mov	r19, r11
    698e:	4c 2d       	mov	r20, r12
    6990:	5d 2d       	mov	r21, r13
    6992:	6e 2d       	mov	r22, r14
    6994:	7f 2d       	mov	r23, r15
    6996:	80 2f       	mov	r24, r16
    6998:	91 2f       	mov	r25, r17
    699a:	0f 2e       	mov	r0, r31
    699c:	fa e0       	ldi	r31, 0x0A	; 10
    699e:	af 2e       	mov	r10, r31
    69a0:	f0 2d       	mov	r31, r0
    69a2:	bb 24       	eor	r11, r11
    69a4:	cc 24       	eor	r12, r12
    69a6:	dd 24       	eor	r13, r13
    69a8:	ee 24       	eor	r14, r14
    69aa:	ff 24       	eor	r15, r15
    69ac:	00 e0       	ldi	r16, 0x00	; 0
    69ae:	10 e0       	ldi	r17, 0x00	; 0
    69b0:	0e 94 33 0b 	call	0x1666	; 0x1666 <__moddi3>
    69b4:	a2 2e       	mov	r10, r18
    69b6:	b3 2e       	mov	r11, r19
    69b8:	c4 2e       	mov	r12, r20
    69ba:	d5 2e       	mov	r13, r21
    69bc:	e6 2e       	mov	r14, r22
    69be:	f7 2e       	mov	r15, r23
    69c0:	08 2f       	mov	r16, r24
    69c2:	19 2f       	mov	r17, r25
    69c4:	2a 2d       	mov	r18, r10
    69c6:	3b 2d       	mov	r19, r11
    69c8:	4c 2d       	mov	r20, r12
    69ca:	5d 2d       	mov	r21, r13
    69cc:	6e 2d       	mov	r22, r14
    69ce:	7f 2d       	mov	r23, r15
    69d0:	80 2f       	mov	r24, r16
    69d2:	91 2f       	mov	r25, r17
    69d4:	82 2f       	mov	r24, r18
    69d6:	28 2f       	mov	r18, r24
    69d8:	20 5d       	subi	r18, 0xD0	; 208
    69da:	8f 85       	ldd	r24, Y+15	; 0x0f
    69dc:	98 89       	ldd	r25, Y+16	; 0x10
    69de:	fc 01       	movw	r30, r24
    69e0:	e8 0d       	add	r30, r8
    69e2:	f9 1d       	adc	r31, r9
    69e4:	20 83       	st	Z, r18
					% 10) + '0';
			Local_s64CopyNumber /= 10;
    69e6:	af 80       	ldd	r10, Y+7	; 0x07
    69e8:	b8 84       	ldd	r11, Y+8	; 0x08
    69ea:	c9 84       	ldd	r12, Y+9	; 0x09
    69ec:	da 84       	ldd	r13, Y+10	; 0x0a
    69ee:	eb 84       	ldd	r14, Y+11	; 0x0b
    69f0:	fc 84       	ldd	r15, Y+12	; 0x0c
    69f2:	0d 85       	ldd	r16, Y+13	; 0x0d
    69f4:	1e 85       	ldd	r17, Y+14	; 0x0e
    69f6:	2a 2d       	mov	r18, r10
    69f8:	3b 2d       	mov	r19, r11
    69fa:	4c 2d       	mov	r20, r12
    69fc:	5d 2d       	mov	r21, r13
    69fe:	6e 2d       	mov	r22, r14
    6a00:	7f 2d       	mov	r23, r15
    6a02:	80 2f       	mov	r24, r16
    6a04:	91 2f       	mov	r25, r17
    6a06:	0f 2e       	mov	r0, r31
    6a08:	fa e0       	ldi	r31, 0x0A	; 10
    6a0a:	af 2e       	mov	r10, r31
    6a0c:	f0 2d       	mov	r31, r0
    6a0e:	bb 24       	eor	r11, r11
    6a10:	cc 24       	eor	r12, r12
    6a12:	dd 24       	eor	r13, r13
    6a14:	ee 24       	eor	r14, r14
    6a16:	ff 24       	eor	r15, r15
    6a18:	00 e0       	ldi	r16, 0x00	; 0
    6a1a:	10 e0       	ldi	r17, 0x00	; 0
    6a1c:	0e 94 0b 03 	call	0x616	; 0x616 <__divdi3>
    6a20:	a2 2e       	mov	r10, r18
    6a22:	b3 2e       	mov	r11, r19
    6a24:	c4 2e       	mov	r12, r20
    6a26:	d5 2e       	mov	r13, r21
    6a28:	e6 2e       	mov	r14, r22
    6a2a:	f7 2e       	mov	r15, r23
    6a2c:	08 2f       	mov	r16, r24
    6a2e:	19 2f       	mov	r17, r25
    6a30:	af 82       	std	Y+7, r10	; 0x07
    6a32:	b8 86       	std	Y+8, r11	; 0x08
    6a34:	c9 86       	std	Y+9, r12	; 0x09
    6a36:	da 86       	std	Y+10, r13	; 0x0a
    6a38:	eb 86       	std	Y+11, r14	; 0x0b
    6a3a:	fc 86       	std	Y+12, r15	; 0x0c
    6a3c:	0d 87       	std	Y+13, r16	; 0x0d
    6a3e:	1e 87       	std	Y+14, r17	; 0x0e
		Local_s64CopyNumber /= 10;
	}
	Local_s64CopyNumber = (s64) Copy_f64Number;
	u8 Local_u8arrStringData[Local_u8NumberDigits];
	if (Local_s64CopyNumber != 0) {
		while (Local_s64CopyNumber != 0) {
    6a40:	8f 81       	ldd	r24, Y+7	; 0x07
    6a42:	98 85       	ldd	r25, Y+8	; 0x08
    6a44:	89 2b       	or	r24, r25
    6a46:	99 85       	ldd	r25, Y+9	; 0x09
    6a48:	89 2b       	or	r24, r25
    6a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a4c:	89 2b       	or	r24, r25
    6a4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a50:	89 2b       	or	r24, r25
    6a52:	9c 85       	ldd	r25, Y+12	; 0x0c
    6a54:	89 2b       	or	r24, r25
    6a56:	9d 85       	ldd	r25, Y+13	; 0x0d
    6a58:	89 2b       	or	r24, r25
    6a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a5c:	89 2b       	or	r24, r25
    6a5e:	88 23       	and	r24, r24
    6a60:	09 f0       	breq	.+2      	; 0x6a64 <LCD_voidWriteNumber+0x2d2>
    6a62:	85 cf       	rjmp	.-246    	; 0x696e <LCD_voidWriteNumber+0x1dc>
			Local_u8arrStringData[--Local_u8NumberDigits] = (Local_s64CopyNumber
					% 10) + '0';
			Local_s64CopyNumber /= 10;
		}
		LCD_voidSendString(Local_u8arrStringData);
    6a64:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a66:	98 89       	ldd	r25, Y+16	; 0x10
    6a68:	0e 94 2f 31 	call	0x625e	; 0x625e <LCD_voidSendString>
    6a6c:	03 c0       	rjmp	.+6      	; 0x6a74 <LCD_voidWriteNumber+0x2e2>
	} else {
		LCD_voidSendData('0');
    6a6e:	80 e3       	ldi	r24, 0x30	; 48
    6a70:	0e 94 91 30 	call	0x6122	; 0x6122 <LCD_voidSendData>
	}
	Local_s64CopyNumber = (s64) Copy_f64Number;
    6a74:	69 89       	ldd	r22, Y+17	; 0x11
    6a76:	7a 89       	ldd	r23, Y+18	; 0x12
    6a78:	8b 89       	ldd	r24, Y+19	; 0x13
    6a7a:	9c 89       	ldd	r25, Y+20	; 0x14
    6a7c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__fixsfdi>
    6a80:	a2 2e       	mov	r10, r18
    6a82:	b3 2e       	mov	r11, r19
    6a84:	c4 2e       	mov	r12, r20
    6a86:	d5 2e       	mov	r13, r21
    6a88:	e6 2e       	mov	r14, r22
    6a8a:	f7 2e       	mov	r15, r23
    6a8c:	08 2f       	mov	r16, r24
    6a8e:	19 2f       	mov	r17, r25
    6a90:	af 82       	std	Y+7, r10	; 0x07
    6a92:	b8 86       	std	Y+8, r11	; 0x08
    6a94:	c9 86       	std	Y+9, r12	; 0x09
    6a96:	da 86       	std	Y+10, r13	; 0x0a
    6a98:	eb 86       	std	Y+11, r14	; 0x0b
    6a9a:	fc 86       	std	Y+12, r15	; 0x0c
    6a9c:	0d 87       	std	Y+13, r16	; 0x0d
    6a9e:	1e 87       	std	Y+14, r17	; 0x0e
	if (Local_s64CopyNumber != Copy_f64Number) {
    6aa0:	2f 81       	ldd	r18, Y+7	; 0x07
    6aa2:	38 85       	ldd	r19, Y+8	; 0x08
    6aa4:	49 85       	ldd	r20, Y+9	; 0x09
    6aa6:	5a 85       	ldd	r21, Y+10	; 0x0a
    6aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    6aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    6aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    6aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ab0:	0e 94 10 02 	call	0x420	; 0x420 <__floatdisf>
    6ab4:	dc 01       	movw	r26, r24
    6ab6:	cb 01       	movw	r24, r22
    6ab8:	bc 01       	movw	r22, r24
    6aba:	cd 01       	movw	r24, r26
    6abc:	29 89       	ldd	r18, Y+17	; 0x11
    6abe:	3a 89       	ldd	r19, Y+18	; 0x12
    6ac0:	4b 89       	ldd	r20, Y+19	; 0x13
    6ac2:	5c 89       	ldd	r21, Y+20	; 0x14
    6ac4:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__nesf2>
    6ac8:	88 23       	and	r24, r24
    6aca:	09 f4       	brne	.+2      	; 0x6ace <LCD_voidWriteNumber+0x33c>
    6acc:	95 c6       	rjmp	.+3370   	; 0x77f8 <LCD_voidWriteNumber+0x1066>
		LCD_voidSendData('.');
    6ace:	8e e2       	ldi	r24, 0x2E	; 46
    6ad0:	0e 94 91 30 	call	0x6122	; 0x6122 <LCD_voidSendData>
		Copy_f64Number *= 1000;
    6ad4:	69 89       	ldd	r22, Y+17	; 0x11
    6ad6:	7a 89       	ldd	r23, Y+18	; 0x12
    6ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    6ada:	9c 89       	ldd	r25, Y+20	; 0x14
    6adc:	20 e0       	ldi	r18, 0x00	; 0
    6ade:	30 e0       	ldi	r19, 0x00	; 0
    6ae0:	4a e7       	ldi	r20, 0x7A	; 122
    6ae2:	54 e4       	ldi	r21, 0x44	; 68
    6ae4:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    6ae8:	dc 01       	movw	r26, r24
    6aea:	cb 01       	movw	r24, r22
    6aec:	89 8b       	std	Y+17, r24	; 0x11
    6aee:	9a 8b       	std	Y+18, r25	; 0x12
    6af0:	ab 8b       	std	Y+19, r26	; 0x13
    6af2:	bc 8b       	std	Y+20, r27	; 0x14
		Local_s64CopyNumber *= 1000;
    6af4:	3f 81       	ldd	r19, Y+7	; 0x07
    6af6:	39 a3       	std	Y+33, r19	; 0x21
    6af8:	88 85       	ldd	r24, Y+8	; 0x08
    6afa:	8a a3       	std	Y+34, r24	; 0x22
    6afc:	99 85       	ldd	r25, Y+9	; 0x09
    6afe:	9b a3       	std	Y+35, r25	; 0x23
    6b00:	2a 85       	ldd	r18, Y+10	; 0x0a
    6b02:	2c a3       	std	Y+36, r18	; 0x24
    6b04:	3b 85       	ldd	r19, Y+11	; 0x0b
    6b06:	3d a3       	std	Y+37, r19	; 0x25
    6b08:	8c 85       	ldd	r24, Y+12	; 0x0c
    6b0a:	8e a3       	std	Y+38, r24	; 0x26
    6b0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    6b0e:	9f a3       	std	Y+39, r25	; 0x27
    6b10:	2e 85       	ldd	r18, Y+14	; 0x0e
    6b12:	28 a7       	std	Y+40, r18	; 0x28
    6b14:	a9 a0       	ldd	r10, Y+33	; 0x21
    6b16:	ba a0       	ldd	r11, Y+34	; 0x22
    6b18:	cb a0       	ldd	r12, Y+35	; 0x23
    6b1a:	dc a0       	ldd	r13, Y+36	; 0x24
    6b1c:	ed a0       	ldd	r14, Y+37	; 0x25
    6b1e:	fe a0       	ldd	r15, Y+38	; 0x26
    6b20:	0f a1       	ldd	r16, Y+39	; 0x27
    6b22:	18 a5       	ldd	r17, Y+40	; 0x28
    6b24:	2a 2d       	mov	r18, r10
    6b26:	3b 2d       	mov	r19, r11
    6b28:	4c 2d       	mov	r20, r12
    6b2a:	5d 2d       	mov	r21, r13
    6b2c:	6e 2d       	mov	r22, r14
    6b2e:	7f 2d       	mov	r23, r15
    6b30:	80 2f       	mov	r24, r16
    6b32:	91 2f       	mov	r25, r17
    6b34:	02 e0       	ldi	r16, 0x02	; 2
    6b36:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    6b3a:	29 a7       	std	Y+41, r18	; 0x29
    6b3c:	3a a7       	std	Y+42, r19	; 0x2a
    6b3e:	4b a7       	std	Y+43, r20	; 0x2b
    6b40:	5c a7       	std	Y+44, r21	; 0x2c
    6b42:	6d a7       	std	Y+45, r22	; 0x2d
    6b44:	7e a7       	std	Y+46, r23	; 0x2e
    6b46:	8f a7       	std	Y+47, r24	; 0x2f
    6b48:	98 ab       	std	Y+48, r25	; 0x30
    6b4a:	29 a5       	ldd	r18, Y+41	; 0x29
    6b4c:	3a a5       	ldd	r19, Y+42	; 0x2a
    6b4e:	4b a5       	ldd	r20, Y+43	; 0x2b
    6b50:	5c a5       	ldd	r21, Y+44	; 0x2c
    6b52:	6d a5       	ldd	r22, Y+45	; 0x2d
    6b54:	7e a5       	ldd	r23, Y+46	; 0x2e
    6b56:	8f a5       	ldd	r24, Y+47	; 0x2f
    6b58:	98 a9       	ldd	r25, Y+48	; 0x30
    6b5a:	05 e0       	ldi	r16, 0x05	; 5
    6b5c:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    6b60:	29 ab       	std	Y+49, r18	; 0x31
    6b62:	3a ab       	std	Y+50, r19	; 0x32
    6b64:	4b ab       	std	Y+51, r20	; 0x33
    6b66:	5c ab       	std	Y+52, r21	; 0x34
    6b68:	6d ab       	std	Y+53, r22	; 0x35
    6b6a:	7e ab       	std	Y+54, r23	; 0x36
    6b6c:	8f ab       	std	Y+55, r24	; 0x37
    6b6e:	98 af       	std	Y+56, r25	; 0x38
    6b70:	39 a9       	ldd	r19, Y+49	; 0x31
    6b72:	89 a5       	ldd	r24, Y+41	; 0x29
    6b74:	38 1b       	sub	r19, r24
    6b76:	39 af       	std	Y+57, r19	; 0x39
    6b78:	91 e0       	ldi	r25, 0x01	; 1
    6b7a:	22 96       	adiw	r28, 0x02	; 2
    6b7c:	9f af       	std	Y+63, r25	; 0x3f
    6b7e:	22 97       	sbiw	r28, 0x02	; 2
    6b80:	29 ad       	ldd	r18, Y+57	; 0x39
    6b82:	39 a9       	ldd	r19, Y+49	; 0x31
    6b84:	32 17       	cp	r19, r18
    6b86:	18 f0       	brcs	.+6      	; 0x6b8e <LCD_voidWriteNumber+0x3fc>
    6b88:	22 96       	adiw	r28, 0x02	; 2
    6b8a:	1f ae       	std	Y+63, r1	; 0x3f
    6b8c:	22 97       	sbiw	r28, 0x02	; 2
    6b8e:	8a a9       	ldd	r24, Y+50	; 0x32
    6b90:	9a a5       	ldd	r25, Y+42	; 0x2a
    6b92:	89 1b       	sub	r24, r25
    6b94:	8a af       	std	Y+58, r24	; 0x3a
    6b96:	21 e0       	ldi	r18, 0x01	; 1
    6b98:	23 96       	adiw	r28, 0x03	; 3
    6b9a:	2f af       	std	Y+63, r18	; 0x3f
    6b9c:	23 97       	sbiw	r28, 0x03	; 3
    6b9e:	3a ad       	ldd	r19, Y+58	; 0x3a
    6ba0:	8a a9       	ldd	r24, Y+50	; 0x32
    6ba2:	83 17       	cp	r24, r19
    6ba4:	18 f0       	brcs	.+6      	; 0x6bac <LCD_voidWriteNumber+0x41a>
    6ba6:	23 96       	adiw	r28, 0x03	; 3
    6ba8:	1f ae       	std	Y+63, r1	; 0x3f
    6baa:	23 97       	sbiw	r28, 0x03	; 3
    6bac:	9a ad       	ldd	r25, Y+58	; 0x3a
    6bae:	22 96       	adiw	r28, 0x02	; 2
    6bb0:	2f ad       	ldd	r18, Y+63	; 0x3f
    6bb2:	22 97       	sbiw	r28, 0x02	; 2
    6bb4:	92 1b       	sub	r25, r18
    6bb6:	24 96       	adiw	r28, 0x04	; 4
    6bb8:	9f af       	std	Y+63, r25	; 0x3f
    6bba:	24 97       	sbiw	r28, 0x04	; 4
    6bbc:	31 e0       	ldi	r19, 0x01	; 1
    6bbe:	25 96       	adiw	r28, 0x05	; 5
    6bc0:	3f af       	std	Y+63, r19	; 0x3f
    6bc2:	25 97       	sbiw	r28, 0x05	; 5
    6bc4:	24 96       	adiw	r28, 0x04	; 4
    6bc6:	8f ad       	ldd	r24, Y+63	; 0x3f
    6bc8:	24 97       	sbiw	r28, 0x04	; 4
    6bca:	9a ad       	ldd	r25, Y+58	; 0x3a
    6bcc:	98 17       	cp	r25, r24
    6bce:	18 f0       	brcs	.+6      	; 0x6bd6 <LCD_voidWriteNumber+0x444>
    6bd0:	25 96       	adiw	r28, 0x05	; 5
    6bd2:	1f ae       	std	Y+63, r1	; 0x3f
    6bd4:	25 97       	sbiw	r28, 0x05	; 5
    6bd6:	23 96       	adiw	r28, 0x03	; 3
    6bd8:	2f ad       	ldd	r18, Y+63	; 0x3f
    6bda:	23 97       	sbiw	r28, 0x03	; 3
    6bdc:	25 96       	adiw	r28, 0x05	; 5
    6bde:	3f ad       	ldd	r19, Y+63	; 0x3f
    6be0:	25 97       	sbiw	r28, 0x05	; 5
    6be2:	23 2b       	or	r18, r19
    6be4:	23 96       	adiw	r28, 0x03	; 3
    6be6:	2f af       	std	Y+63, r18	; 0x3f
    6be8:	23 97       	sbiw	r28, 0x03	; 3
    6bea:	24 96       	adiw	r28, 0x04	; 4
    6bec:	8f ad       	ldd	r24, Y+63	; 0x3f
    6bee:	24 97       	sbiw	r28, 0x04	; 4
    6bf0:	8a af       	std	Y+58, r24	; 0x3a
    6bf2:	9b a9       	ldd	r25, Y+51	; 0x33
    6bf4:	2b a5       	ldd	r18, Y+43	; 0x2b
    6bf6:	92 1b       	sub	r25, r18
    6bf8:	9b af       	std	Y+59, r25	; 0x3b
    6bfa:	31 e0       	ldi	r19, 0x01	; 1
    6bfc:	26 96       	adiw	r28, 0x06	; 6
    6bfe:	3f af       	std	Y+63, r19	; 0x3f
    6c00:	26 97       	sbiw	r28, 0x06	; 6
    6c02:	8b ad       	ldd	r24, Y+59	; 0x3b
    6c04:	9b a9       	ldd	r25, Y+51	; 0x33
    6c06:	98 17       	cp	r25, r24
    6c08:	18 f0       	brcs	.+6      	; 0x6c10 <LCD_voidWriteNumber+0x47e>
    6c0a:	26 96       	adiw	r28, 0x06	; 6
    6c0c:	1f ae       	std	Y+63, r1	; 0x3f
    6c0e:	26 97       	sbiw	r28, 0x06	; 6
    6c10:	2b ad       	ldd	r18, Y+59	; 0x3b
    6c12:	23 96       	adiw	r28, 0x03	; 3
    6c14:	3f ad       	ldd	r19, Y+63	; 0x3f
    6c16:	23 97       	sbiw	r28, 0x03	; 3
    6c18:	23 1b       	sub	r18, r19
    6c1a:	27 96       	adiw	r28, 0x07	; 7
    6c1c:	2f af       	std	Y+63, r18	; 0x3f
    6c1e:	27 97       	sbiw	r28, 0x07	; 7
    6c20:	81 e0       	ldi	r24, 0x01	; 1
    6c22:	28 96       	adiw	r28, 0x08	; 8
    6c24:	8f af       	std	Y+63, r24	; 0x3f
    6c26:	28 97       	sbiw	r28, 0x08	; 8
    6c28:	27 96       	adiw	r28, 0x07	; 7
    6c2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    6c2c:	27 97       	sbiw	r28, 0x07	; 7
    6c2e:	2b ad       	ldd	r18, Y+59	; 0x3b
    6c30:	29 17       	cp	r18, r25
    6c32:	18 f0       	brcs	.+6      	; 0x6c3a <LCD_voidWriteNumber+0x4a8>
    6c34:	28 96       	adiw	r28, 0x08	; 8
    6c36:	1f ae       	std	Y+63, r1	; 0x3f
    6c38:	28 97       	sbiw	r28, 0x08	; 8
    6c3a:	26 96       	adiw	r28, 0x06	; 6
    6c3c:	3f ad       	ldd	r19, Y+63	; 0x3f
    6c3e:	26 97       	sbiw	r28, 0x06	; 6
    6c40:	28 96       	adiw	r28, 0x08	; 8
    6c42:	8f ad       	ldd	r24, Y+63	; 0x3f
    6c44:	28 97       	sbiw	r28, 0x08	; 8
    6c46:	38 2b       	or	r19, r24
    6c48:	26 96       	adiw	r28, 0x06	; 6
    6c4a:	3f af       	std	Y+63, r19	; 0x3f
    6c4c:	26 97       	sbiw	r28, 0x06	; 6
    6c4e:	27 96       	adiw	r28, 0x07	; 7
    6c50:	9f ad       	ldd	r25, Y+63	; 0x3f
    6c52:	27 97       	sbiw	r28, 0x07	; 7
    6c54:	9b af       	std	Y+59, r25	; 0x3b
    6c56:	2c a9       	ldd	r18, Y+52	; 0x34
    6c58:	3c a5       	ldd	r19, Y+44	; 0x2c
    6c5a:	23 1b       	sub	r18, r19
    6c5c:	2c af       	std	Y+60, r18	; 0x3c
    6c5e:	81 e0       	ldi	r24, 0x01	; 1
    6c60:	29 96       	adiw	r28, 0x09	; 9
    6c62:	8f af       	std	Y+63, r24	; 0x3f
    6c64:	29 97       	sbiw	r28, 0x09	; 9
    6c66:	9c ad       	ldd	r25, Y+60	; 0x3c
    6c68:	2c a9       	ldd	r18, Y+52	; 0x34
    6c6a:	29 17       	cp	r18, r25
    6c6c:	18 f0       	brcs	.+6      	; 0x6c74 <LCD_voidWriteNumber+0x4e2>
    6c6e:	29 96       	adiw	r28, 0x09	; 9
    6c70:	1f ae       	std	Y+63, r1	; 0x3f
    6c72:	29 97       	sbiw	r28, 0x09	; 9
    6c74:	3c ad       	ldd	r19, Y+60	; 0x3c
    6c76:	26 96       	adiw	r28, 0x06	; 6
    6c78:	8f ad       	ldd	r24, Y+63	; 0x3f
    6c7a:	26 97       	sbiw	r28, 0x06	; 6
    6c7c:	38 1b       	sub	r19, r24
    6c7e:	2a 96       	adiw	r28, 0x0a	; 10
    6c80:	3f af       	std	Y+63, r19	; 0x3f
    6c82:	2a 97       	sbiw	r28, 0x0a	; 10
    6c84:	91 e0       	ldi	r25, 0x01	; 1
    6c86:	2b 96       	adiw	r28, 0x0b	; 11
    6c88:	9f af       	std	Y+63, r25	; 0x3f
    6c8a:	2b 97       	sbiw	r28, 0x0b	; 11
    6c8c:	2a 96       	adiw	r28, 0x0a	; 10
    6c8e:	2f ad       	ldd	r18, Y+63	; 0x3f
    6c90:	2a 97       	sbiw	r28, 0x0a	; 10
    6c92:	3c ad       	ldd	r19, Y+60	; 0x3c
    6c94:	32 17       	cp	r19, r18
    6c96:	18 f0       	brcs	.+6      	; 0x6c9e <LCD_voidWriteNumber+0x50c>
    6c98:	2b 96       	adiw	r28, 0x0b	; 11
    6c9a:	1f ae       	std	Y+63, r1	; 0x3f
    6c9c:	2b 97       	sbiw	r28, 0x0b	; 11
    6c9e:	29 96       	adiw	r28, 0x09	; 9
    6ca0:	8f ad       	ldd	r24, Y+63	; 0x3f
    6ca2:	29 97       	sbiw	r28, 0x09	; 9
    6ca4:	2b 96       	adiw	r28, 0x0b	; 11
    6ca6:	9f ad       	ldd	r25, Y+63	; 0x3f
    6ca8:	2b 97       	sbiw	r28, 0x0b	; 11
    6caa:	89 2b       	or	r24, r25
    6cac:	29 96       	adiw	r28, 0x09	; 9
    6cae:	8f af       	std	Y+63, r24	; 0x3f
    6cb0:	29 97       	sbiw	r28, 0x09	; 9
    6cb2:	2a 96       	adiw	r28, 0x0a	; 10
    6cb4:	2f ad       	ldd	r18, Y+63	; 0x3f
    6cb6:	2a 97       	sbiw	r28, 0x0a	; 10
    6cb8:	2c af       	std	Y+60, r18	; 0x3c
    6cba:	3d a9       	ldd	r19, Y+53	; 0x35
    6cbc:	8d a5       	ldd	r24, Y+45	; 0x2d
    6cbe:	38 1b       	sub	r19, r24
    6cc0:	3d af       	std	Y+61, r19	; 0x3d
    6cc2:	91 e0       	ldi	r25, 0x01	; 1
    6cc4:	2c 96       	adiw	r28, 0x0c	; 12
    6cc6:	9f af       	std	Y+63, r25	; 0x3f
    6cc8:	2c 97       	sbiw	r28, 0x0c	; 12
    6cca:	2d ad       	ldd	r18, Y+61	; 0x3d
    6ccc:	3d a9       	ldd	r19, Y+53	; 0x35
    6cce:	32 17       	cp	r19, r18
    6cd0:	18 f0       	brcs	.+6      	; 0x6cd8 <LCD_voidWriteNumber+0x546>
    6cd2:	2c 96       	adiw	r28, 0x0c	; 12
    6cd4:	1f ae       	std	Y+63, r1	; 0x3f
    6cd6:	2c 97       	sbiw	r28, 0x0c	; 12
    6cd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    6cda:	29 96       	adiw	r28, 0x09	; 9
    6cdc:	9f ad       	ldd	r25, Y+63	; 0x3f
    6cde:	29 97       	sbiw	r28, 0x09	; 9
    6ce0:	89 1b       	sub	r24, r25
    6ce2:	2d 96       	adiw	r28, 0x0d	; 13
    6ce4:	8f af       	std	Y+63, r24	; 0x3f
    6ce6:	2d 97       	sbiw	r28, 0x0d	; 13
    6ce8:	21 e0       	ldi	r18, 0x01	; 1
    6cea:	2e 96       	adiw	r28, 0x0e	; 14
    6cec:	2f af       	std	Y+63, r18	; 0x3f
    6cee:	2e 97       	sbiw	r28, 0x0e	; 14
    6cf0:	2d 96       	adiw	r28, 0x0d	; 13
    6cf2:	3f ad       	ldd	r19, Y+63	; 0x3f
    6cf4:	2d 97       	sbiw	r28, 0x0d	; 13
    6cf6:	8d ad       	ldd	r24, Y+61	; 0x3d
    6cf8:	83 17       	cp	r24, r19
    6cfa:	18 f0       	brcs	.+6      	; 0x6d02 <LCD_voidWriteNumber+0x570>
    6cfc:	2e 96       	adiw	r28, 0x0e	; 14
    6cfe:	1f ae       	std	Y+63, r1	; 0x3f
    6d00:	2e 97       	sbiw	r28, 0x0e	; 14
    6d02:	2c 96       	adiw	r28, 0x0c	; 12
    6d04:	9f ad       	ldd	r25, Y+63	; 0x3f
    6d06:	2c 97       	sbiw	r28, 0x0c	; 12
    6d08:	2e 96       	adiw	r28, 0x0e	; 14
    6d0a:	2f ad       	ldd	r18, Y+63	; 0x3f
    6d0c:	2e 97       	sbiw	r28, 0x0e	; 14
    6d0e:	92 2b       	or	r25, r18
    6d10:	2c 96       	adiw	r28, 0x0c	; 12
    6d12:	9f af       	std	Y+63, r25	; 0x3f
    6d14:	2c 97       	sbiw	r28, 0x0c	; 12
    6d16:	2d 96       	adiw	r28, 0x0d	; 13
    6d18:	3f ad       	ldd	r19, Y+63	; 0x3f
    6d1a:	2d 97       	sbiw	r28, 0x0d	; 13
    6d1c:	3d af       	std	Y+61, r19	; 0x3d
    6d1e:	8e a9       	ldd	r24, Y+54	; 0x36
    6d20:	9e a5       	ldd	r25, Y+46	; 0x2e
    6d22:	89 1b       	sub	r24, r25
    6d24:	8e af       	std	Y+62, r24	; 0x3e
    6d26:	21 e0       	ldi	r18, 0x01	; 1
    6d28:	2f 96       	adiw	r28, 0x0f	; 15
    6d2a:	2f af       	std	Y+63, r18	; 0x3f
    6d2c:	2f 97       	sbiw	r28, 0x0f	; 15
    6d2e:	3e ad       	ldd	r19, Y+62	; 0x3e
    6d30:	8e a9       	ldd	r24, Y+54	; 0x36
    6d32:	83 17       	cp	r24, r19
    6d34:	18 f0       	brcs	.+6      	; 0x6d3c <LCD_voidWriteNumber+0x5aa>
    6d36:	2f 96       	adiw	r28, 0x0f	; 15
    6d38:	1f ae       	std	Y+63, r1	; 0x3f
    6d3a:	2f 97       	sbiw	r28, 0x0f	; 15
    6d3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    6d3e:	2c 96       	adiw	r28, 0x0c	; 12
    6d40:	2f ad       	ldd	r18, Y+63	; 0x3f
    6d42:	2c 97       	sbiw	r28, 0x0c	; 12
    6d44:	92 1b       	sub	r25, r18
    6d46:	60 96       	adiw	r28, 0x10	; 16
    6d48:	9f af       	std	Y+63, r25	; 0x3f
    6d4a:	60 97       	sbiw	r28, 0x10	; 16
    6d4c:	31 e0       	ldi	r19, 0x01	; 1
    6d4e:	61 96       	adiw	r28, 0x11	; 17
    6d50:	3f af       	std	Y+63, r19	; 0x3f
    6d52:	61 97       	sbiw	r28, 0x11	; 17
    6d54:	60 96       	adiw	r28, 0x10	; 16
    6d56:	8f ad       	ldd	r24, Y+63	; 0x3f
    6d58:	60 97       	sbiw	r28, 0x10	; 16
    6d5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    6d5c:	98 17       	cp	r25, r24
    6d5e:	18 f0       	brcs	.+6      	; 0x6d66 <LCD_voidWriteNumber+0x5d4>
    6d60:	61 96       	adiw	r28, 0x11	; 17
    6d62:	1f ae       	std	Y+63, r1	; 0x3f
    6d64:	61 97       	sbiw	r28, 0x11	; 17
    6d66:	2f 96       	adiw	r28, 0x0f	; 15
    6d68:	2f ad       	ldd	r18, Y+63	; 0x3f
    6d6a:	2f 97       	sbiw	r28, 0x0f	; 15
    6d6c:	61 96       	adiw	r28, 0x11	; 17
    6d6e:	3f ad       	ldd	r19, Y+63	; 0x3f
    6d70:	61 97       	sbiw	r28, 0x11	; 17
    6d72:	23 2b       	or	r18, r19
    6d74:	2f 96       	adiw	r28, 0x0f	; 15
    6d76:	2f af       	std	Y+63, r18	; 0x3f
    6d78:	2f 97       	sbiw	r28, 0x0f	; 15
    6d7a:	60 96       	adiw	r28, 0x10	; 16
    6d7c:	8f ad       	ldd	r24, Y+63	; 0x3f
    6d7e:	60 97       	sbiw	r28, 0x10	; 16
    6d80:	8e af       	std	Y+62, r24	; 0x3e
    6d82:	9f a9       	ldd	r25, Y+55	; 0x37
    6d84:	2f a5       	ldd	r18, Y+47	; 0x2f
    6d86:	92 1b       	sub	r25, r18
    6d88:	9f af       	std	Y+63, r25	; 0x3f
    6d8a:	31 e0       	ldi	r19, 0x01	; 1
    6d8c:	62 96       	adiw	r28, 0x12	; 18
    6d8e:	3f af       	std	Y+63, r19	; 0x3f
    6d90:	62 97       	sbiw	r28, 0x12	; 18
    6d92:	8f ad       	ldd	r24, Y+63	; 0x3f
    6d94:	9f a9       	ldd	r25, Y+55	; 0x37
    6d96:	98 17       	cp	r25, r24
    6d98:	18 f0       	brcs	.+6      	; 0x6da0 <LCD_voidWriteNumber+0x60e>
    6d9a:	62 96       	adiw	r28, 0x12	; 18
    6d9c:	1f ae       	std	Y+63, r1	; 0x3f
    6d9e:	62 97       	sbiw	r28, 0x12	; 18
    6da0:	2f ad       	ldd	r18, Y+63	; 0x3f
    6da2:	2f 96       	adiw	r28, 0x0f	; 15
    6da4:	3f ad       	ldd	r19, Y+63	; 0x3f
    6da6:	2f 97       	sbiw	r28, 0x0f	; 15
    6da8:	23 1b       	sub	r18, r19
    6daa:	63 96       	adiw	r28, 0x13	; 19
    6dac:	2f af       	std	Y+63, r18	; 0x3f
    6dae:	63 97       	sbiw	r28, 0x13	; 19
    6db0:	81 e0       	ldi	r24, 0x01	; 1
    6db2:	64 96       	adiw	r28, 0x14	; 20
    6db4:	8f af       	std	Y+63, r24	; 0x3f
    6db6:	64 97       	sbiw	r28, 0x14	; 20
    6db8:	63 96       	adiw	r28, 0x13	; 19
    6dba:	9f ad       	ldd	r25, Y+63	; 0x3f
    6dbc:	63 97       	sbiw	r28, 0x13	; 19
    6dbe:	2f ad       	ldd	r18, Y+63	; 0x3f
    6dc0:	29 17       	cp	r18, r25
    6dc2:	18 f0       	brcs	.+6      	; 0x6dca <LCD_voidWriteNumber+0x638>
    6dc4:	64 96       	adiw	r28, 0x14	; 20
    6dc6:	1f ae       	std	Y+63, r1	; 0x3f
    6dc8:	64 97       	sbiw	r28, 0x14	; 20
    6dca:	62 96       	adiw	r28, 0x12	; 18
    6dcc:	3f ad       	ldd	r19, Y+63	; 0x3f
    6dce:	62 97       	sbiw	r28, 0x12	; 18
    6dd0:	64 96       	adiw	r28, 0x14	; 20
    6dd2:	8f ad       	ldd	r24, Y+63	; 0x3f
    6dd4:	64 97       	sbiw	r28, 0x14	; 20
    6dd6:	38 2b       	or	r19, r24
    6dd8:	62 96       	adiw	r28, 0x12	; 18
    6dda:	3f af       	std	Y+63, r19	; 0x3f
    6ddc:	62 97       	sbiw	r28, 0x12	; 18
    6dde:	63 96       	adiw	r28, 0x13	; 19
    6de0:	9f ad       	ldd	r25, Y+63	; 0x3f
    6de2:	63 97       	sbiw	r28, 0x13	; 19
    6de4:	9f af       	std	Y+63, r25	; 0x3f
    6de6:	28 ad       	ldd	r18, Y+56	; 0x38
    6de8:	38 a9       	ldd	r19, Y+48	; 0x30
    6dea:	23 1b       	sub	r18, r19
    6dec:	21 96       	adiw	r28, 0x01	; 1
    6dee:	2f af       	std	Y+63, r18	; 0x3f
    6df0:	21 97       	sbiw	r28, 0x01	; 1
    6df2:	21 96       	adiw	r28, 0x01	; 1
    6df4:	8f ad       	ldd	r24, Y+63	; 0x3f
    6df6:	21 97       	sbiw	r28, 0x01	; 1
    6df8:	62 96       	adiw	r28, 0x12	; 18
    6dfa:	9f ad       	ldd	r25, Y+63	; 0x3f
    6dfc:	62 97       	sbiw	r28, 0x12	; 18
    6dfe:	89 1b       	sub	r24, r25
    6e00:	21 96       	adiw	r28, 0x01	; 1
    6e02:	8f af       	std	Y+63, r24	; 0x3f
    6e04:	21 97       	sbiw	r28, 0x01	; 1
    6e06:	29 ad       	ldd	r18, Y+57	; 0x39
    6e08:	29 ab       	std	Y+49, r18	; 0x31
    6e0a:	3a ad       	ldd	r19, Y+58	; 0x3a
    6e0c:	3a ab       	std	Y+50, r19	; 0x32
    6e0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    6e10:	8b ab       	std	Y+51, r24	; 0x33
    6e12:	9c ad       	ldd	r25, Y+60	; 0x3c
    6e14:	9c ab       	std	Y+52, r25	; 0x34
    6e16:	2d ad       	ldd	r18, Y+61	; 0x3d
    6e18:	2d ab       	std	Y+53, r18	; 0x35
    6e1a:	3e ad       	ldd	r19, Y+62	; 0x3e
    6e1c:	3e ab       	std	Y+54, r19	; 0x36
    6e1e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6e20:	8f ab       	std	Y+55, r24	; 0x37
    6e22:	21 96       	adiw	r28, 0x01	; 1
    6e24:	9f ad       	ldd	r25, Y+63	; 0x3f
    6e26:	21 97       	sbiw	r28, 0x01	; 1
    6e28:	98 af       	std	Y+56, r25	; 0x38
    6e2a:	29 a9       	ldd	r18, Y+49	; 0x31
    6e2c:	39 a1       	ldd	r19, Y+33	; 0x21
    6e2e:	23 0f       	add	r18, r19
    6e30:	65 96       	adiw	r28, 0x15	; 21
    6e32:	2f af       	std	Y+63, r18	; 0x3f
    6e34:	65 97       	sbiw	r28, 0x15	; 21
    6e36:	81 e0       	ldi	r24, 0x01	; 1
    6e38:	6d 96       	adiw	r28, 0x1d	; 29
    6e3a:	8f af       	std	Y+63, r24	; 0x3f
    6e3c:	6d 97       	sbiw	r28, 0x1d	; 29
    6e3e:	65 96       	adiw	r28, 0x15	; 21
    6e40:	9f ad       	ldd	r25, Y+63	; 0x3f
    6e42:	65 97       	sbiw	r28, 0x15	; 21
    6e44:	29 a9       	ldd	r18, Y+49	; 0x31
    6e46:	92 17       	cp	r25, r18
    6e48:	18 f0       	brcs	.+6      	; 0x6e50 <LCD_voidWriteNumber+0x6be>
    6e4a:	6d 96       	adiw	r28, 0x1d	; 29
    6e4c:	1f ae       	std	Y+63, r1	; 0x3f
    6e4e:	6d 97       	sbiw	r28, 0x1d	; 29
    6e50:	3a a9       	ldd	r19, Y+50	; 0x32
    6e52:	8a a1       	ldd	r24, Y+34	; 0x22
    6e54:	38 0f       	add	r19, r24
    6e56:	66 96       	adiw	r28, 0x16	; 22
    6e58:	3f af       	std	Y+63, r19	; 0x3f
    6e5a:	66 97       	sbiw	r28, 0x16	; 22
    6e5c:	91 e0       	ldi	r25, 0x01	; 1
    6e5e:	6e 96       	adiw	r28, 0x1e	; 30
    6e60:	9f af       	std	Y+63, r25	; 0x3f
    6e62:	6e 97       	sbiw	r28, 0x1e	; 30
    6e64:	66 96       	adiw	r28, 0x16	; 22
    6e66:	2f ad       	ldd	r18, Y+63	; 0x3f
    6e68:	66 97       	sbiw	r28, 0x16	; 22
    6e6a:	3a a9       	ldd	r19, Y+50	; 0x32
    6e6c:	23 17       	cp	r18, r19
    6e6e:	18 f0       	brcs	.+6      	; 0x6e76 <LCD_voidWriteNumber+0x6e4>
    6e70:	6e 96       	adiw	r28, 0x1e	; 30
    6e72:	1f ae       	std	Y+63, r1	; 0x3f
    6e74:	6e 97       	sbiw	r28, 0x1e	; 30
    6e76:	6d 96       	adiw	r28, 0x1d	; 29
    6e78:	8f ad       	ldd	r24, Y+63	; 0x3f
    6e7a:	6d 97       	sbiw	r28, 0x1d	; 29
    6e7c:	66 96       	adiw	r28, 0x16	; 22
    6e7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6e80:	66 97       	sbiw	r28, 0x16	; 22
    6e82:	89 0f       	add	r24, r25
    6e84:	6f 96       	adiw	r28, 0x1f	; 31
    6e86:	8f af       	std	Y+63, r24	; 0x3f
    6e88:	6f 97       	sbiw	r28, 0x1f	; 31
    6e8a:	21 e0       	ldi	r18, 0x01	; 1
    6e8c:	a0 96       	adiw	r28, 0x20	; 32
    6e8e:	2f af       	std	Y+63, r18	; 0x3f
    6e90:	a0 97       	sbiw	r28, 0x20	; 32
    6e92:	6f 96       	adiw	r28, 0x1f	; 31
    6e94:	3f ad       	ldd	r19, Y+63	; 0x3f
    6e96:	6f 97       	sbiw	r28, 0x1f	; 31
    6e98:	66 96       	adiw	r28, 0x16	; 22
    6e9a:	8f ad       	ldd	r24, Y+63	; 0x3f
    6e9c:	66 97       	sbiw	r28, 0x16	; 22
    6e9e:	38 17       	cp	r19, r24
    6ea0:	18 f0       	brcs	.+6      	; 0x6ea8 <LCD_voidWriteNumber+0x716>
    6ea2:	a0 96       	adiw	r28, 0x20	; 32
    6ea4:	1f ae       	std	Y+63, r1	; 0x3f
    6ea6:	a0 97       	sbiw	r28, 0x20	; 32
    6ea8:	6e 96       	adiw	r28, 0x1e	; 30
    6eaa:	9f ad       	ldd	r25, Y+63	; 0x3f
    6eac:	6e 97       	sbiw	r28, 0x1e	; 30
    6eae:	a0 96       	adiw	r28, 0x20	; 32
    6eb0:	2f ad       	ldd	r18, Y+63	; 0x3f
    6eb2:	a0 97       	sbiw	r28, 0x20	; 32
    6eb4:	92 2b       	or	r25, r18
    6eb6:	6e 96       	adiw	r28, 0x1e	; 30
    6eb8:	9f af       	std	Y+63, r25	; 0x3f
    6eba:	6e 97       	sbiw	r28, 0x1e	; 30
    6ebc:	6f 96       	adiw	r28, 0x1f	; 31
    6ebe:	3f ad       	ldd	r19, Y+63	; 0x3f
    6ec0:	6f 97       	sbiw	r28, 0x1f	; 31
    6ec2:	66 96       	adiw	r28, 0x16	; 22
    6ec4:	3f af       	std	Y+63, r19	; 0x3f
    6ec6:	66 97       	sbiw	r28, 0x16	; 22
    6ec8:	8b a9       	ldd	r24, Y+51	; 0x33
    6eca:	9b a1       	ldd	r25, Y+35	; 0x23
    6ecc:	89 0f       	add	r24, r25
    6ece:	67 96       	adiw	r28, 0x17	; 23
    6ed0:	8f af       	std	Y+63, r24	; 0x3f
    6ed2:	67 97       	sbiw	r28, 0x17	; 23
    6ed4:	21 e0       	ldi	r18, 0x01	; 1
    6ed6:	a1 96       	adiw	r28, 0x21	; 33
    6ed8:	2f af       	std	Y+63, r18	; 0x3f
    6eda:	a1 97       	sbiw	r28, 0x21	; 33
    6edc:	67 96       	adiw	r28, 0x17	; 23
    6ede:	3f ad       	ldd	r19, Y+63	; 0x3f
    6ee0:	67 97       	sbiw	r28, 0x17	; 23
    6ee2:	8b a9       	ldd	r24, Y+51	; 0x33
    6ee4:	38 17       	cp	r19, r24
    6ee6:	18 f0       	brcs	.+6      	; 0x6eee <LCD_voidWriteNumber+0x75c>
    6ee8:	a1 96       	adiw	r28, 0x21	; 33
    6eea:	1f ae       	std	Y+63, r1	; 0x3f
    6eec:	a1 97       	sbiw	r28, 0x21	; 33
    6eee:	6e 96       	adiw	r28, 0x1e	; 30
    6ef0:	9f ad       	ldd	r25, Y+63	; 0x3f
    6ef2:	6e 97       	sbiw	r28, 0x1e	; 30
    6ef4:	67 96       	adiw	r28, 0x17	; 23
    6ef6:	2f ad       	ldd	r18, Y+63	; 0x3f
    6ef8:	67 97       	sbiw	r28, 0x17	; 23
    6efa:	92 0f       	add	r25, r18
    6efc:	a2 96       	adiw	r28, 0x22	; 34
    6efe:	9f af       	std	Y+63, r25	; 0x3f
    6f00:	a2 97       	sbiw	r28, 0x22	; 34
    6f02:	31 e0       	ldi	r19, 0x01	; 1
    6f04:	a3 96       	adiw	r28, 0x23	; 35
    6f06:	3f af       	std	Y+63, r19	; 0x3f
    6f08:	a3 97       	sbiw	r28, 0x23	; 35
    6f0a:	a2 96       	adiw	r28, 0x22	; 34
    6f0c:	8f ad       	ldd	r24, Y+63	; 0x3f
    6f0e:	a2 97       	sbiw	r28, 0x22	; 34
    6f10:	67 96       	adiw	r28, 0x17	; 23
    6f12:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f14:	67 97       	sbiw	r28, 0x17	; 23
    6f16:	89 17       	cp	r24, r25
    6f18:	18 f0       	brcs	.+6      	; 0x6f20 <LCD_voidWriteNumber+0x78e>
    6f1a:	a3 96       	adiw	r28, 0x23	; 35
    6f1c:	1f ae       	std	Y+63, r1	; 0x3f
    6f1e:	a3 97       	sbiw	r28, 0x23	; 35
    6f20:	a1 96       	adiw	r28, 0x21	; 33
    6f22:	2f ad       	ldd	r18, Y+63	; 0x3f
    6f24:	a1 97       	sbiw	r28, 0x21	; 33
    6f26:	a3 96       	adiw	r28, 0x23	; 35
    6f28:	3f ad       	ldd	r19, Y+63	; 0x3f
    6f2a:	a3 97       	sbiw	r28, 0x23	; 35
    6f2c:	23 2b       	or	r18, r19
    6f2e:	a1 96       	adiw	r28, 0x21	; 33
    6f30:	2f af       	std	Y+63, r18	; 0x3f
    6f32:	a1 97       	sbiw	r28, 0x21	; 33
    6f34:	a2 96       	adiw	r28, 0x22	; 34
    6f36:	8f ad       	ldd	r24, Y+63	; 0x3f
    6f38:	a2 97       	sbiw	r28, 0x22	; 34
    6f3a:	67 96       	adiw	r28, 0x17	; 23
    6f3c:	8f af       	std	Y+63, r24	; 0x3f
    6f3e:	67 97       	sbiw	r28, 0x17	; 23
    6f40:	9c a9       	ldd	r25, Y+52	; 0x34
    6f42:	2c a1       	ldd	r18, Y+36	; 0x24
    6f44:	92 0f       	add	r25, r18
    6f46:	68 96       	adiw	r28, 0x18	; 24
    6f48:	9f af       	std	Y+63, r25	; 0x3f
    6f4a:	68 97       	sbiw	r28, 0x18	; 24
    6f4c:	31 e0       	ldi	r19, 0x01	; 1
    6f4e:	a4 96       	adiw	r28, 0x24	; 36
    6f50:	3f af       	std	Y+63, r19	; 0x3f
    6f52:	a4 97       	sbiw	r28, 0x24	; 36
    6f54:	68 96       	adiw	r28, 0x18	; 24
    6f56:	8f ad       	ldd	r24, Y+63	; 0x3f
    6f58:	68 97       	sbiw	r28, 0x18	; 24
    6f5a:	9c a9       	ldd	r25, Y+52	; 0x34
    6f5c:	89 17       	cp	r24, r25
    6f5e:	18 f0       	brcs	.+6      	; 0x6f66 <LCD_voidWriteNumber+0x7d4>
    6f60:	a4 96       	adiw	r28, 0x24	; 36
    6f62:	1f ae       	std	Y+63, r1	; 0x3f
    6f64:	a4 97       	sbiw	r28, 0x24	; 36
    6f66:	a1 96       	adiw	r28, 0x21	; 33
    6f68:	2f ad       	ldd	r18, Y+63	; 0x3f
    6f6a:	a1 97       	sbiw	r28, 0x21	; 33
    6f6c:	68 96       	adiw	r28, 0x18	; 24
    6f6e:	3f ad       	ldd	r19, Y+63	; 0x3f
    6f70:	68 97       	sbiw	r28, 0x18	; 24
    6f72:	23 0f       	add	r18, r19
    6f74:	a5 96       	adiw	r28, 0x25	; 37
    6f76:	2f af       	std	Y+63, r18	; 0x3f
    6f78:	a5 97       	sbiw	r28, 0x25	; 37
    6f7a:	81 e0       	ldi	r24, 0x01	; 1
    6f7c:	a6 96       	adiw	r28, 0x26	; 38
    6f7e:	8f af       	std	Y+63, r24	; 0x3f
    6f80:	a6 97       	sbiw	r28, 0x26	; 38
    6f82:	a5 96       	adiw	r28, 0x25	; 37
    6f84:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f86:	a5 97       	sbiw	r28, 0x25	; 37
    6f88:	68 96       	adiw	r28, 0x18	; 24
    6f8a:	2f ad       	ldd	r18, Y+63	; 0x3f
    6f8c:	68 97       	sbiw	r28, 0x18	; 24
    6f8e:	92 17       	cp	r25, r18
    6f90:	18 f0       	brcs	.+6      	; 0x6f98 <LCD_voidWriteNumber+0x806>
    6f92:	a6 96       	adiw	r28, 0x26	; 38
    6f94:	1f ae       	std	Y+63, r1	; 0x3f
    6f96:	a6 97       	sbiw	r28, 0x26	; 38
    6f98:	a4 96       	adiw	r28, 0x24	; 36
    6f9a:	3f ad       	ldd	r19, Y+63	; 0x3f
    6f9c:	a4 97       	sbiw	r28, 0x24	; 36
    6f9e:	a6 96       	adiw	r28, 0x26	; 38
    6fa0:	8f ad       	ldd	r24, Y+63	; 0x3f
    6fa2:	a6 97       	sbiw	r28, 0x26	; 38
    6fa4:	38 2b       	or	r19, r24
    6fa6:	a4 96       	adiw	r28, 0x24	; 36
    6fa8:	3f af       	std	Y+63, r19	; 0x3f
    6faa:	a4 97       	sbiw	r28, 0x24	; 36
    6fac:	a5 96       	adiw	r28, 0x25	; 37
    6fae:	9f ad       	ldd	r25, Y+63	; 0x3f
    6fb0:	a5 97       	sbiw	r28, 0x25	; 37
    6fb2:	68 96       	adiw	r28, 0x18	; 24
    6fb4:	9f af       	std	Y+63, r25	; 0x3f
    6fb6:	68 97       	sbiw	r28, 0x18	; 24
    6fb8:	2d a9       	ldd	r18, Y+53	; 0x35
    6fba:	3d a1       	ldd	r19, Y+37	; 0x25
    6fbc:	23 0f       	add	r18, r19
    6fbe:	69 96       	adiw	r28, 0x19	; 25
    6fc0:	2f af       	std	Y+63, r18	; 0x3f
    6fc2:	69 97       	sbiw	r28, 0x19	; 25
    6fc4:	81 e0       	ldi	r24, 0x01	; 1
    6fc6:	a7 96       	adiw	r28, 0x27	; 39
    6fc8:	8f af       	std	Y+63, r24	; 0x3f
    6fca:	a7 97       	sbiw	r28, 0x27	; 39
    6fcc:	69 96       	adiw	r28, 0x19	; 25
    6fce:	9f ad       	ldd	r25, Y+63	; 0x3f
    6fd0:	69 97       	sbiw	r28, 0x19	; 25
    6fd2:	2d a9       	ldd	r18, Y+53	; 0x35
    6fd4:	92 17       	cp	r25, r18
    6fd6:	18 f0       	brcs	.+6      	; 0x6fde <LCD_voidWriteNumber+0x84c>
    6fd8:	a7 96       	adiw	r28, 0x27	; 39
    6fda:	1f ae       	std	Y+63, r1	; 0x3f
    6fdc:	a7 97       	sbiw	r28, 0x27	; 39
    6fde:	a4 96       	adiw	r28, 0x24	; 36
    6fe0:	3f ad       	ldd	r19, Y+63	; 0x3f
    6fe2:	a4 97       	sbiw	r28, 0x24	; 36
    6fe4:	69 96       	adiw	r28, 0x19	; 25
    6fe6:	8f ad       	ldd	r24, Y+63	; 0x3f
    6fe8:	69 97       	sbiw	r28, 0x19	; 25
    6fea:	38 0f       	add	r19, r24
    6fec:	a8 96       	adiw	r28, 0x28	; 40
    6fee:	3f af       	std	Y+63, r19	; 0x3f
    6ff0:	a8 97       	sbiw	r28, 0x28	; 40
    6ff2:	91 e0       	ldi	r25, 0x01	; 1
    6ff4:	a9 96       	adiw	r28, 0x29	; 41
    6ff6:	9f af       	std	Y+63, r25	; 0x3f
    6ff8:	a9 97       	sbiw	r28, 0x29	; 41
    6ffa:	a8 96       	adiw	r28, 0x28	; 40
    6ffc:	2f ad       	ldd	r18, Y+63	; 0x3f
    6ffe:	a8 97       	sbiw	r28, 0x28	; 40
    7000:	69 96       	adiw	r28, 0x19	; 25
    7002:	3f ad       	ldd	r19, Y+63	; 0x3f
    7004:	69 97       	sbiw	r28, 0x19	; 25
    7006:	23 17       	cp	r18, r19
    7008:	18 f0       	brcs	.+6      	; 0x7010 <LCD_voidWriteNumber+0x87e>
    700a:	a9 96       	adiw	r28, 0x29	; 41
    700c:	1f ae       	std	Y+63, r1	; 0x3f
    700e:	a9 97       	sbiw	r28, 0x29	; 41
    7010:	a7 96       	adiw	r28, 0x27	; 39
    7012:	8f ad       	ldd	r24, Y+63	; 0x3f
    7014:	a7 97       	sbiw	r28, 0x27	; 39
    7016:	a9 96       	adiw	r28, 0x29	; 41
    7018:	9f ad       	ldd	r25, Y+63	; 0x3f
    701a:	a9 97       	sbiw	r28, 0x29	; 41
    701c:	89 2b       	or	r24, r25
    701e:	a7 96       	adiw	r28, 0x27	; 39
    7020:	8f af       	std	Y+63, r24	; 0x3f
    7022:	a7 97       	sbiw	r28, 0x27	; 39
    7024:	a8 96       	adiw	r28, 0x28	; 40
    7026:	2f ad       	ldd	r18, Y+63	; 0x3f
    7028:	a8 97       	sbiw	r28, 0x28	; 40
    702a:	69 96       	adiw	r28, 0x19	; 25
    702c:	2f af       	std	Y+63, r18	; 0x3f
    702e:	69 97       	sbiw	r28, 0x19	; 25
    7030:	3e a9       	ldd	r19, Y+54	; 0x36
    7032:	8e a1       	ldd	r24, Y+38	; 0x26
    7034:	38 0f       	add	r19, r24
    7036:	6a 96       	adiw	r28, 0x1a	; 26
    7038:	3f af       	std	Y+63, r19	; 0x3f
    703a:	6a 97       	sbiw	r28, 0x1a	; 26
    703c:	91 e0       	ldi	r25, 0x01	; 1
    703e:	aa 96       	adiw	r28, 0x2a	; 42
    7040:	9f af       	std	Y+63, r25	; 0x3f
    7042:	aa 97       	sbiw	r28, 0x2a	; 42
    7044:	6a 96       	adiw	r28, 0x1a	; 26
    7046:	2f ad       	ldd	r18, Y+63	; 0x3f
    7048:	6a 97       	sbiw	r28, 0x1a	; 26
    704a:	3e a9       	ldd	r19, Y+54	; 0x36
    704c:	23 17       	cp	r18, r19
    704e:	18 f0       	brcs	.+6      	; 0x7056 <LCD_voidWriteNumber+0x8c4>
    7050:	aa 96       	adiw	r28, 0x2a	; 42
    7052:	1f ae       	std	Y+63, r1	; 0x3f
    7054:	aa 97       	sbiw	r28, 0x2a	; 42
    7056:	a7 96       	adiw	r28, 0x27	; 39
    7058:	8f ad       	ldd	r24, Y+63	; 0x3f
    705a:	a7 97       	sbiw	r28, 0x27	; 39
    705c:	6a 96       	adiw	r28, 0x1a	; 26
    705e:	9f ad       	ldd	r25, Y+63	; 0x3f
    7060:	6a 97       	sbiw	r28, 0x1a	; 26
    7062:	89 0f       	add	r24, r25
    7064:	ab 96       	adiw	r28, 0x2b	; 43
    7066:	8f af       	std	Y+63, r24	; 0x3f
    7068:	ab 97       	sbiw	r28, 0x2b	; 43
    706a:	21 e0       	ldi	r18, 0x01	; 1
    706c:	ac 96       	adiw	r28, 0x2c	; 44
    706e:	2f af       	std	Y+63, r18	; 0x3f
    7070:	ac 97       	sbiw	r28, 0x2c	; 44
    7072:	ab 96       	adiw	r28, 0x2b	; 43
    7074:	3f ad       	ldd	r19, Y+63	; 0x3f
    7076:	ab 97       	sbiw	r28, 0x2b	; 43
    7078:	6a 96       	adiw	r28, 0x1a	; 26
    707a:	8f ad       	ldd	r24, Y+63	; 0x3f
    707c:	6a 97       	sbiw	r28, 0x1a	; 26
    707e:	38 17       	cp	r19, r24
    7080:	18 f0       	brcs	.+6      	; 0x7088 <LCD_voidWriteNumber+0x8f6>
    7082:	ac 96       	adiw	r28, 0x2c	; 44
    7084:	1f ae       	std	Y+63, r1	; 0x3f
    7086:	ac 97       	sbiw	r28, 0x2c	; 44
    7088:	aa 96       	adiw	r28, 0x2a	; 42
    708a:	9f ad       	ldd	r25, Y+63	; 0x3f
    708c:	aa 97       	sbiw	r28, 0x2a	; 42
    708e:	ac 96       	adiw	r28, 0x2c	; 44
    7090:	2f ad       	ldd	r18, Y+63	; 0x3f
    7092:	ac 97       	sbiw	r28, 0x2c	; 44
    7094:	92 2b       	or	r25, r18
    7096:	aa 96       	adiw	r28, 0x2a	; 42
    7098:	9f af       	std	Y+63, r25	; 0x3f
    709a:	aa 97       	sbiw	r28, 0x2a	; 42
    709c:	ab 96       	adiw	r28, 0x2b	; 43
    709e:	3f ad       	ldd	r19, Y+63	; 0x3f
    70a0:	ab 97       	sbiw	r28, 0x2b	; 43
    70a2:	6a 96       	adiw	r28, 0x1a	; 26
    70a4:	3f af       	std	Y+63, r19	; 0x3f
    70a6:	6a 97       	sbiw	r28, 0x1a	; 26
    70a8:	8f a9       	ldd	r24, Y+55	; 0x37
    70aa:	9f a1       	ldd	r25, Y+39	; 0x27
    70ac:	89 0f       	add	r24, r25
    70ae:	6b 96       	adiw	r28, 0x1b	; 27
    70b0:	8f af       	std	Y+63, r24	; 0x3f
    70b2:	6b 97       	sbiw	r28, 0x1b	; 27
    70b4:	21 e0       	ldi	r18, 0x01	; 1
    70b6:	ad 96       	adiw	r28, 0x2d	; 45
    70b8:	2f af       	std	Y+63, r18	; 0x3f
    70ba:	ad 97       	sbiw	r28, 0x2d	; 45
    70bc:	6b 96       	adiw	r28, 0x1b	; 27
    70be:	3f ad       	ldd	r19, Y+63	; 0x3f
    70c0:	6b 97       	sbiw	r28, 0x1b	; 27
    70c2:	8f a9       	ldd	r24, Y+55	; 0x37
    70c4:	38 17       	cp	r19, r24
    70c6:	18 f0       	brcs	.+6      	; 0x70ce <LCD_voidWriteNumber+0x93c>
    70c8:	ad 96       	adiw	r28, 0x2d	; 45
    70ca:	1f ae       	std	Y+63, r1	; 0x3f
    70cc:	ad 97       	sbiw	r28, 0x2d	; 45
    70ce:	aa 96       	adiw	r28, 0x2a	; 42
    70d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    70d2:	aa 97       	sbiw	r28, 0x2a	; 42
    70d4:	6b 96       	adiw	r28, 0x1b	; 27
    70d6:	2f ad       	ldd	r18, Y+63	; 0x3f
    70d8:	6b 97       	sbiw	r28, 0x1b	; 27
    70da:	92 0f       	add	r25, r18
    70dc:	ae 96       	adiw	r28, 0x2e	; 46
    70de:	9f af       	std	Y+63, r25	; 0x3f
    70e0:	ae 97       	sbiw	r28, 0x2e	; 46
    70e2:	31 e0       	ldi	r19, 0x01	; 1
    70e4:	af 96       	adiw	r28, 0x2f	; 47
    70e6:	3f af       	std	Y+63, r19	; 0x3f
    70e8:	af 97       	sbiw	r28, 0x2f	; 47
    70ea:	ae 96       	adiw	r28, 0x2e	; 46
    70ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    70ee:	ae 97       	sbiw	r28, 0x2e	; 46
    70f0:	6b 96       	adiw	r28, 0x1b	; 27
    70f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    70f4:	6b 97       	sbiw	r28, 0x1b	; 27
    70f6:	89 17       	cp	r24, r25
    70f8:	18 f0       	brcs	.+6      	; 0x7100 <LCD_voidWriteNumber+0x96e>
    70fa:	af 96       	adiw	r28, 0x2f	; 47
    70fc:	1f ae       	std	Y+63, r1	; 0x3f
    70fe:	af 97       	sbiw	r28, 0x2f	; 47
    7100:	ad 96       	adiw	r28, 0x2d	; 45
    7102:	2f ad       	ldd	r18, Y+63	; 0x3f
    7104:	ad 97       	sbiw	r28, 0x2d	; 45
    7106:	af 96       	adiw	r28, 0x2f	; 47
    7108:	3f ad       	ldd	r19, Y+63	; 0x3f
    710a:	af 97       	sbiw	r28, 0x2f	; 47
    710c:	23 2b       	or	r18, r19
    710e:	ad 96       	adiw	r28, 0x2d	; 45
    7110:	2f af       	std	Y+63, r18	; 0x3f
    7112:	ad 97       	sbiw	r28, 0x2d	; 45
    7114:	ae 96       	adiw	r28, 0x2e	; 46
    7116:	8f ad       	ldd	r24, Y+63	; 0x3f
    7118:	ae 97       	sbiw	r28, 0x2e	; 46
    711a:	6b 96       	adiw	r28, 0x1b	; 27
    711c:	8f af       	std	Y+63, r24	; 0x3f
    711e:	6b 97       	sbiw	r28, 0x1b	; 27
    7120:	98 ad       	ldd	r25, Y+56	; 0x38
    7122:	28 a5       	ldd	r18, Y+40	; 0x28
    7124:	92 0f       	add	r25, r18
    7126:	6c 96       	adiw	r28, 0x1c	; 28
    7128:	9f af       	std	Y+63, r25	; 0x3f
    712a:	6c 97       	sbiw	r28, 0x1c	; 28
    712c:	ad 96       	adiw	r28, 0x2d	; 45
    712e:	8f ad       	ldd	r24, Y+63	; 0x3f
    7130:	ad 97       	sbiw	r28, 0x2d	; 45
    7132:	6c 96       	adiw	r28, 0x1c	; 28
    7134:	3f ad       	ldd	r19, Y+63	; 0x3f
    7136:	6c 97       	sbiw	r28, 0x1c	; 28
    7138:	83 0f       	add	r24, r19
    713a:	6c 96       	adiw	r28, 0x1c	; 28
    713c:	8f af       	std	Y+63, r24	; 0x3f
    713e:	6c 97       	sbiw	r28, 0x1c	; 28
    7140:	65 96       	adiw	r28, 0x15	; 21
    7142:	8f ad       	ldd	r24, Y+63	; 0x3f
    7144:	65 97       	sbiw	r28, 0x15	; 21
    7146:	89 ab       	std	Y+49, r24	; 0x31
    7148:	66 96       	adiw	r28, 0x16	; 22
    714a:	9f ad       	ldd	r25, Y+63	; 0x3f
    714c:	66 97       	sbiw	r28, 0x16	; 22
    714e:	9a ab       	std	Y+50, r25	; 0x32
    7150:	67 96       	adiw	r28, 0x17	; 23
    7152:	2f ad       	ldd	r18, Y+63	; 0x3f
    7154:	67 97       	sbiw	r28, 0x17	; 23
    7156:	2b ab       	std	Y+51, r18	; 0x33
    7158:	68 96       	adiw	r28, 0x18	; 24
    715a:	3f ad       	ldd	r19, Y+63	; 0x3f
    715c:	68 97       	sbiw	r28, 0x18	; 24
    715e:	3c ab       	std	Y+52, r19	; 0x34
    7160:	69 96       	adiw	r28, 0x19	; 25
    7162:	8f ad       	ldd	r24, Y+63	; 0x3f
    7164:	69 97       	sbiw	r28, 0x19	; 25
    7166:	8d ab       	std	Y+53, r24	; 0x35
    7168:	6a 96       	adiw	r28, 0x1a	; 26
    716a:	9f ad       	ldd	r25, Y+63	; 0x3f
    716c:	6a 97       	sbiw	r28, 0x1a	; 26
    716e:	9e ab       	std	Y+54, r25	; 0x36
    7170:	6b 96       	adiw	r28, 0x1b	; 27
    7172:	2f ad       	ldd	r18, Y+63	; 0x3f
    7174:	6b 97       	sbiw	r28, 0x1b	; 27
    7176:	2f ab       	std	Y+55, r18	; 0x37
    7178:	6c 96       	adiw	r28, 0x1c	; 28
    717a:	3f ad       	ldd	r19, Y+63	; 0x3f
    717c:	6c 97       	sbiw	r28, 0x1c	; 28
    717e:	38 af       	std	Y+56, r19	; 0x38
    7180:	29 a9       	ldd	r18, Y+49	; 0x31
    7182:	3a a9       	ldd	r19, Y+50	; 0x32
    7184:	4b a9       	ldd	r20, Y+51	; 0x33
    7186:	5c a9       	ldd	r21, Y+52	; 0x34
    7188:	6d a9       	ldd	r22, Y+53	; 0x35
    718a:	7e a9       	ldd	r23, Y+54	; 0x36
    718c:	8f a9       	ldd	r24, Y+55	; 0x37
    718e:	98 ad       	ldd	r25, Y+56	; 0x38
    7190:	03 e0       	ldi	r16, 0x03	; 3
    7192:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    7196:	a2 2e       	mov	r10, r18
    7198:	b3 2e       	mov	r11, r19
    719a:	c4 2e       	mov	r12, r20
    719c:	d5 2e       	mov	r13, r21
    719e:	e6 2e       	mov	r14, r22
    71a0:	f7 2e       	mov	r15, r23
    71a2:	08 2f       	mov	r16, r24
    71a4:	19 2f       	mov	r17, r25
    71a6:	af 82       	std	Y+7, r10	; 0x07
    71a8:	b8 86       	std	Y+8, r11	; 0x08
    71aa:	c9 86       	std	Y+9, r12	; 0x09
    71ac:	da 86       	std	Y+10, r13	; 0x0a
    71ae:	eb 86       	std	Y+11, r14	; 0x0b
    71b0:	fc 86       	std	Y+12, r15	; 0x0c
    71b2:	0d 87       	std	Y+13, r16	; 0x0d
    71b4:	1e 87       	std	Y+14, r17	; 0x0e
		Local_s64CopyNumber = (s64) Copy_f64Number - Local_s64CopyNumber;
    71b6:	69 89       	ldd	r22, Y+17	; 0x11
    71b8:	7a 89       	ldd	r23, Y+18	; 0x12
    71ba:	8b 89       	ldd	r24, Y+19	; 0x13
    71bc:	9c 89       	ldd	r25, Y+20	; 0x14
    71be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__fixsfdi>
    71c2:	2f 8b       	std	Y+23, r18	; 0x17
    71c4:	38 8f       	std	Y+24, r19	; 0x18
    71c6:	49 8f       	std	Y+25, r20	; 0x19
    71c8:	5a 8f       	std	Y+26, r21	; 0x1a
    71ca:	6b 8f       	std	Y+27, r22	; 0x1b
    71cc:	7c 8f       	std	Y+28, r23	; 0x1c
    71ce:	8d 8f       	std	Y+29, r24	; 0x1d
    71d0:	9e 8f       	std	Y+30, r25	; 0x1e
    71d2:	8f 81       	ldd	r24, Y+7	; 0x07
    71d4:	e0 96       	adiw	r28, 0x30	; 48
    71d6:	8f af       	std	Y+63, r24	; 0x3f
    71d8:	e0 97       	sbiw	r28, 0x30	; 48
    71da:	98 85       	ldd	r25, Y+8	; 0x08
    71dc:	e1 96       	adiw	r28, 0x31	; 49
    71de:	9f af       	std	Y+63, r25	; 0x3f
    71e0:	e1 97       	sbiw	r28, 0x31	; 49
    71e2:	29 85       	ldd	r18, Y+9	; 0x09
    71e4:	e2 96       	adiw	r28, 0x32	; 50
    71e6:	2f af       	std	Y+63, r18	; 0x3f
    71e8:	e2 97       	sbiw	r28, 0x32	; 50
    71ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    71ec:	e3 96       	adiw	r28, 0x33	; 51
    71ee:	3f af       	std	Y+63, r19	; 0x3f
    71f0:	e3 97       	sbiw	r28, 0x33	; 51
    71f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    71f4:	e4 96       	adiw	r28, 0x34	; 52
    71f6:	8f af       	std	Y+63, r24	; 0x3f
    71f8:	e4 97       	sbiw	r28, 0x34	; 52
    71fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    71fc:	e5 96       	adiw	r28, 0x35	; 53
    71fe:	9f af       	std	Y+63, r25	; 0x3f
    7200:	e5 97       	sbiw	r28, 0x35	; 53
    7202:	2d 85       	ldd	r18, Y+13	; 0x0d
    7204:	e6 96       	adiw	r28, 0x36	; 54
    7206:	2f af       	std	Y+63, r18	; 0x3f
    7208:	e6 97       	sbiw	r28, 0x36	; 54
    720a:	3e 85       	ldd	r19, Y+14	; 0x0e
    720c:	e7 96       	adiw	r28, 0x37	; 55
    720e:	3f af       	std	Y+63, r19	; 0x3f
    7210:	e7 97       	sbiw	r28, 0x37	; 55
    7212:	8f 89       	ldd	r24, Y+23	; 0x17
    7214:	e0 96       	adiw	r28, 0x30	; 48
    7216:	9f ad       	ldd	r25, Y+63	; 0x3f
    7218:	e0 97       	sbiw	r28, 0x30	; 48
    721a:	89 1b       	sub	r24, r25
    721c:	e8 96       	adiw	r28, 0x38	; 56
    721e:	8f af       	std	Y+63, r24	; 0x3f
    7220:	e8 97       	sbiw	r28, 0x38	; 56
    7222:	21 e0       	ldi	r18, 0x01	; 1
    7224:	c1 58       	subi	r28, 0x81	; 129
    7226:	df 4f       	sbci	r29, 0xFF	; 255
    7228:	28 83       	st	Y, r18
    722a:	cf 57       	subi	r28, 0x7F	; 127
    722c:	d0 40       	sbci	r29, 0x00	; 0
    722e:	e8 96       	adiw	r28, 0x38	; 56
    7230:	3f ad       	ldd	r19, Y+63	; 0x3f
    7232:	e8 97       	sbiw	r28, 0x38	; 56
    7234:	8f 89       	ldd	r24, Y+23	; 0x17
    7236:	83 17       	cp	r24, r19
    7238:	28 f0       	brcs	.+10     	; 0x7244 <LCD_voidWriteNumber+0xab2>
    723a:	c1 58       	subi	r28, 0x81	; 129
    723c:	df 4f       	sbci	r29, 0xFF	; 255
    723e:	18 82       	st	Y, r1
    7240:	cf 57       	subi	r28, 0x7F	; 127
    7242:	d0 40       	sbci	r29, 0x00	; 0
    7244:	98 8d       	ldd	r25, Y+24	; 0x18
    7246:	e1 96       	adiw	r28, 0x31	; 49
    7248:	2f ad       	ldd	r18, Y+63	; 0x3f
    724a:	e1 97       	sbiw	r28, 0x31	; 49
    724c:	92 1b       	sub	r25, r18
    724e:	e9 96       	adiw	r28, 0x39	; 57
    7250:	9f af       	std	Y+63, r25	; 0x3f
    7252:	e9 97       	sbiw	r28, 0x39	; 57
    7254:	31 e0       	ldi	r19, 0x01	; 1
    7256:	c0 58       	subi	r28, 0x80	; 128
    7258:	df 4f       	sbci	r29, 0xFF	; 255
    725a:	38 83       	st	Y, r19
    725c:	c0 58       	subi	r28, 0x80	; 128
    725e:	d0 40       	sbci	r29, 0x00	; 0
    7260:	e9 96       	adiw	r28, 0x39	; 57
    7262:	8f ad       	ldd	r24, Y+63	; 0x3f
    7264:	e9 97       	sbiw	r28, 0x39	; 57
    7266:	98 8d       	ldd	r25, Y+24	; 0x18
    7268:	98 17       	cp	r25, r24
    726a:	28 f0       	brcs	.+10     	; 0x7276 <LCD_voidWriteNumber+0xae4>
    726c:	c0 58       	subi	r28, 0x80	; 128
    726e:	df 4f       	sbci	r29, 0xFF	; 255
    7270:	18 82       	st	Y, r1
    7272:	c0 58       	subi	r28, 0x80	; 128
    7274:	d0 40       	sbci	r29, 0x00	; 0
    7276:	e9 96       	adiw	r28, 0x39	; 57
    7278:	2f ad       	ldd	r18, Y+63	; 0x3f
    727a:	e9 97       	sbiw	r28, 0x39	; 57
    727c:	c1 58       	subi	r28, 0x81	; 129
    727e:	df 4f       	sbci	r29, 0xFF	; 255
    7280:	38 81       	ld	r19, Y
    7282:	cf 57       	subi	r28, 0x7F	; 127
    7284:	d0 40       	sbci	r29, 0x00	; 0
    7286:	23 1b       	sub	r18, r19
    7288:	cf 57       	subi	r28, 0x7F	; 127
    728a:	df 4f       	sbci	r29, 0xFF	; 255
    728c:	28 83       	st	Y, r18
    728e:	c1 58       	subi	r28, 0x81	; 129
    7290:	d0 40       	sbci	r29, 0x00	; 0
    7292:	81 e0       	ldi	r24, 0x01	; 1
    7294:	ce 57       	subi	r28, 0x7E	; 126
    7296:	df 4f       	sbci	r29, 0xFF	; 255
    7298:	88 83       	st	Y, r24
    729a:	c2 58       	subi	r28, 0x82	; 130
    729c:	d0 40       	sbci	r29, 0x00	; 0
    729e:	cf 57       	subi	r28, 0x7F	; 127
    72a0:	df 4f       	sbci	r29, 0xFF	; 255
    72a2:	98 81       	ld	r25, Y
    72a4:	c1 58       	subi	r28, 0x81	; 129
    72a6:	d0 40       	sbci	r29, 0x00	; 0
    72a8:	e9 96       	adiw	r28, 0x39	; 57
    72aa:	2f ad       	ldd	r18, Y+63	; 0x3f
    72ac:	e9 97       	sbiw	r28, 0x39	; 57
    72ae:	29 17       	cp	r18, r25
    72b0:	28 f0       	brcs	.+10     	; 0x72bc <LCD_voidWriteNumber+0xb2a>
    72b2:	ce 57       	subi	r28, 0x7E	; 126
    72b4:	df 4f       	sbci	r29, 0xFF	; 255
    72b6:	18 82       	st	Y, r1
    72b8:	c2 58       	subi	r28, 0x82	; 130
    72ba:	d0 40       	sbci	r29, 0x00	; 0
    72bc:	c0 58       	subi	r28, 0x80	; 128
    72be:	df 4f       	sbci	r29, 0xFF	; 255
    72c0:	38 81       	ld	r19, Y
    72c2:	c0 58       	subi	r28, 0x80	; 128
    72c4:	d0 40       	sbci	r29, 0x00	; 0
    72c6:	ce 57       	subi	r28, 0x7E	; 126
    72c8:	df 4f       	sbci	r29, 0xFF	; 255
    72ca:	88 81       	ld	r24, Y
    72cc:	c2 58       	subi	r28, 0x82	; 130
    72ce:	d0 40       	sbci	r29, 0x00	; 0
    72d0:	38 2b       	or	r19, r24
    72d2:	c0 58       	subi	r28, 0x80	; 128
    72d4:	df 4f       	sbci	r29, 0xFF	; 255
    72d6:	38 83       	st	Y, r19
    72d8:	c0 58       	subi	r28, 0x80	; 128
    72da:	d0 40       	sbci	r29, 0x00	; 0
    72dc:	cf 57       	subi	r28, 0x7F	; 127
    72de:	df 4f       	sbci	r29, 0xFF	; 255
    72e0:	98 81       	ld	r25, Y
    72e2:	c1 58       	subi	r28, 0x81	; 129
    72e4:	d0 40       	sbci	r29, 0x00	; 0
    72e6:	e9 96       	adiw	r28, 0x39	; 57
    72e8:	9f af       	std	Y+63, r25	; 0x3f
    72ea:	e9 97       	sbiw	r28, 0x39	; 57
    72ec:	29 8d       	ldd	r18, Y+25	; 0x19
    72ee:	e2 96       	adiw	r28, 0x32	; 50
    72f0:	3f ad       	ldd	r19, Y+63	; 0x3f
    72f2:	e2 97       	sbiw	r28, 0x32	; 50
    72f4:	23 1b       	sub	r18, r19
    72f6:	ea 96       	adiw	r28, 0x3a	; 58
    72f8:	2f af       	std	Y+63, r18	; 0x3f
    72fa:	ea 97       	sbiw	r28, 0x3a	; 58
    72fc:	81 e0       	ldi	r24, 0x01	; 1
    72fe:	cd 57       	subi	r28, 0x7D	; 125
    7300:	df 4f       	sbci	r29, 0xFF	; 255
    7302:	88 83       	st	Y, r24
    7304:	c3 58       	subi	r28, 0x83	; 131
    7306:	d0 40       	sbci	r29, 0x00	; 0
    7308:	ea 96       	adiw	r28, 0x3a	; 58
    730a:	9f ad       	ldd	r25, Y+63	; 0x3f
    730c:	ea 97       	sbiw	r28, 0x3a	; 58
    730e:	29 8d       	ldd	r18, Y+25	; 0x19
    7310:	29 17       	cp	r18, r25
    7312:	28 f0       	brcs	.+10     	; 0x731e <LCD_voidWriteNumber+0xb8c>
    7314:	cd 57       	subi	r28, 0x7D	; 125
    7316:	df 4f       	sbci	r29, 0xFF	; 255
    7318:	18 82       	st	Y, r1
    731a:	c3 58       	subi	r28, 0x83	; 131
    731c:	d0 40       	sbci	r29, 0x00	; 0
    731e:	ea 96       	adiw	r28, 0x3a	; 58
    7320:	3f ad       	ldd	r19, Y+63	; 0x3f
    7322:	ea 97       	sbiw	r28, 0x3a	; 58
    7324:	c0 58       	subi	r28, 0x80	; 128
    7326:	df 4f       	sbci	r29, 0xFF	; 255
    7328:	88 81       	ld	r24, Y
    732a:	c0 58       	subi	r28, 0x80	; 128
    732c:	d0 40       	sbci	r29, 0x00	; 0
    732e:	38 1b       	sub	r19, r24
    7330:	cc 57       	subi	r28, 0x7C	; 124
    7332:	df 4f       	sbci	r29, 0xFF	; 255
    7334:	38 83       	st	Y, r19
    7336:	c4 58       	subi	r28, 0x84	; 132
    7338:	d0 40       	sbci	r29, 0x00	; 0
    733a:	91 e0       	ldi	r25, 0x01	; 1
    733c:	cb 57       	subi	r28, 0x7B	; 123
    733e:	df 4f       	sbci	r29, 0xFF	; 255
    7340:	98 83       	st	Y, r25
    7342:	c5 58       	subi	r28, 0x85	; 133
    7344:	d0 40       	sbci	r29, 0x00	; 0
    7346:	cc 57       	subi	r28, 0x7C	; 124
    7348:	df 4f       	sbci	r29, 0xFF	; 255
    734a:	28 81       	ld	r18, Y
    734c:	c4 58       	subi	r28, 0x84	; 132
    734e:	d0 40       	sbci	r29, 0x00	; 0
    7350:	ea 96       	adiw	r28, 0x3a	; 58
    7352:	3f ad       	ldd	r19, Y+63	; 0x3f
    7354:	ea 97       	sbiw	r28, 0x3a	; 58
    7356:	32 17       	cp	r19, r18
    7358:	28 f0       	brcs	.+10     	; 0x7364 <LCD_voidWriteNumber+0xbd2>
    735a:	cb 57       	subi	r28, 0x7B	; 123
    735c:	df 4f       	sbci	r29, 0xFF	; 255
    735e:	18 82       	st	Y, r1
    7360:	c5 58       	subi	r28, 0x85	; 133
    7362:	d0 40       	sbci	r29, 0x00	; 0
    7364:	cd 57       	subi	r28, 0x7D	; 125
    7366:	df 4f       	sbci	r29, 0xFF	; 255
    7368:	88 81       	ld	r24, Y
    736a:	c3 58       	subi	r28, 0x83	; 131
    736c:	d0 40       	sbci	r29, 0x00	; 0
    736e:	cb 57       	subi	r28, 0x7B	; 123
    7370:	df 4f       	sbci	r29, 0xFF	; 255
    7372:	98 81       	ld	r25, Y
    7374:	c5 58       	subi	r28, 0x85	; 133
    7376:	d0 40       	sbci	r29, 0x00	; 0
    7378:	89 2b       	or	r24, r25
    737a:	cd 57       	subi	r28, 0x7D	; 125
    737c:	df 4f       	sbci	r29, 0xFF	; 255
    737e:	88 83       	st	Y, r24
    7380:	c3 58       	subi	r28, 0x83	; 131
    7382:	d0 40       	sbci	r29, 0x00	; 0
    7384:	cc 57       	subi	r28, 0x7C	; 124
    7386:	df 4f       	sbci	r29, 0xFF	; 255
    7388:	28 81       	ld	r18, Y
    738a:	c4 58       	subi	r28, 0x84	; 132
    738c:	d0 40       	sbci	r29, 0x00	; 0
    738e:	ea 96       	adiw	r28, 0x3a	; 58
    7390:	2f af       	std	Y+63, r18	; 0x3f
    7392:	ea 97       	sbiw	r28, 0x3a	; 58
    7394:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7396:	e3 96       	adiw	r28, 0x33	; 51
    7398:	8f ad       	ldd	r24, Y+63	; 0x3f
    739a:	e3 97       	sbiw	r28, 0x33	; 51
    739c:	38 1b       	sub	r19, r24
    739e:	eb 96       	adiw	r28, 0x3b	; 59
    73a0:	3f af       	std	Y+63, r19	; 0x3f
    73a2:	eb 97       	sbiw	r28, 0x3b	; 59
    73a4:	91 e0       	ldi	r25, 0x01	; 1
    73a6:	ca 57       	subi	r28, 0x7A	; 122
    73a8:	df 4f       	sbci	r29, 0xFF	; 255
    73aa:	98 83       	st	Y, r25
    73ac:	c6 58       	subi	r28, 0x86	; 134
    73ae:	d0 40       	sbci	r29, 0x00	; 0
    73b0:	eb 96       	adiw	r28, 0x3b	; 59
    73b2:	2f ad       	ldd	r18, Y+63	; 0x3f
    73b4:	eb 97       	sbiw	r28, 0x3b	; 59
    73b6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    73b8:	32 17       	cp	r19, r18
    73ba:	28 f0       	brcs	.+10     	; 0x73c6 <LCD_voidWriteNumber+0xc34>
    73bc:	ca 57       	subi	r28, 0x7A	; 122
    73be:	df 4f       	sbci	r29, 0xFF	; 255
    73c0:	18 82       	st	Y, r1
    73c2:	c6 58       	subi	r28, 0x86	; 134
    73c4:	d0 40       	sbci	r29, 0x00	; 0
    73c6:	eb 96       	adiw	r28, 0x3b	; 59
    73c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    73ca:	eb 97       	sbiw	r28, 0x3b	; 59
    73cc:	cd 57       	subi	r28, 0x7D	; 125
    73ce:	df 4f       	sbci	r29, 0xFF	; 255
    73d0:	98 81       	ld	r25, Y
    73d2:	c3 58       	subi	r28, 0x83	; 131
    73d4:	d0 40       	sbci	r29, 0x00	; 0
    73d6:	89 1b       	sub	r24, r25
    73d8:	c9 57       	subi	r28, 0x79	; 121
    73da:	df 4f       	sbci	r29, 0xFF	; 255
    73dc:	88 83       	st	Y, r24
    73de:	c7 58       	subi	r28, 0x87	; 135
    73e0:	d0 40       	sbci	r29, 0x00	; 0
    73e2:	21 e0       	ldi	r18, 0x01	; 1
    73e4:	c8 57       	subi	r28, 0x78	; 120
    73e6:	df 4f       	sbci	r29, 0xFF	; 255
    73e8:	28 83       	st	Y, r18
    73ea:	c8 58       	subi	r28, 0x88	; 136
    73ec:	d0 40       	sbci	r29, 0x00	; 0
    73ee:	c9 57       	subi	r28, 0x79	; 121
    73f0:	df 4f       	sbci	r29, 0xFF	; 255
    73f2:	38 81       	ld	r19, Y
    73f4:	c7 58       	subi	r28, 0x87	; 135
    73f6:	d0 40       	sbci	r29, 0x00	; 0
    73f8:	eb 96       	adiw	r28, 0x3b	; 59
    73fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    73fc:	eb 97       	sbiw	r28, 0x3b	; 59
    73fe:	83 17       	cp	r24, r19
    7400:	28 f0       	brcs	.+10     	; 0x740c <LCD_voidWriteNumber+0xc7a>
    7402:	c8 57       	subi	r28, 0x78	; 120
    7404:	df 4f       	sbci	r29, 0xFF	; 255
    7406:	18 82       	st	Y, r1
    7408:	c8 58       	subi	r28, 0x88	; 136
    740a:	d0 40       	sbci	r29, 0x00	; 0
    740c:	ca 57       	subi	r28, 0x7A	; 122
    740e:	df 4f       	sbci	r29, 0xFF	; 255
    7410:	98 81       	ld	r25, Y
    7412:	c6 58       	subi	r28, 0x86	; 134
    7414:	d0 40       	sbci	r29, 0x00	; 0
    7416:	c8 57       	subi	r28, 0x78	; 120
    7418:	df 4f       	sbci	r29, 0xFF	; 255
    741a:	28 81       	ld	r18, Y
    741c:	c8 58       	subi	r28, 0x88	; 136
    741e:	d0 40       	sbci	r29, 0x00	; 0
    7420:	92 2b       	or	r25, r18
    7422:	ca 57       	subi	r28, 0x7A	; 122
    7424:	df 4f       	sbci	r29, 0xFF	; 255
    7426:	98 83       	st	Y, r25
    7428:	c6 58       	subi	r28, 0x86	; 134
    742a:	d0 40       	sbci	r29, 0x00	; 0
    742c:	c9 57       	subi	r28, 0x79	; 121
    742e:	df 4f       	sbci	r29, 0xFF	; 255
    7430:	38 81       	ld	r19, Y
    7432:	c7 58       	subi	r28, 0x87	; 135
    7434:	d0 40       	sbci	r29, 0x00	; 0
    7436:	eb 96       	adiw	r28, 0x3b	; 59
    7438:	3f af       	std	Y+63, r19	; 0x3f
    743a:	eb 97       	sbiw	r28, 0x3b	; 59
    743c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    743e:	e4 96       	adiw	r28, 0x34	; 52
    7440:	9f ad       	ldd	r25, Y+63	; 0x3f
    7442:	e4 97       	sbiw	r28, 0x34	; 52
    7444:	89 1b       	sub	r24, r25
    7446:	ec 96       	adiw	r28, 0x3c	; 60
    7448:	8f af       	std	Y+63, r24	; 0x3f
    744a:	ec 97       	sbiw	r28, 0x3c	; 60
    744c:	21 e0       	ldi	r18, 0x01	; 1
    744e:	c7 57       	subi	r28, 0x77	; 119
    7450:	df 4f       	sbci	r29, 0xFF	; 255
    7452:	28 83       	st	Y, r18
    7454:	c9 58       	subi	r28, 0x89	; 137
    7456:	d0 40       	sbci	r29, 0x00	; 0
    7458:	ec 96       	adiw	r28, 0x3c	; 60
    745a:	3f ad       	ldd	r19, Y+63	; 0x3f
    745c:	ec 97       	sbiw	r28, 0x3c	; 60
    745e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7460:	83 17       	cp	r24, r19
    7462:	28 f0       	brcs	.+10     	; 0x746e <LCD_voidWriteNumber+0xcdc>
    7464:	c7 57       	subi	r28, 0x77	; 119
    7466:	df 4f       	sbci	r29, 0xFF	; 255
    7468:	18 82       	st	Y, r1
    746a:	c9 58       	subi	r28, 0x89	; 137
    746c:	d0 40       	sbci	r29, 0x00	; 0
    746e:	ec 96       	adiw	r28, 0x3c	; 60
    7470:	9f ad       	ldd	r25, Y+63	; 0x3f
    7472:	ec 97       	sbiw	r28, 0x3c	; 60
    7474:	ca 57       	subi	r28, 0x7A	; 122
    7476:	df 4f       	sbci	r29, 0xFF	; 255
    7478:	28 81       	ld	r18, Y
    747a:	c6 58       	subi	r28, 0x86	; 134
    747c:	d0 40       	sbci	r29, 0x00	; 0
    747e:	92 1b       	sub	r25, r18
    7480:	c6 57       	subi	r28, 0x76	; 118
    7482:	df 4f       	sbci	r29, 0xFF	; 255
    7484:	98 83       	st	Y, r25
    7486:	ca 58       	subi	r28, 0x8A	; 138
    7488:	d0 40       	sbci	r29, 0x00	; 0
    748a:	31 e0       	ldi	r19, 0x01	; 1
    748c:	c5 57       	subi	r28, 0x75	; 117
    748e:	df 4f       	sbci	r29, 0xFF	; 255
    7490:	38 83       	st	Y, r19
    7492:	cb 58       	subi	r28, 0x8B	; 139
    7494:	d0 40       	sbci	r29, 0x00	; 0
    7496:	c6 57       	subi	r28, 0x76	; 118
    7498:	df 4f       	sbci	r29, 0xFF	; 255
    749a:	88 81       	ld	r24, Y
    749c:	ca 58       	subi	r28, 0x8A	; 138
    749e:	d0 40       	sbci	r29, 0x00	; 0
    74a0:	ec 96       	adiw	r28, 0x3c	; 60
    74a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    74a4:	ec 97       	sbiw	r28, 0x3c	; 60
    74a6:	98 17       	cp	r25, r24
    74a8:	28 f0       	brcs	.+10     	; 0x74b4 <LCD_voidWriteNumber+0xd22>
    74aa:	c5 57       	subi	r28, 0x75	; 117
    74ac:	df 4f       	sbci	r29, 0xFF	; 255
    74ae:	18 82       	st	Y, r1
    74b0:	cb 58       	subi	r28, 0x8B	; 139
    74b2:	d0 40       	sbci	r29, 0x00	; 0
    74b4:	c7 57       	subi	r28, 0x77	; 119
    74b6:	df 4f       	sbci	r29, 0xFF	; 255
    74b8:	28 81       	ld	r18, Y
    74ba:	c9 58       	subi	r28, 0x89	; 137
    74bc:	d0 40       	sbci	r29, 0x00	; 0
    74be:	c5 57       	subi	r28, 0x75	; 117
    74c0:	df 4f       	sbci	r29, 0xFF	; 255
    74c2:	38 81       	ld	r19, Y
    74c4:	cb 58       	subi	r28, 0x8B	; 139
    74c6:	d0 40       	sbci	r29, 0x00	; 0
    74c8:	23 2b       	or	r18, r19
    74ca:	c7 57       	subi	r28, 0x77	; 119
    74cc:	df 4f       	sbci	r29, 0xFF	; 255
    74ce:	28 83       	st	Y, r18
    74d0:	c9 58       	subi	r28, 0x89	; 137
    74d2:	d0 40       	sbci	r29, 0x00	; 0
    74d4:	c6 57       	subi	r28, 0x76	; 118
    74d6:	df 4f       	sbci	r29, 0xFF	; 255
    74d8:	88 81       	ld	r24, Y
    74da:	ca 58       	subi	r28, 0x8A	; 138
    74dc:	d0 40       	sbci	r29, 0x00	; 0
    74de:	ec 96       	adiw	r28, 0x3c	; 60
    74e0:	8f af       	std	Y+63, r24	; 0x3f
    74e2:	ec 97       	sbiw	r28, 0x3c	; 60
    74e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    74e6:	e5 96       	adiw	r28, 0x35	; 53
    74e8:	2f ad       	ldd	r18, Y+63	; 0x3f
    74ea:	e5 97       	sbiw	r28, 0x35	; 53
    74ec:	92 1b       	sub	r25, r18
    74ee:	ed 96       	adiw	r28, 0x3d	; 61
    74f0:	9f af       	std	Y+63, r25	; 0x3f
    74f2:	ed 97       	sbiw	r28, 0x3d	; 61
    74f4:	31 e0       	ldi	r19, 0x01	; 1
    74f6:	c4 57       	subi	r28, 0x74	; 116
    74f8:	df 4f       	sbci	r29, 0xFF	; 255
    74fa:	38 83       	st	Y, r19
    74fc:	cc 58       	subi	r28, 0x8C	; 140
    74fe:	d0 40       	sbci	r29, 0x00	; 0
    7500:	ed 96       	adiw	r28, 0x3d	; 61
    7502:	8f ad       	ldd	r24, Y+63	; 0x3f
    7504:	ed 97       	sbiw	r28, 0x3d	; 61
    7506:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7508:	98 17       	cp	r25, r24
    750a:	28 f0       	brcs	.+10     	; 0x7516 <LCD_voidWriteNumber+0xd84>
    750c:	c4 57       	subi	r28, 0x74	; 116
    750e:	df 4f       	sbci	r29, 0xFF	; 255
    7510:	18 82       	st	Y, r1
    7512:	cc 58       	subi	r28, 0x8C	; 140
    7514:	d0 40       	sbci	r29, 0x00	; 0
    7516:	ed 96       	adiw	r28, 0x3d	; 61
    7518:	2f ad       	ldd	r18, Y+63	; 0x3f
    751a:	ed 97       	sbiw	r28, 0x3d	; 61
    751c:	c7 57       	subi	r28, 0x77	; 119
    751e:	df 4f       	sbci	r29, 0xFF	; 255
    7520:	38 81       	ld	r19, Y
    7522:	c9 58       	subi	r28, 0x89	; 137
    7524:	d0 40       	sbci	r29, 0x00	; 0
    7526:	23 1b       	sub	r18, r19
    7528:	c3 57       	subi	r28, 0x73	; 115
    752a:	df 4f       	sbci	r29, 0xFF	; 255
    752c:	28 83       	st	Y, r18
    752e:	cd 58       	subi	r28, 0x8D	; 141
    7530:	d0 40       	sbci	r29, 0x00	; 0
    7532:	81 e0       	ldi	r24, 0x01	; 1
    7534:	c2 57       	subi	r28, 0x72	; 114
    7536:	df 4f       	sbci	r29, 0xFF	; 255
    7538:	88 83       	st	Y, r24
    753a:	ce 58       	subi	r28, 0x8E	; 142
    753c:	d0 40       	sbci	r29, 0x00	; 0
    753e:	c3 57       	subi	r28, 0x73	; 115
    7540:	df 4f       	sbci	r29, 0xFF	; 255
    7542:	98 81       	ld	r25, Y
    7544:	cd 58       	subi	r28, 0x8D	; 141
    7546:	d0 40       	sbci	r29, 0x00	; 0
    7548:	ed 96       	adiw	r28, 0x3d	; 61
    754a:	2f ad       	ldd	r18, Y+63	; 0x3f
    754c:	ed 97       	sbiw	r28, 0x3d	; 61
    754e:	29 17       	cp	r18, r25
    7550:	28 f0       	brcs	.+10     	; 0x755c <LCD_voidWriteNumber+0xdca>
    7552:	c2 57       	subi	r28, 0x72	; 114
    7554:	df 4f       	sbci	r29, 0xFF	; 255
    7556:	18 82       	st	Y, r1
    7558:	ce 58       	subi	r28, 0x8E	; 142
    755a:	d0 40       	sbci	r29, 0x00	; 0
    755c:	c4 57       	subi	r28, 0x74	; 116
    755e:	df 4f       	sbci	r29, 0xFF	; 255
    7560:	38 81       	ld	r19, Y
    7562:	cc 58       	subi	r28, 0x8C	; 140
    7564:	d0 40       	sbci	r29, 0x00	; 0
    7566:	c2 57       	subi	r28, 0x72	; 114
    7568:	df 4f       	sbci	r29, 0xFF	; 255
    756a:	88 81       	ld	r24, Y
    756c:	ce 58       	subi	r28, 0x8E	; 142
    756e:	d0 40       	sbci	r29, 0x00	; 0
    7570:	38 2b       	or	r19, r24
    7572:	c4 57       	subi	r28, 0x74	; 116
    7574:	df 4f       	sbci	r29, 0xFF	; 255
    7576:	38 83       	st	Y, r19
    7578:	cc 58       	subi	r28, 0x8C	; 140
    757a:	d0 40       	sbci	r29, 0x00	; 0
    757c:	c3 57       	subi	r28, 0x73	; 115
    757e:	df 4f       	sbci	r29, 0xFF	; 255
    7580:	98 81       	ld	r25, Y
    7582:	cd 58       	subi	r28, 0x8D	; 141
    7584:	d0 40       	sbci	r29, 0x00	; 0
    7586:	ed 96       	adiw	r28, 0x3d	; 61
    7588:	9f af       	std	Y+63, r25	; 0x3f
    758a:	ed 97       	sbiw	r28, 0x3d	; 61
    758c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    758e:	e6 96       	adiw	r28, 0x36	; 54
    7590:	3f ad       	ldd	r19, Y+63	; 0x3f
    7592:	e6 97       	sbiw	r28, 0x36	; 54
    7594:	23 1b       	sub	r18, r19
    7596:	ee 96       	adiw	r28, 0x3e	; 62
    7598:	2f af       	std	Y+63, r18	; 0x3f
    759a:	ee 97       	sbiw	r28, 0x3e	; 62
    759c:	81 e0       	ldi	r24, 0x01	; 1
    759e:	c1 57       	subi	r28, 0x71	; 113
    75a0:	df 4f       	sbci	r29, 0xFF	; 255
    75a2:	88 83       	st	Y, r24
    75a4:	cf 58       	subi	r28, 0x8F	; 143
    75a6:	d0 40       	sbci	r29, 0x00	; 0
    75a8:	ee 96       	adiw	r28, 0x3e	; 62
    75aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    75ac:	ee 97       	sbiw	r28, 0x3e	; 62
    75ae:	2d 8d       	ldd	r18, Y+29	; 0x1d
    75b0:	29 17       	cp	r18, r25
    75b2:	28 f0       	brcs	.+10     	; 0x75be <LCD_voidWriteNumber+0xe2c>
    75b4:	c1 57       	subi	r28, 0x71	; 113
    75b6:	df 4f       	sbci	r29, 0xFF	; 255
    75b8:	18 82       	st	Y, r1
    75ba:	cf 58       	subi	r28, 0x8F	; 143
    75bc:	d0 40       	sbci	r29, 0x00	; 0
    75be:	ee 96       	adiw	r28, 0x3e	; 62
    75c0:	3f ad       	ldd	r19, Y+63	; 0x3f
    75c2:	ee 97       	sbiw	r28, 0x3e	; 62
    75c4:	c4 57       	subi	r28, 0x74	; 116
    75c6:	df 4f       	sbci	r29, 0xFF	; 255
    75c8:	88 81       	ld	r24, Y
    75ca:	cc 58       	subi	r28, 0x8C	; 140
    75cc:	d0 40       	sbci	r29, 0x00	; 0
    75ce:	38 1b       	sub	r19, r24
    75d0:	c0 57       	subi	r28, 0x70	; 112
    75d2:	df 4f       	sbci	r29, 0xFF	; 255
    75d4:	38 83       	st	Y, r19
    75d6:	c0 59       	subi	r28, 0x90	; 144
    75d8:	d0 40       	sbci	r29, 0x00	; 0
    75da:	91 e0       	ldi	r25, 0x01	; 1
    75dc:	cf 56       	subi	r28, 0x6F	; 111
    75de:	df 4f       	sbci	r29, 0xFF	; 255
    75e0:	98 83       	st	Y, r25
    75e2:	c1 59       	subi	r28, 0x91	; 145
    75e4:	d0 40       	sbci	r29, 0x00	; 0
    75e6:	c0 57       	subi	r28, 0x70	; 112
    75e8:	df 4f       	sbci	r29, 0xFF	; 255
    75ea:	28 81       	ld	r18, Y
    75ec:	c0 59       	subi	r28, 0x90	; 144
    75ee:	d0 40       	sbci	r29, 0x00	; 0
    75f0:	ee 96       	adiw	r28, 0x3e	; 62
    75f2:	3f ad       	ldd	r19, Y+63	; 0x3f
    75f4:	ee 97       	sbiw	r28, 0x3e	; 62
    75f6:	32 17       	cp	r19, r18
    75f8:	28 f0       	brcs	.+10     	; 0x7604 <LCD_voidWriteNumber+0xe72>
    75fa:	cf 56       	subi	r28, 0x6F	; 111
    75fc:	df 4f       	sbci	r29, 0xFF	; 255
    75fe:	18 82       	st	Y, r1
    7600:	c1 59       	subi	r28, 0x91	; 145
    7602:	d0 40       	sbci	r29, 0x00	; 0
    7604:	c1 57       	subi	r28, 0x71	; 113
    7606:	df 4f       	sbci	r29, 0xFF	; 255
    7608:	88 81       	ld	r24, Y
    760a:	cf 58       	subi	r28, 0x8F	; 143
    760c:	d0 40       	sbci	r29, 0x00	; 0
    760e:	cf 56       	subi	r28, 0x6F	; 111
    7610:	df 4f       	sbci	r29, 0xFF	; 255
    7612:	98 81       	ld	r25, Y
    7614:	c1 59       	subi	r28, 0x91	; 145
    7616:	d0 40       	sbci	r29, 0x00	; 0
    7618:	89 2b       	or	r24, r25
    761a:	c1 57       	subi	r28, 0x71	; 113
    761c:	df 4f       	sbci	r29, 0xFF	; 255
    761e:	88 83       	st	Y, r24
    7620:	cf 58       	subi	r28, 0x8F	; 143
    7622:	d0 40       	sbci	r29, 0x00	; 0
    7624:	c0 57       	subi	r28, 0x70	; 112
    7626:	df 4f       	sbci	r29, 0xFF	; 255
    7628:	28 81       	ld	r18, Y
    762a:	c0 59       	subi	r28, 0x90	; 144
    762c:	d0 40       	sbci	r29, 0x00	; 0
    762e:	ee 96       	adiw	r28, 0x3e	; 62
    7630:	2f af       	std	Y+63, r18	; 0x3f
    7632:	ee 97       	sbiw	r28, 0x3e	; 62
    7634:	3e 8d       	ldd	r19, Y+30	; 0x1e
    7636:	e7 96       	adiw	r28, 0x37	; 55
    7638:	8f ad       	ldd	r24, Y+63	; 0x3f
    763a:	e7 97       	sbiw	r28, 0x37	; 55
    763c:	38 1b       	sub	r19, r24
    763e:	ef 96       	adiw	r28, 0x3f	; 63
    7640:	3f af       	std	Y+63, r19	; 0x3f
    7642:	ef 97       	sbiw	r28, 0x3f	; 63
    7644:	ef 96       	adiw	r28, 0x3f	; 63
    7646:	8f ad       	ldd	r24, Y+63	; 0x3f
    7648:	ef 97       	sbiw	r28, 0x3f	; 63
    764a:	c1 57       	subi	r28, 0x71	; 113
    764c:	df 4f       	sbci	r29, 0xFF	; 255
    764e:	98 81       	ld	r25, Y
    7650:	cf 58       	subi	r28, 0x8F	; 143
    7652:	d0 40       	sbci	r29, 0x00	; 0
    7654:	89 1b       	sub	r24, r25
    7656:	ef 96       	adiw	r28, 0x3f	; 63
    7658:	8f af       	std	Y+63, r24	; 0x3f
    765a:	ef 97       	sbiw	r28, 0x3f	; 63
    765c:	e8 96       	adiw	r28, 0x38	; 56
    765e:	2f ad       	ldd	r18, Y+63	; 0x3f
    7660:	e8 97       	sbiw	r28, 0x38	; 56
    7662:	2f 83       	std	Y+7, r18	; 0x07
    7664:	e9 96       	adiw	r28, 0x39	; 57
    7666:	3f ad       	ldd	r19, Y+63	; 0x3f
    7668:	e9 97       	sbiw	r28, 0x39	; 57
    766a:	38 87       	std	Y+8, r19	; 0x08
    766c:	ea 96       	adiw	r28, 0x3a	; 58
    766e:	8f ad       	ldd	r24, Y+63	; 0x3f
    7670:	ea 97       	sbiw	r28, 0x3a	; 58
    7672:	89 87       	std	Y+9, r24	; 0x09
    7674:	eb 96       	adiw	r28, 0x3b	; 59
    7676:	9f ad       	ldd	r25, Y+63	; 0x3f
    7678:	eb 97       	sbiw	r28, 0x3b	; 59
    767a:	9a 87       	std	Y+10, r25	; 0x0a
    767c:	ec 96       	adiw	r28, 0x3c	; 60
    767e:	2f ad       	ldd	r18, Y+63	; 0x3f
    7680:	ec 97       	sbiw	r28, 0x3c	; 60
    7682:	2b 87       	std	Y+11, r18	; 0x0b
    7684:	ed 96       	adiw	r28, 0x3d	; 61
    7686:	3f ad       	ldd	r19, Y+63	; 0x3f
    7688:	ed 97       	sbiw	r28, 0x3d	; 61
    768a:	3c 87       	std	Y+12, r19	; 0x0c
    768c:	ee 96       	adiw	r28, 0x3e	; 62
    768e:	8f ad       	ldd	r24, Y+63	; 0x3f
    7690:	ee 97       	sbiw	r28, 0x3e	; 62
    7692:	8d 87       	std	Y+13, r24	; 0x0d
    7694:	ef 96       	adiw	r28, 0x3f	; 63
    7696:	9f ad       	ldd	r25, Y+63	; 0x3f
    7698:	ef 97       	sbiw	r28, 0x3f	; 63
    769a:	9e 87       	std	Y+14, r25	; 0x0e
//		Copy_f64Number -= Local_s64CopyNumber;
//		Local_s64CopyNumber = ((s64)Copy_f64Number * 1000);
		u8 Local_u8FloatDigits = 4;
    769c:	84 e0       	ldi	r24, 0x04	; 4
    769e:	8d 83       	std	Y+5, r24	; 0x05
		s32 Local_u8Temp = 0;
    76a0:	19 82       	std	Y+1, r1	; 0x01
    76a2:	1a 82       	std	Y+2, r1	; 0x02
    76a4:	1b 82       	std	Y+3, r1	; 0x03
    76a6:	1c 82       	std	Y+4, r1	; 0x04
    76a8:	74 c0       	rjmp	.+232    	; 0x7792 <LCD_voidWriteNumber+0x1000>
		while (--Local_u8FloatDigits) {
			Local_u8Temp = (Local_u8Temp * 10) + (Local_s64CopyNumber % 10);
    76aa:	89 81       	ldd	r24, Y+1	; 0x01
    76ac:	9a 81       	ldd	r25, Y+2	; 0x02
    76ae:	ab 81       	ldd	r26, Y+3	; 0x03
    76b0:	bc 81       	ldd	r27, Y+4	; 0x04
    76b2:	2a e0       	ldi	r18, 0x0A	; 10
    76b4:	30 e0       	ldi	r19, 0x00	; 0
    76b6:	40 e0       	ldi	r20, 0x00	; 0
    76b8:	50 e0       	ldi	r21, 0x00	; 0
    76ba:	bc 01       	movw	r22, r24
    76bc:	cd 01       	movw	r24, r26
    76be:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    76c2:	dc 01       	movw	r26, r24
    76c4:	cb 01       	movw	r24, r22
    76c6:	3c 01       	movw	r6, r24
    76c8:	4d 01       	movw	r8, r26
    76ca:	af 80       	ldd	r10, Y+7	; 0x07
    76cc:	b8 84       	ldd	r11, Y+8	; 0x08
    76ce:	c9 84       	ldd	r12, Y+9	; 0x09
    76d0:	da 84       	ldd	r13, Y+10	; 0x0a
    76d2:	eb 84       	ldd	r14, Y+11	; 0x0b
    76d4:	fc 84       	ldd	r15, Y+12	; 0x0c
    76d6:	0d 85       	ldd	r16, Y+13	; 0x0d
    76d8:	1e 85       	ldd	r17, Y+14	; 0x0e
    76da:	2a 2d       	mov	r18, r10
    76dc:	3b 2d       	mov	r19, r11
    76de:	4c 2d       	mov	r20, r12
    76e0:	5d 2d       	mov	r21, r13
    76e2:	6e 2d       	mov	r22, r14
    76e4:	7f 2d       	mov	r23, r15
    76e6:	80 2f       	mov	r24, r16
    76e8:	91 2f       	mov	r25, r17
    76ea:	0f 2e       	mov	r0, r31
    76ec:	fa e0       	ldi	r31, 0x0A	; 10
    76ee:	af 2e       	mov	r10, r31
    76f0:	f0 2d       	mov	r31, r0
    76f2:	bb 24       	eor	r11, r11
    76f4:	cc 24       	eor	r12, r12
    76f6:	dd 24       	eor	r13, r13
    76f8:	ee 24       	eor	r14, r14
    76fa:	ff 24       	eor	r15, r15
    76fc:	00 e0       	ldi	r16, 0x00	; 0
    76fe:	10 e0       	ldi	r17, 0x00	; 0
    7700:	0e 94 33 0b 	call	0x1666	; 0x1666 <__moddi3>
    7704:	a2 2e       	mov	r10, r18
    7706:	b3 2e       	mov	r11, r19
    7708:	c4 2e       	mov	r12, r20
    770a:	d5 2e       	mov	r13, r21
    770c:	e6 2e       	mov	r14, r22
    770e:	f7 2e       	mov	r15, r23
    7710:	08 2f       	mov	r16, r24
    7712:	19 2f       	mov	r17, r25
    7714:	2a 2d       	mov	r18, r10
    7716:	3b 2d       	mov	r19, r11
    7718:	4c 2d       	mov	r20, r12
    771a:	5d 2d       	mov	r21, r13
    771c:	6e 2d       	mov	r22, r14
    771e:	7f 2d       	mov	r23, r15
    7720:	80 2f       	mov	r24, r16
    7722:	91 2f       	mov	r25, r17
    7724:	da 01       	movw	r26, r20
    7726:	c9 01       	movw	r24, r18
    7728:	86 0d       	add	r24, r6
    772a:	97 1d       	adc	r25, r7
    772c:	a8 1d       	adc	r26, r8
    772e:	b9 1d       	adc	r27, r9
    7730:	89 83       	std	Y+1, r24	; 0x01
    7732:	9a 83       	std	Y+2, r25	; 0x02
    7734:	ab 83       	std	Y+3, r26	; 0x03
    7736:	bc 83       	std	Y+4, r27	; 0x04
			Local_s64CopyNumber /= 10;
    7738:	af 80       	ldd	r10, Y+7	; 0x07
    773a:	b8 84       	ldd	r11, Y+8	; 0x08
    773c:	c9 84       	ldd	r12, Y+9	; 0x09
    773e:	da 84       	ldd	r13, Y+10	; 0x0a
    7740:	eb 84       	ldd	r14, Y+11	; 0x0b
    7742:	fc 84       	ldd	r15, Y+12	; 0x0c
    7744:	0d 85       	ldd	r16, Y+13	; 0x0d
    7746:	1e 85       	ldd	r17, Y+14	; 0x0e
    7748:	2a 2d       	mov	r18, r10
    774a:	3b 2d       	mov	r19, r11
    774c:	4c 2d       	mov	r20, r12
    774e:	5d 2d       	mov	r21, r13
    7750:	6e 2d       	mov	r22, r14
    7752:	7f 2d       	mov	r23, r15
    7754:	80 2f       	mov	r24, r16
    7756:	91 2f       	mov	r25, r17
    7758:	0f 2e       	mov	r0, r31
    775a:	fa e0       	ldi	r31, 0x0A	; 10
    775c:	af 2e       	mov	r10, r31
    775e:	f0 2d       	mov	r31, r0
    7760:	bb 24       	eor	r11, r11
    7762:	cc 24       	eor	r12, r12
    7764:	dd 24       	eor	r13, r13
    7766:	ee 24       	eor	r14, r14
    7768:	ff 24       	eor	r15, r15
    776a:	00 e0       	ldi	r16, 0x00	; 0
    776c:	10 e0       	ldi	r17, 0x00	; 0
    776e:	0e 94 0b 03 	call	0x616	; 0x616 <__divdi3>
    7772:	a2 2e       	mov	r10, r18
    7774:	b3 2e       	mov	r11, r19
    7776:	c4 2e       	mov	r12, r20
    7778:	d5 2e       	mov	r13, r21
    777a:	e6 2e       	mov	r14, r22
    777c:	f7 2e       	mov	r15, r23
    777e:	08 2f       	mov	r16, r24
    7780:	19 2f       	mov	r17, r25
    7782:	af 82       	std	Y+7, r10	; 0x07
    7784:	b8 86       	std	Y+8, r11	; 0x08
    7786:	c9 86       	std	Y+9, r12	; 0x09
    7788:	da 86       	std	Y+10, r13	; 0x0a
    778a:	eb 86       	std	Y+11, r14	; 0x0b
    778c:	fc 86       	std	Y+12, r15	; 0x0c
    778e:	0d 87       	std	Y+13, r16	; 0x0d
    7790:	1e 87       	std	Y+14, r17	; 0x0e
		Local_s64CopyNumber = (s64) Copy_f64Number - Local_s64CopyNumber;
//		Copy_f64Number -= Local_s64CopyNumber;
//		Local_s64CopyNumber = ((s64)Copy_f64Number * 1000);
		u8 Local_u8FloatDigits = 4;
		s32 Local_u8Temp = 0;
		while (--Local_u8FloatDigits) {
    7792:	8d 81       	ldd	r24, Y+5	; 0x05
    7794:	81 50       	subi	r24, 0x01	; 1
    7796:	8d 83       	std	Y+5, r24	; 0x05
    7798:	8d 81       	ldd	r24, Y+5	; 0x05
    779a:	88 23       	and	r24, r24
    779c:	09 f0       	breq	.+2      	; 0x77a0 <LCD_voidWriteNumber+0x100e>
    779e:	85 cf       	rjmp	.-246    	; 0x76aa <LCD_voidWriteNumber+0xf18>
			Local_u8Temp = (Local_u8Temp * 10) + (Local_s64CopyNumber % 10);
			Local_s64CopyNumber /= 10;
		}
		Local_u8FloatDigits = 4;
    77a0:	84 e0       	ldi	r24, 0x04	; 4
    77a2:	8d 83       	std	Y+5, r24	; 0x05
    77a4:	23 c0       	rjmp	.+70     	; 0x77ec <LCD_voidWriteNumber+0x105a>
		while (--Local_u8FloatDigits) {
			LCD_voidSendData((Local_u8Temp % 10) + '0');
    77a6:	89 81       	ldd	r24, Y+1	; 0x01
    77a8:	9a 81       	ldd	r25, Y+2	; 0x02
    77aa:	ab 81       	ldd	r26, Y+3	; 0x03
    77ac:	bc 81       	ldd	r27, Y+4	; 0x04
    77ae:	2a e0       	ldi	r18, 0x0A	; 10
    77b0:	30 e0       	ldi	r19, 0x00	; 0
    77b2:	40 e0       	ldi	r20, 0x00	; 0
    77b4:	50 e0       	ldi	r21, 0x00	; 0
    77b6:	bc 01       	movw	r22, r24
    77b8:	cd 01       	movw	r24, r26
    77ba:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divmodsi4>
    77be:	dc 01       	movw	r26, r24
    77c0:	cb 01       	movw	r24, r22
    77c2:	80 5d       	subi	r24, 0xD0	; 208
    77c4:	0e 94 91 30 	call	0x6122	; 0x6122 <LCD_voidSendData>
			Local_u8Temp /= 10;
    77c8:	89 81       	ldd	r24, Y+1	; 0x01
    77ca:	9a 81       	ldd	r25, Y+2	; 0x02
    77cc:	ab 81       	ldd	r26, Y+3	; 0x03
    77ce:	bc 81       	ldd	r27, Y+4	; 0x04
    77d0:	2a e0       	ldi	r18, 0x0A	; 10
    77d2:	30 e0       	ldi	r19, 0x00	; 0
    77d4:	40 e0       	ldi	r20, 0x00	; 0
    77d6:	50 e0       	ldi	r21, 0x00	; 0
    77d8:	bc 01       	movw	r22, r24
    77da:	cd 01       	movw	r24, r26
    77dc:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divmodsi4>
    77e0:	da 01       	movw	r26, r20
    77e2:	c9 01       	movw	r24, r18
    77e4:	89 83       	std	Y+1, r24	; 0x01
    77e6:	9a 83       	std	Y+2, r25	; 0x02
    77e8:	ab 83       	std	Y+3, r26	; 0x03
    77ea:	bc 83       	std	Y+4, r27	; 0x04
		while (--Local_u8FloatDigits) {
			Local_u8Temp = (Local_u8Temp * 10) + (Local_s64CopyNumber % 10);
			Local_s64CopyNumber /= 10;
		}
		Local_u8FloatDigits = 4;
		while (--Local_u8FloatDigits) {
    77ec:	8d 81       	ldd	r24, Y+5	; 0x05
    77ee:	81 50       	subi	r24, 0x01	; 1
    77f0:	8d 83       	std	Y+5, r24	; 0x05
    77f2:	8d 81       	ldd	r24, Y+5	; 0x05
    77f4:	88 23       	and	r24, r24
    77f6:	b9 f6       	brne	.-82     	; 0x77a6 <LCD_voidWriteNumber+0x1014>
    77f8:	2d 89       	ldd	r18, Y+21	; 0x15
    77fa:	3e 89       	ldd	r19, Y+22	; 0x16
    77fc:	0f b6       	in	r0, 0x3f	; 63
    77fe:	f8 94       	cli
    7800:	3e bf       	out	0x3e, r19	; 62
    7802:	0f be       	out	0x3f, r0	; 63
    7804:	2d bf       	out	0x3d, r18	; 61
			LCD_voidSendData((Local_u8Temp % 10) + '0');
			Local_u8Temp /= 10;
		}
//		LCD_voidSendString(Local_u8arrStringData);
	}
}
    7806:	ce 56       	subi	r28, 0x6E	; 110
    7808:	df 4f       	sbci	r29, 0xFF	; 255
    780a:	88 81       	ld	r24, Y
    780c:	99 81       	ldd	r25, Y+1	; 0x01
    780e:	c2 59       	subi	r28, 0x92	; 146
    7810:	d0 40       	sbci	r29, 0x00	; 0
    7812:	0f b6       	in	r0, 0x3f	; 63
    7814:	f8 94       	cli
    7816:	9e bf       	out	0x3e, r25	; 62
    7818:	0f be       	out	0x3f, r0	; 63
    781a:	8d bf       	out	0x3d, r24	; 61
    781c:	cd 56       	subi	r28, 0x6D	; 109
    781e:	df 4f       	sbci	r29, 0xFF	; 255
    7820:	0f b6       	in	r0, 0x3f	; 63
    7822:	f8 94       	cli
    7824:	de bf       	out	0x3e, r29	; 62
    7826:	0f be       	out	0x3f, r0	; 63
    7828:	cd bf       	out	0x3d, r28	; 61
    782a:	cf 91       	pop	r28
    782c:	df 91       	pop	r29
    782e:	1f 91       	pop	r17
    7830:	0f 91       	pop	r16
    7832:	ff 90       	pop	r15
    7834:	ef 90       	pop	r14
    7836:	df 90       	pop	r13
    7838:	cf 90       	pop	r12
    783a:	bf 90       	pop	r11
    783c:	af 90       	pop	r10
    783e:	9f 90       	pop	r9
    7840:	8f 90       	pop	r8
    7842:	7f 90       	pop	r7
    7844:	6f 90       	pop	r6
    7846:	08 95       	ret

00007848 <KEYPAD_voidInit>:
        {'1', '2', '3', '-'},
        {'%', '0', '=', '+'},
};


void KEYPAD_voidInit() {
    7848:	df 93       	push	r29
    784a:	cf 93       	push	r28
    784c:	cd b7       	in	r28, 0x3d	; 61
    784e:	de b7       	in	r29, 0x3e	; 62
    // setting rows to be output
    DIO_u8SetPinDirection(KEYPAD_PORT, KEYPAD_R0, DIO_u8PIN_OUTPUT);
    7850:	82 e0       	ldi	r24, 0x02	; 2
    7852:	60 e0       	ldi	r22, 0x00	; 0
    7854:	41 e0       	ldi	r20, 0x01	; 1
    7856:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KEYPAD_PORT, KEYPAD_R1, DIO_u8PIN_OUTPUT);
    785a:	82 e0       	ldi	r24, 0x02	; 2
    785c:	61 e0       	ldi	r22, 0x01	; 1
    785e:	41 e0       	ldi	r20, 0x01	; 1
    7860:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KEYPAD_PORT, KEYPAD_R2, DIO_u8PIN_OUTPUT);
    7864:	82 e0       	ldi	r24, 0x02	; 2
    7866:	62 e0       	ldi	r22, 0x02	; 2
    7868:	41 e0       	ldi	r20, 0x01	; 1
    786a:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KEYPAD_PORT, KEYPAD_R3, DIO_u8PIN_OUTPUT);
    786e:	82 e0       	ldi	r24, 0x02	; 2
    7870:	63 e0       	ldi	r22, 0x03	; 3
    7872:	41 e0       	ldi	r20, 0x01	; 1
    7874:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <DIO_u8SetPinDirection>
    // setting cols to be input
    DIO_u8SetPinDirection(KEYPAD_PORT, KEYPAD_C0, DIO_u8PIN_INPUT);
    7878:	82 e0       	ldi	r24, 0x02	; 2
    787a:	64 e0       	ldi	r22, 0x04	; 4
    787c:	40 e0       	ldi	r20, 0x00	; 0
    787e:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KEYPAD_PORT, KEYPAD_C1, DIO_u8PIN_INPUT);
    7882:	82 e0       	ldi	r24, 0x02	; 2
    7884:	65 e0       	ldi	r22, 0x05	; 5
    7886:	40 e0       	ldi	r20, 0x00	; 0
    7888:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KEYPAD_PORT, KEYPAD_C2, DIO_u8PIN_INPUT);
    788c:	82 e0       	ldi	r24, 0x02	; 2
    788e:	66 e0       	ldi	r22, 0x06	; 6
    7890:	40 e0       	ldi	r20, 0x00	; 0
    7892:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KEYPAD_PORT, KEYPAD_C3, DIO_u8PIN_INPUT);
    7896:	82 e0       	ldi	r24, 0x02	; 2
    7898:	67 e0       	ldi	r22, 0x07	; 7
    789a:	40 e0       	ldi	r20, 0x00	; 0
    789c:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <DIO_u8SetPinDirection>
    // setting rows and cols value
    DIO_u8SetPortValue(KEYPAD_PORT, DIO_u8PORT_HIGH);
    78a0:	82 e0       	ldi	r24, 0x02	; 2
    78a2:	6f ef       	ldi	r22, 0xFF	; 255
    78a4:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <DIO_u8SetPortValue>
}
    78a8:	cf 91       	pop	r28
    78aa:	df 91       	pop	r29
    78ac:	08 95       	ret

000078ae <KEYPAD_u8GetSwitchValue>:

u8 KEYPAD_u8GetSwitchValue() {
    78ae:	df 93       	push	r29
    78b0:	cf 93       	push	r28
    78b2:	cd b7       	in	r28, 0x3d	; 61
    78b4:	de b7       	in	r29, 0x3e	; 62
    78b6:	62 97       	sbiw	r28, 0x12	; 18
    78b8:	0f b6       	in	r0, 0x3f	; 63
    78ba:	f8 94       	cli
    78bc:	de bf       	out	0x3e, r29	; 62
    78be:	0f be       	out	0x3f, r0	; 63
    78c0:	cd bf       	out	0x3d, r28	; 61

    u8 Local_u8SwitchValue = KEYPAD_NOT_PRESSED_VALUE;
    78c2:	8f ef       	ldi	r24, 0xFF	; 255
    78c4:	89 8b       	std	Y+17, r24	; 0x11
    u8 Local_u8SwitchState;
    // Iterating over rows
    for (u8 Local_u8CurrentRow = KEYPAD_ROWS_INIT;
    78c6:	18 8a       	std	Y+16, r1	; 0x10
    78c8:	c5 c0       	rjmp	.+394    	; 0x7a54 <KEYPAD_u8GetSwitchValue+0x1a6>
         Local_u8CurrentRow <= KEYPAD_ROWS_END; ++Local_u8CurrentRow) {

        // Applying the pattern
        DIO_u8SetPinValue(KEYPAD_PORT, Local_u8CurrentRow, DIO_u8PIN_LOW);
    78ca:	82 e0       	ldi	r24, 0x02	; 2
    78cc:	68 89       	ldd	r22, Y+16	; 0x10
    78ce:	40 e0       	ldi	r20, 0x00	; 0
    78d0:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>

        // Iterating over cols
        for (u8 Local_u8CurrentCol = KEYPAD_COLS_INIT; Local_u8CurrentCol <= KEYPAD_COLS_END; ++Local_u8CurrentCol) {
    78d4:	84 e0       	ldi	r24, 0x04	; 4
    78d6:	8f 87       	std	Y+15, r24	; 0x0f
    78d8:	ae c0       	rjmp	.+348    	; 0x7a36 <KEYPAD_u8GetSwitchValue+0x188>
            // Check if the key is pressed
            DIO_u8GetPinValue(KEYPAD_PORT, Local_u8CurrentCol, &Local_u8SwitchState);
    78da:	9e 01       	movw	r18, r28
    78dc:	2e 5e       	subi	r18, 0xEE	; 238
    78de:	3f 4f       	sbci	r19, 0xFF	; 255
    78e0:	82 e0       	ldi	r24, 0x02	; 2
    78e2:	6f 85       	ldd	r22, Y+15	; 0x0f
    78e4:	a9 01       	movw	r20, r18
    78e6:	0e 94 46 28 	call	0x508c	; 0x508c <DIO_u8GetPinValue>

            // Handling the bouncing
            if (Local_u8SwitchState == KEYPAD_SWITCH_ON) {
    78ea:	8a 89       	ldd	r24, Y+18	; 0x12
    78ec:	88 23       	and	r24, r24
    78ee:	09 f0       	breq	.+2      	; 0x78f2 <KEYPAD_u8GetSwitchValue+0x44>
    78f0:	9f c0       	rjmp	.+318    	; 0x7a30 <KEYPAD_u8GetSwitchValue+0x182>
    78f2:	80 e0       	ldi	r24, 0x00	; 0
    78f4:	90 e0       	ldi	r25, 0x00	; 0
    78f6:	a0 ea       	ldi	r26, 0xA0	; 160
    78f8:	b1 e4       	ldi	r27, 0x41	; 65
    78fa:	8b 87       	std	Y+11, r24	; 0x0b
    78fc:	9c 87       	std	Y+12, r25	; 0x0c
    78fe:	ad 87       	std	Y+13, r26	; 0x0d
    7900:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7902:	6b 85       	ldd	r22, Y+11	; 0x0b
    7904:	7c 85       	ldd	r23, Y+12	; 0x0c
    7906:	8d 85       	ldd	r24, Y+13	; 0x0d
    7908:	9e 85       	ldd	r25, Y+14	; 0x0e
    790a:	20 e0       	ldi	r18, 0x00	; 0
    790c:	30 e0       	ldi	r19, 0x00	; 0
    790e:	4a ef       	ldi	r20, 0xFA	; 250
    7910:	54 e4       	ldi	r21, 0x44	; 68
    7912:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    7916:	dc 01       	movw	r26, r24
    7918:	cb 01       	movw	r24, r22
    791a:	8f 83       	std	Y+7, r24	; 0x07
    791c:	98 87       	std	Y+8, r25	; 0x08
    791e:	a9 87       	std	Y+9, r26	; 0x09
    7920:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7922:	6f 81       	ldd	r22, Y+7	; 0x07
    7924:	78 85       	ldd	r23, Y+8	; 0x08
    7926:	89 85       	ldd	r24, Y+9	; 0x09
    7928:	9a 85       	ldd	r25, Y+10	; 0x0a
    792a:	20 e0       	ldi	r18, 0x00	; 0
    792c:	30 e0       	ldi	r19, 0x00	; 0
    792e:	40 e8       	ldi	r20, 0x80	; 128
    7930:	5f e3       	ldi	r21, 0x3F	; 63
    7932:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    7936:	88 23       	and	r24, r24
    7938:	2c f4       	brge	.+10     	; 0x7944 <KEYPAD_u8GetSwitchValue+0x96>
		__ticks = 1;
    793a:	81 e0       	ldi	r24, 0x01	; 1
    793c:	90 e0       	ldi	r25, 0x00	; 0
    793e:	9e 83       	std	Y+6, r25	; 0x06
    7940:	8d 83       	std	Y+5, r24	; 0x05
    7942:	3f c0       	rjmp	.+126    	; 0x79c2 <KEYPAD_u8GetSwitchValue+0x114>
	else if (__tmp > 65535)
    7944:	6f 81       	ldd	r22, Y+7	; 0x07
    7946:	78 85       	ldd	r23, Y+8	; 0x08
    7948:	89 85       	ldd	r24, Y+9	; 0x09
    794a:	9a 85       	ldd	r25, Y+10	; 0x0a
    794c:	20 e0       	ldi	r18, 0x00	; 0
    794e:	3f ef       	ldi	r19, 0xFF	; 255
    7950:	4f e7       	ldi	r20, 0x7F	; 127
    7952:	57 e4       	ldi	r21, 0x47	; 71
    7954:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    7958:	18 16       	cp	r1, r24
    795a:	4c f5       	brge	.+82     	; 0x79ae <KEYPAD_u8GetSwitchValue+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    795c:	6b 85       	ldd	r22, Y+11	; 0x0b
    795e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7960:	8d 85       	ldd	r24, Y+13	; 0x0d
    7962:	9e 85       	ldd	r25, Y+14	; 0x0e
    7964:	20 e0       	ldi	r18, 0x00	; 0
    7966:	30 e0       	ldi	r19, 0x00	; 0
    7968:	40 e2       	ldi	r20, 0x20	; 32
    796a:	51 e4       	ldi	r21, 0x41	; 65
    796c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    7970:	dc 01       	movw	r26, r24
    7972:	cb 01       	movw	r24, r22
    7974:	bc 01       	movw	r22, r24
    7976:	cd 01       	movw	r24, r26
    7978:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    797c:	dc 01       	movw	r26, r24
    797e:	cb 01       	movw	r24, r22
    7980:	9e 83       	std	Y+6, r25	; 0x06
    7982:	8d 83       	std	Y+5, r24	; 0x05
    7984:	0f c0       	rjmp	.+30     	; 0x79a4 <KEYPAD_u8GetSwitchValue+0xf6>
    7986:	88 ec       	ldi	r24, 0xC8	; 200
    7988:	90 e0       	ldi	r25, 0x00	; 0
    798a:	9c 83       	std	Y+4, r25	; 0x04
    798c:	8b 83       	std	Y+3, r24	; 0x03
    798e:	8b 81       	ldd	r24, Y+3	; 0x03
    7990:	9c 81       	ldd	r25, Y+4	; 0x04
    7992:	01 97       	sbiw	r24, 0x01	; 1
    7994:	f1 f7       	brne	.-4      	; 0x7992 <KEYPAD_u8GetSwitchValue+0xe4>
    7996:	9c 83       	std	Y+4, r25	; 0x04
    7998:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    799a:	8d 81       	ldd	r24, Y+5	; 0x05
    799c:	9e 81       	ldd	r25, Y+6	; 0x06
    799e:	01 97       	sbiw	r24, 0x01	; 1
    79a0:	9e 83       	std	Y+6, r25	; 0x06
    79a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    79a4:	8d 81       	ldd	r24, Y+5	; 0x05
    79a6:	9e 81       	ldd	r25, Y+6	; 0x06
    79a8:	00 97       	sbiw	r24, 0x00	; 0
    79aa:	69 f7       	brne	.-38     	; 0x7986 <KEYPAD_u8GetSwitchValue+0xd8>
    79ac:	14 c0       	rjmp	.+40     	; 0x79d6 <KEYPAD_u8GetSwitchValue+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    79ae:	6f 81       	ldd	r22, Y+7	; 0x07
    79b0:	78 85       	ldd	r23, Y+8	; 0x08
    79b2:	89 85       	ldd	r24, Y+9	; 0x09
    79b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    79b6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    79ba:	dc 01       	movw	r26, r24
    79bc:	cb 01       	movw	r24, r22
    79be:	9e 83       	std	Y+6, r25	; 0x06
    79c0:	8d 83       	std	Y+5, r24	; 0x05
    79c2:	8d 81       	ldd	r24, Y+5	; 0x05
    79c4:	9e 81       	ldd	r25, Y+6	; 0x06
    79c6:	9a 83       	std	Y+2, r25	; 0x02
    79c8:	89 83       	std	Y+1, r24	; 0x01
    79ca:	89 81       	ldd	r24, Y+1	; 0x01
    79cc:	9a 81       	ldd	r25, Y+2	; 0x02
    79ce:	01 97       	sbiw	r24, 0x01	; 1
    79d0:	f1 f7       	brne	.-4      	; 0x79ce <KEYPAD_u8GetSwitchValue+0x120>
    79d2:	9a 83       	std	Y+2, r25	; 0x02
    79d4:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(20);
                DIO_u8GetPinValue(KEYPAD_PORT, Local_u8CurrentCol, &Local_u8SwitchState);
    79d6:	9e 01       	movw	r18, r28
    79d8:	2e 5e       	subi	r18, 0xEE	; 238
    79da:	3f 4f       	sbci	r19, 0xFF	; 255
    79dc:	82 e0       	ldi	r24, 0x02	; 2
    79de:	6f 85       	ldd	r22, Y+15	; 0x0f
    79e0:	a9 01       	movw	r20, r18
    79e2:	0e 94 46 28 	call	0x508c	; 0x508c <DIO_u8GetPinValue>
                if (Local_u8SwitchState == KEYPAD_SWITCH_ON) {
    79e6:	8a 89       	ldd	r24, Y+18	; 0x12
    79e8:	88 23       	and	r24, r24
    79ea:	11 f5       	brne	.+68     	; 0x7a30 <KEYPAD_u8GetSwitchValue+0x182>
                    Local_u8SwitchValue = KEYPAD_u8ArrValues[Local_u8CurrentRow - KEYPAD_ROWS_INIT][Local_u8CurrentCol -
    79ec:	88 89       	ldd	r24, Y+16	; 0x10
    79ee:	48 2f       	mov	r20, r24
    79f0:	50 e0       	ldi	r21, 0x00	; 0
    79f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    79f4:	88 2f       	mov	r24, r24
    79f6:	90 e0       	ldi	r25, 0x00	; 0
    79f8:	9c 01       	movw	r18, r24
    79fa:	24 50       	subi	r18, 0x04	; 4
    79fc:	30 40       	sbci	r19, 0x00	; 0
    79fe:	ca 01       	movw	r24, r20
    7a00:	88 0f       	add	r24, r24
    7a02:	99 1f       	adc	r25, r25
    7a04:	88 0f       	add	r24, r24
    7a06:	99 1f       	adc	r25, r25
    7a08:	82 0f       	add	r24, r18
    7a0a:	93 1f       	adc	r25, r19
    7a0c:	fc 01       	movw	r30, r24
    7a0e:	eb 58       	subi	r30, 0x8B	; 139
    7a10:	fe 4f       	sbci	r31, 0xFE	; 254
    7a12:	80 81       	ld	r24, Z
    7a14:	89 8b       	std	Y+17, r24	; 0x11
    7a16:	08 c0       	rjmp	.+16     	; 0x7a28 <KEYPAD_u8GetSwitchValue+0x17a>
                                                                                                    KEYPAD_COLS_INIT];
                    while (Local_u8SwitchState == KEYPAD_SWITCH_ON)
                        DIO_u8GetPinValue(KEYPAD_PORT, Local_u8CurrentCol, &Local_u8SwitchState);
    7a18:	9e 01       	movw	r18, r28
    7a1a:	2e 5e       	subi	r18, 0xEE	; 238
    7a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a1e:	82 e0       	ldi	r24, 0x02	; 2
    7a20:	6f 85       	ldd	r22, Y+15	; 0x0f
    7a22:	a9 01       	movw	r20, r18
    7a24:	0e 94 46 28 	call	0x508c	; 0x508c <DIO_u8GetPinValue>
                _delay_ms(20);
                DIO_u8GetPinValue(KEYPAD_PORT, Local_u8CurrentCol, &Local_u8SwitchState);
                if (Local_u8SwitchState == KEYPAD_SWITCH_ON) {
                    Local_u8SwitchValue = KEYPAD_u8ArrValues[Local_u8CurrentRow - KEYPAD_ROWS_INIT][Local_u8CurrentCol -
                                                                                                    KEYPAD_COLS_INIT];
                    while (Local_u8SwitchState == KEYPAD_SWITCH_ON)
    7a28:	8a 89       	ldd	r24, Y+18	; 0x12
    7a2a:	88 23       	and	r24, r24
    7a2c:	a9 f3       	breq	.-22     	; 0x7a18 <KEYPAD_u8GetSwitchValue+0x16a>
    7a2e:	07 c0       	rjmp	.+14     	; 0x7a3e <KEYPAD_u8GetSwitchValue+0x190>

        // Applying the pattern
        DIO_u8SetPinValue(KEYPAD_PORT, Local_u8CurrentRow, DIO_u8PIN_LOW);

        // Iterating over cols
        for (u8 Local_u8CurrentCol = KEYPAD_COLS_INIT; Local_u8CurrentCol <= KEYPAD_COLS_END; ++Local_u8CurrentCol) {
    7a30:	8f 85       	ldd	r24, Y+15	; 0x0f
    7a32:	8f 5f       	subi	r24, 0xFF	; 255
    7a34:	8f 87       	std	Y+15, r24	; 0x0f
    7a36:	8f 85       	ldd	r24, Y+15	; 0x0f
    7a38:	88 30       	cpi	r24, 0x08	; 8
    7a3a:	08 f4       	brcc	.+2      	; 0x7a3e <KEYPAD_u8GetSwitchValue+0x190>
    7a3c:	4e cf       	rjmp	.-356    	; 0x78da <KEYPAD_u8GetSwitchValue+0x2c>
                    break;
                }
            }
        }

        DIO_u8SetPinValue(KEYPAD_PORT, Local_u8CurrentRow, DIO_u8PIN_HIGH);
    7a3e:	82 e0       	ldi	r24, 0x02	; 2
    7a40:	68 89       	ldd	r22, Y+16	; 0x10
    7a42:	41 e0       	ldi	r20, 0x01	; 1
    7a44:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
        if (Local_u8SwitchValue != KEYPAD_NOT_PRESSED_VALUE)
    7a48:	89 89       	ldd	r24, Y+17	; 0x11
    7a4a:	8f 3f       	cpi	r24, 0xFF	; 255
    7a4c:	39 f4       	brne	.+14     	; 0x7a5c <KEYPAD_u8GetSwitchValue+0x1ae>

    u8 Local_u8SwitchValue = KEYPAD_NOT_PRESSED_VALUE;
    u8 Local_u8SwitchState;
    // Iterating over rows
    for (u8 Local_u8CurrentRow = KEYPAD_ROWS_INIT;
         Local_u8CurrentRow <= KEYPAD_ROWS_END; ++Local_u8CurrentRow) {
    7a4e:	88 89       	ldd	r24, Y+16	; 0x10
    7a50:	8f 5f       	subi	r24, 0xFF	; 255
    7a52:	88 8b       	std	Y+16, r24	; 0x10
    7a54:	88 89       	ldd	r24, Y+16	; 0x10
    7a56:	84 30       	cpi	r24, 0x04	; 4
    7a58:	08 f4       	brcc	.+2      	; 0x7a5c <KEYPAD_u8GetSwitchValue+0x1ae>
    7a5a:	37 cf       	rjmp	.-402    	; 0x78ca <KEYPAD_u8GetSwitchValue+0x1c>
        DIO_u8SetPinValue(KEYPAD_PORT, Local_u8CurrentRow, DIO_u8PIN_HIGH);
        if (Local_u8SwitchValue != KEYPAD_NOT_PRESSED_VALUE)
            break;
    }

    return Local_u8SwitchValue;
    7a5c:	89 89       	ldd	r24, Y+17	; 0x11
}
    7a5e:	62 96       	adiw	r28, 0x12	; 18
    7a60:	0f b6       	in	r0, 0x3f	; 63
    7a62:	f8 94       	cli
    7a64:	de bf       	out	0x3e, r29	; 62
    7a66:	0f be       	out	0x3f, r0	; 63
    7a68:	cd bf       	out	0x3d, r28	; 61
    7a6a:	cf 91       	pop	r28
    7a6c:	df 91       	pop	r29
    7a6e:	08 95       	ret

00007a70 <main>:
//		_delay_ms(10);
//		Local_u8Data = ! Local_u8Data;
//	}
//}

void main() {
    7a70:	df 93       	push	r29
    7a72:	cf 93       	push	r28
    7a74:	cd b7       	in	r28, 0x3d	; 61
    7a76:	de b7       	in	r29, 0x3e	; 62
    7a78:	2e 97       	sbiw	r28, 0x0e	; 14
    7a7a:	0f b6       	in	r0, 0x3f	; 63
    7a7c:	f8 94       	cli
    7a7e:	de bf       	out	0x3e, r29	; 62
    7a80:	0f be       	out	0x3f, r0	; 63
    7a82:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    7a84:	0e 94 c7 21 	call	0x438e	; 0x438e <PORT_voidInit>
	SPI_VoidSlaveInit();
    7a88:	0e 94 1e 20 	call	0x403c	; 0x403c <SPI_VoidSlaveInit>
	GIE_voidEnable();
    7a8c:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <GIE_voidEnable>
	while (1) {
		SPI_u8TransceiveStringAsync("ccc", &Global_u8ReceivedData, 3 ,SPI_voidCallBack);
    7a90:	e6 ec       	ldi	r30, 0xC6	; 198
    7a92:	fd e3       	ldi	r31, 0x3D	; 61
    7a94:	80 e6       	ldi	r24, 0x60	; 96
    7a96:	90 e0       	ldi	r25, 0x00	; 0
    7a98:	2c ea       	ldi	r18, 0xAC	; 172
    7a9a:	31 e0       	ldi	r19, 0x01	; 1
    7a9c:	b9 01       	movw	r22, r18
    7a9e:	43 e0       	ldi	r20, 0x03	; 3
    7aa0:	9f 01       	movw	r18, r30
    7aa2:	0e 94 e5 20 	call	0x41ca	; 0x41ca <SPI_u8TransceiveStringAsync>
    7aa6:	80 e0       	ldi	r24, 0x00	; 0
    7aa8:	90 e0       	ldi	r25, 0x00	; 0
    7aaa:	a8 ec       	ldi	r26, 0xC8	; 200
    7aac:	b2 e4       	ldi	r27, 0x42	; 66
    7aae:	8b 87       	std	Y+11, r24	; 0x0b
    7ab0:	9c 87       	std	Y+12, r25	; 0x0c
    7ab2:	ad 87       	std	Y+13, r26	; 0x0d
    7ab4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    7ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    7aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    7abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    7abe:	20 e0       	ldi	r18, 0x00	; 0
    7ac0:	30 e0       	ldi	r19, 0x00	; 0
    7ac2:	4a ef       	ldi	r20, 0xFA	; 250
    7ac4:	54 e4       	ldi	r21, 0x44	; 68
    7ac6:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    7aca:	dc 01       	movw	r26, r24
    7acc:	cb 01       	movw	r24, r22
    7ace:	8f 83       	std	Y+7, r24	; 0x07
    7ad0:	98 87       	std	Y+8, r25	; 0x08
    7ad2:	a9 87       	std	Y+9, r26	; 0x09
    7ad4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    7ad8:	78 85       	ldd	r23, Y+8	; 0x08
    7ada:	89 85       	ldd	r24, Y+9	; 0x09
    7adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    7ade:	20 e0       	ldi	r18, 0x00	; 0
    7ae0:	30 e0       	ldi	r19, 0x00	; 0
    7ae2:	40 e8       	ldi	r20, 0x80	; 128
    7ae4:	5f e3       	ldi	r21, 0x3F	; 63
    7ae6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__ltsf2>
    7aea:	88 23       	and	r24, r24
    7aec:	2c f4       	brge	.+10     	; 0x7af8 <main+0x88>
		__ticks = 1;
    7aee:	81 e0       	ldi	r24, 0x01	; 1
    7af0:	90 e0       	ldi	r25, 0x00	; 0
    7af2:	9e 83       	std	Y+6, r25	; 0x06
    7af4:	8d 83       	std	Y+5, r24	; 0x05
    7af6:	3f c0       	rjmp	.+126    	; 0x7b76 <main+0x106>
	else if (__tmp > 65535)
    7af8:	6f 81       	ldd	r22, Y+7	; 0x07
    7afa:	78 85       	ldd	r23, Y+8	; 0x08
    7afc:	89 85       	ldd	r24, Y+9	; 0x09
    7afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    7b00:	20 e0       	ldi	r18, 0x00	; 0
    7b02:	3f ef       	ldi	r19, 0xFF	; 255
    7b04:	4f e7       	ldi	r20, 0x7F	; 127
    7b06:	57 e4       	ldi	r21, 0x47	; 71
    7b08:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__gtsf2>
    7b0c:	18 16       	cp	r1, r24
    7b0e:	4c f5       	brge	.+82     	; 0x7b62 <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    7b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    7b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    7b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    7b18:	20 e0       	ldi	r18, 0x00	; 0
    7b1a:	30 e0       	ldi	r19, 0x00	; 0
    7b1c:	40 e2       	ldi	r20, 0x20	; 32
    7b1e:	51 e4       	ldi	r21, 0x41	; 65
    7b20:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__mulsf3>
    7b24:	dc 01       	movw	r26, r24
    7b26:	cb 01       	movw	r24, r22
    7b28:	bc 01       	movw	r22, r24
    7b2a:	cd 01       	movw	r24, r26
    7b2c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7b30:	dc 01       	movw	r26, r24
    7b32:	cb 01       	movw	r24, r22
    7b34:	9e 83       	std	Y+6, r25	; 0x06
    7b36:	8d 83       	std	Y+5, r24	; 0x05
    7b38:	0f c0       	rjmp	.+30     	; 0x7b58 <main+0xe8>
    7b3a:	88 ec       	ldi	r24, 0xC8	; 200
    7b3c:	90 e0       	ldi	r25, 0x00	; 0
    7b3e:	9c 83       	std	Y+4, r25	; 0x04
    7b40:	8b 83       	std	Y+3, r24	; 0x03
    7b42:	8b 81       	ldd	r24, Y+3	; 0x03
    7b44:	9c 81       	ldd	r25, Y+4	; 0x04
    7b46:	01 97       	sbiw	r24, 0x01	; 1
    7b48:	f1 f7       	brne	.-4      	; 0x7b46 <main+0xd6>
    7b4a:	9c 83       	std	Y+4, r25	; 0x04
    7b4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    7b50:	9e 81       	ldd	r25, Y+6	; 0x06
    7b52:	01 97       	sbiw	r24, 0x01	; 1
    7b54:	9e 83       	std	Y+6, r25	; 0x06
    7b56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7b58:	8d 81       	ldd	r24, Y+5	; 0x05
    7b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    7b5c:	00 97       	sbiw	r24, 0x00	; 0
    7b5e:	69 f7       	brne	.-38     	; 0x7b3a <main+0xca>
    7b60:	97 cf       	rjmp	.-210    	; 0x7a90 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7b62:	6f 81       	ldd	r22, Y+7	; 0x07
    7b64:	78 85       	ldd	r23, Y+8	; 0x08
    7b66:	89 85       	ldd	r24, Y+9	; 0x09
    7b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    7b6a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7b6e:	dc 01       	movw	r26, r24
    7b70:	cb 01       	movw	r24, r22
    7b72:	9e 83       	std	Y+6, r25	; 0x06
    7b74:	8d 83       	std	Y+5, r24	; 0x05
    7b76:	8d 81       	ldd	r24, Y+5	; 0x05
    7b78:	9e 81       	ldd	r25, Y+6	; 0x06
    7b7a:	9a 83       	std	Y+2, r25	; 0x02
    7b7c:	89 83       	std	Y+1, r24	; 0x01
    7b7e:	89 81       	ldd	r24, Y+1	; 0x01
    7b80:	9a 81       	ldd	r25, Y+2	; 0x02
    7b82:	01 97       	sbiw	r24, 0x01	; 1
    7b84:	f1 f7       	brne	.-4      	; 0x7b82 <main+0x112>
    7b86:	9a 83       	std	Y+2, r25	; 0x02
    7b88:	89 83       	std	Y+1, r24	; 0x01
    7b8a:	82 cf       	rjmp	.-252    	; 0x7a90 <main+0x20>

00007b8c <SPI_voidCallBack>:
		_delay_ms(100);
	}
}

void SPI_voidCallBack() {
    7b8c:	df 93       	push	r29
    7b8e:	cf 93       	push	r28
    7b90:	cd b7       	in	r28, 0x3d	; 61
    7b92:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN0, DIO_u8PIN_HIGH);
    7b94:	83 e0       	ldi	r24, 0x03	; 3
    7b96:	60 e0       	ldi	r22, 0x00	; 0
    7b98:	41 e0       	ldi	r20, 0x01	; 1
    7b9a:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN1, DIO_u8PIN_LOW);
    7b9e:	83 e0       	ldi	r24, 0x03	; 3
    7ba0:	61 e0       	ldi	r22, 0x01	; 1
    7ba2:	40 e0       	ldi	r20, 0x00	; 0
    7ba4:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PIN_HIGH);
    7ba8:	83 e0       	ldi	r24, 0x03	; 3
    7baa:	62 e0       	ldi	r22, 0x02	; 2
    7bac:	41 e0       	ldi	r20, 0x01	; 1
    7bae:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>

	if (!strcmp(Global_u8ReceivedData , "aaa"))
    7bb2:	8c ea       	ldi	r24, 0xAC	; 172
    7bb4:	91 e0       	ldi	r25, 0x01	; 1
    7bb6:	24 e6       	ldi	r18, 0x64	; 100
    7bb8:	30 e0       	ldi	r19, 0x00	; 0
    7bba:	b9 01       	movw	r22, r18
    7bbc:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <strcmp>
    7bc0:	00 97       	sbiw	r24, 0x00	; 0
    7bc2:	31 f4       	brne	.+12     	; 0x7bd0 <SPI_voidCallBack+0x44>
		DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN0, DIO_u8PIN_HIGH);
    7bc4:	80 e0       	ldi	r24, 0x00	; 0
    7bc6:	60 e0       	ldi	r22, 0x00	; 0
    7bc8:	41 e0       	ldi	r20, 0x01	; 1
    7bca:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
    7bce:	0e c0       	rjmp	.+28     	; 0x7bec <SPI_voidCallBack+0x60>
	else if (!strcmp(Global_u8ReceivedData , "bbb"))
    7bd0:	8c ea       	ldi	r24, 0xAC	; 172
    7bd2:	91 e0       	ldi	r25, 0x01	; 1
    7bd4:	28 e6       	ldi	r18, 0x68	; 104
    7bd6:	30 e0       	ldi	r19, 0x00	; 0
    7bd8:	b9 01       	movw	r22, r18
    7bda:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <strcmp>
    7bde:	00 97       	sbiw	r24, 0x00	; 0
    7be0:	29 f4       	brne	.+10     	; 0x7bec <SPI_voidCallBack+0x60>
		DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN0, DIO_u8PIN_LOW);
    7be2:	80 e0       	ldi	r24, 0x00	; 0
    7be4:	60 e0       	ldi	r22, 0x00	; 0
    7be6:	40 e0       	ldi	r20, 0x00	; 0
    7be8:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <DIO_u8SetPinValue>
}
    7bec:	cf 91       	pop	r28
    7bee:	df 91       	pop	r29
    7bf0:	08 95       	ret

00007bf2 <__mulsi3>:
    7bf2:	62 9f       	mul	r22, r18
    7bf4:	d0 01       	movw	r26, r0
    7bf6:	73 9f       	mul	r23, r19
    7bf8:	f0 01       	movw	r30, r0
    7bfa:	82 9f       	mul	r24, r18
    7bfc:	e0 0d       	add	r30, r0
    7bfe:	f1 1d       	adc	r31, r1
    7c00:	64 9f       	mul	r22, r20
    7c02:	e0 0d       	add	r30, r0
    7c04:	f1 1d       	adc	r31, r1
    7c06:	92 9f       	mul	r25, r18
    7c08:	f0 0d       	add	r31, r0
    7c0a:	83 9f       	mul	r24, r19
    7c0c:	f0 0d       	add	r31, r0
    7c0e:	74 9f       	mul	r23, r20
    7c10:	f0 0d       	add	r31, r0
    7c12:	65 9f       	mul	r22, r21
    7c14:	f0 0d       	add	r31, r0
    7c16:	99 27       	eor	r25, r25
    7c18:	72 9f       	mul	r23, r18
    7c1a:	b0 0d       	add	r27, r0
    7c1c:	e1 1d       	adc	r30, r1
    7c1e:	f9 1f       	adc	r31, r25
    7c20:	63 9f       	mul	r22, r19
    7c22:	b0 0d       	add	r27, r0
    7c24:	e1 1d       	adc	r30, r1
    7c26:	f9 1f       	adc	r31, r25
    7c28:	bd 01       	movw	r22, r26
    7c2a:	cf 01       	movw	r24, r30
    7c2c:	11 24       	eor	r1, r1
    7c2e:	08 95       	ret

00007c30 <__divmodsi4>:
    7c30:	97 fb       	bst	r25, 7
    7c32:	09 2e       	mov	r0, r25
    7c34:	05 26       	eor	r0, r21
    7c36:	0e d0       	rcall	.+28     	; 0x7c54 <__divmodsi4_neg1>
    7c38:	57 fd       	sbrc	r21, 7
    7c3a:	04 d0       	rcall	.+8      	; 0x7c44 <__divmodsi4_neg2>
    7c3c:	14 d0       	rcall	.+40     	; 0x7c66 <__udivmodsi4>
    7c3e:	0a d0       	rcall	.+20     	; 0x7c54 <__divmodsi4_neg1>
    7c40:	00 1c       	adc	r0, r0
    7c42:	38 f4       	brcc	.+14     	; 0x7c52 <__divmodsi4_exit>

00007c44 <__divmodsi4_neg2>:
    7c44:	50 95       	com	r21
    7c46:	40 95       	com	r20
    7c48:	30 95       	com	r19
    7c4a:	21 95       	neg	r18
    7c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    7c4e:	4f 4f       	sbci	r20, 0xFF	; 255
    7c50:	5f 4f       	sbci	r21, 0xFF	; 255

00007c52 <__divmodsi4_exit>:
    7c52:	08 95       	ret

00007c54 <__divmodsi4_neg1>:
    7c54:	f6 f7       	brtc	.-4      	; 0x7c52 <__divmodsi4_exit>
    7c56:	90 95       	com	r25
    7c58:	80 95       	com	r24
    7c5a:	70 95       	com	r23
    7c5c:	61 95       	neg	r22
    7c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    7c60:	8f 4f       	sbci	r24, 0xFF	; 255
    7c62:	9f 4f       	sbci	r25, 0xFF	; 255
    7c64:	08 95       	ret

00007c66 <__udivmodsi4>:
    7c66:	a1 e2       	ldi	r26, 0x21	; 33
    7c68:	1a 2e       	mov	r1, r26
    7c6a:	aa 1b       	sub	r26, r26
    7c6c:	bb 1b       	sub	r27, r27
    7c6e:	fd 01       	movw	r30, r26
    7c70:	0d c0       	rjmp	.+26     	; 0x7c8c <__udivmodsi4_ep>

00007c72 <__udivmodsi4_loop>:
    7c72:	aa 1f       	adc	r26, r26
    7c74:	bb 1f       	adc	r27, r27
    7c76:	ee 1f       	adc	r30, r30
    7c78:	ff 1f       	adc	r31, r31
    7c7a:	a2 17       	cp	r26, r18
    7c7c:	b3 07       	cpc	r27, r19
    7c7e:	e4 07       	cpc	r30, r20
    7c80:	f5 07       	cpc	r31, r21
    7c82:	20 f0       	brcs	.+8      	; 0x7c8c <__udivmodsi4_ep>
    7c84:	a2 1b       	sub	r26, r18
    7c86:	b3 0b       	sbc	r27, r19
    7c88:	e4 0b       	sbc	r30, r20
    7c8a:	f5 0b       	sbc	r31, r21

00007c8c <__udivmodsi4_ep>:
    7c8c:	66 1f       	adc	r22, r22
    7c8e:	77 1f       	adc	r23, r23
    7c90:	88 1f       	adc	r24, r24
    7c92:	99 1f       	adc	r25, r25
    7c94:	1a 94       	dec	r1
    7c96:	69 f7       	brne	.-38     	; 0x7c72 <__udivmodsi4_loop>
    7c98:	60 95       	com	r22
    7c9a:	70 95       	com	r23
    7c9c:	80 95       	com	r24
    7c9e:	90 95       	com	r25
    7ca0:	9b 01       	movw	r18, r22
    7ca2:	ac 01       	movw	r20, r24
    7ca4:	bd 01       	movw	r22, r26
    7ca6:	cf 01       	movw	r24, r30
    7ca8:	08 95       	ret

00007caa <__prologue_saves__>:
    7caa:	2f 92       	push	r2
    7cac:	3f 92       	push	r3
    7cae:	4f 92       	push	r4
    7cb0:	5f 92       	push	r5
    7cb2:	6f 92       	push	r6
    7cb4:	7f 92       	push	r7
    7cb6:	8f 92       	push	r8
    7cb8:	9f 92       	push	r9
    7cba:	af 92       	push	r10
    7cbc:	bf 92       	push	r11
    7cbe:	cf 92       	push	r12
    7cc0:	df 92       	push	r13
    7cc2:	ef 92       	push	r14
    7cc4:	ff 92       	push	r15
    7cc6:	0f 93       	push	r16
    7cc8:	1f 93       	push	r17
    7cca:	cf 93       	push	r28
    7ccc:	df 93       	push	r29
    7cce:	cd b7       	in	r28, 0x3d	; 61
    7cd0:	de b7       	in	r29, 0x3e	; 62
    7cd2:	ca 1b       	sub	r28, r26
    7cd4:	db 0b       	sbc	r29, r27
    7cd6:	0f b6       	in	r0, 0x3f	; 63
    7cd8:	f8 94       	cli
    7cda:	de bf       	out	0x3e, r29	; 62
    7cdc:	0f be       	out	0x3f, r0	; 63
    7cde:	cd bf       	out	0x3d, r28	; 61
    7ce0:	09 94       	ijmp

00007ce2 <__epilogue_restores__>:
    7ce2:	2a 88       	ldd	r2, Y+18	; 0x12
    7ce4:	39 88       	ldd	r3, Y+17	; 0x11
    7ce6:	48 88       	ldd	r4, Y+16	; 0x10
    7ce8:	5f 84       	ldd	r5, Y+15	; 0x0f
    7cea:	6e 84       	ldd	r6, Y+14	; 0x0e
    7cec:	7d 84       	ldd	r7, Y+13	; 0x0d
    7cee:	8c 84       	ldd	r8, Y+12	; 0x0c
    7cf0:	9b 84       	ldd	r9, Y+11	; 0x0b
    7cf2:	aa 84       	ldd	r10, Y+10	; 0x0a
    7cf4:	b9 84       	ldd	r11, Y+9	; 0x09
    7cf6:	c8 84       	ldd	r12, Y+8	; 0x08
    7cf8:	df 80       	ldd	r13, Y+7	; 0x07
    7cfa:	ee 80       	ldd	r14, Y+6	; 0x06
    7cfc:	fd 80       	ldd	r15, Y+5	; 0x05
    7cfe:	0c 81       	ldd	r16, Y+4	; 0x04
    7d00:	1b 81       	ldd	r17, Y+3	; 0x03
    7d02:	aa 81       	ldd	r26, Y+2	; 0x02
    7d04:	b9 81       	ldd	r27, Y+1	; 0x01
    7d06:	ce 0f       	add	r28, r30
    7d08:	d1 1d       	adc	r29, r1
    7d0a:	0f b6       	in	r0, 0x3f	; 63
    7d0c:	f8 94       	cli
    7d0e:	de bf       	out	0x3e, r29	; 62
    7d10:	0f be       	out	0x3f, r0	; 63
    7d12:	cd bf       	out	0x3d, r28	; 61
    7d14:	ed 01       	movw	r28, r26
    7d16:	08 95       	ret

00007d18 <strcmp>:
    7d18:	fb 01       	movw	r30, r22
    7d1a:	dc 01       	movw	r26, r24
    7d1c:	8d 91       	ld	r24, X+
    7d1e:	01 90       	ld	r0, Z+
    7d20:	80 19       	sub	r24, r0
    7d22:	01 10       	cpse	r0, r1
    7d24:	d9 f3       	breq	.-10     	; 0x7d1c <strcmp+0x4>
    7d26:	99 0b       	sbc	r25, r25
    7d28:	08 95       	ret

00007d2a <_exit>:
    7d2a:	f8 94       	cli

00007d2c <__stop_program>:
    7d2c:	ff cf       	rjmp	.-2      	; 0x7d2c <__stop_program>
